<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tilnel&#39;s Blog</title>
  <icon>https://s.tilnel.com/icon.png</icon>
  <subtitle>我需要先行到光年以外，为列星指明公转的轨道，否则你便看不到下一夜的闪烁与纷纭。</subtitle>
  <link href="https://s.tilnel.com/atom.xml" rel="self"/>
  
  <link href="https://s.tilnel.com/"/>
  <updated>2024-10-08T12:25:45.596Z</updated>
  <id>https://s.tilnel.com/</id>
  
  <author>
    <name>Tilnel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>置顶必读</title>
    <link href="https://s.tilnel.com/20231017-top/"/>
    <id>https://s.tilnel.com/20231017-top/</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2024-10-08T12:25:45.596Z</updated>
    
    <content type="html"><![CDATA[<p>只要是我在电脑里写下的文字，除了少量牵扯到对其他人的看法的，几乎都会在这里出现。</p><p>我是一个看起来很正常的不正常的人。经常喝酒，轻度抽烟。喜欢花但是不太懂，养一些容易养活的盆栽，不过不想花太多精力。</p><p>正在努力学习调酒；并且努力取得练习调酒的经济条件。毕竟一瓶一两百的酒要比两块多的可乐要难获取得多。以低价格经营着一家宿舍内的酒吧；当然也可以做外送。</p><p>我用右耳的人体的穿刺警示着来往的人；尽管所有人都觉得我的性格没什么问题——甚至可以说性格极好。但经过23年的人生短跑，我知道自己可以对朋友很好，但完全没有耐心去搞这个年代里时兴的那种亲密关系。</p><p>我否认所有对爱情的普遍的模式化的定义：“爱谁就该怎么做”；我否认爱情中可以存在两个人：爱情顶多是两个人各自的爱情，其指向也不是别的，而正是与对方的身形刚好错位的幻影；我否认爱情是“崇高”、“神圣”的：不要拘泥于外界的灌输影响下你对爱情的各种幻想，爱情顶多是“独特”的。</p><p>我会认真思考每一个社会契约中的隐含条款，并在不逃避责任的情况下享受权利；或是通过<strong>拒绝行使权利与拒不承担责任</strong>来表达我对该条款的抗议。所以请不要通过<strong>附加隐含条款的“好意”</strong>将压力给到我头上。</p><p>有任何要求，任何疑惑，任何不满：</p><h1 id="讲。"><a href="#讲。" class="headerlink" title="讲。"></a>讲。</h1><p>我从来都不生气。请不要再当谜语人了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;只要是我在电脑里写下的文字，除了少量牵扯到对其他人的看法的，几乎都会在这里出现。&lt;/p&gt;
&lt;p&gt;我是一个看起来很正常的不正常的人。经常喝酒，轻度抽烟。喜欢花但是不太懂，养一些容易养活的盆栽，不过不想花太多精力。&lt;/p&gt;
&lt;p&gt;正在努力学习调酒；并且努力取得练习调酒的经济条件</summary>
        
      
    
    
    
    <category term="日常" scheme="https://s.tilnel.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>擅作主张的不安</title>
    <link href="https://s.tilnel.com/20240920-upset/"/>
    <id>https://s.tilnel.com/20240920-upset/</id>
    <published>2024-09-20T15:05:42.000Z</published>
    <updated>2024-09-20T15:16:59.824Z</updated>
    
    <content type="html"><![CDATA[<p>人类是一种傲娇生物吗？我不太确定。</p><p>但是至少人是一种极其需要承认的生物。不管是正面的承认，还是反面的不承认也好，总归是确立了他作为一个能动的主体，进而有能力得到这个世界的反馈。</p><p>人与人之间相交往，到底有什么难度呢？接下来我所提出的说法是有一个天生的漏洞的，但是我先提出来好了，然后再来考虑这个漏洞应当怎么解释。</p><p>如果一个人喃喃自语，喋喋不休，那么他大概会被认为是疯子；事实上，这样的人最吊诡的地方是他不需要收到反馈就可以持续地进行这样的活动。对于一般人而言，如果说了很多话都没有得到回应的话，他便也不再说。</p><p>话与话之间的沉默是一片充满焦急的区域。那里是一些由于焦虑得不到回应而自动产生的擅作主张的不安。没有人能在交际中将这些不安一股脑地倒出来。  </p><p>就是这样。 </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;人类是一种傲娇生物吗？我不太确定。&lt;/p&gt;
&lt;p&gt;但是至少人是一种极其需要承认的生物。不管是正面的承认，还是反面的不承认也好，总归是确立了他作为一个能动的主体，进而有能力得到这个世界的反馈。&lt;/p&gt;
&lt;p&gt;人与人之间相交往，到底有什么难度呢？接下来我所提出的说法是有一个天生</summary>
        
      
    
    
    
    <category term="感情" scheme="https://s.tilnel.com/categories/%E6%84%9F%E6%83%85/"/>
    
    
  </entry>
  
  <entry>
    <title>干沉默了</title>
    <link href="https://s.tilnel.com/20240729-work/"/>
    <id>https://s.tilnel.com/20240729-work/</id>
    <published>2024-07-28T20:06:18.000Z</published>
    <updated>2024-07-29T12:38:17.849Z</updated>
    
    <content type="html"><![CDATA[<p> 不确定，再看看</p><p>把小桌板拿到桌上架起来，刚好够上显示器的底部高度。现在可以站着办公了。</p><p>不过我说，这周我没少做事，但是又根本没干正事。周五老板给我发消息，下周开小会。结果我这周都干了什么呢：睡觉，翻译视频，调一个没头脑的 netdata bug；玩 PXE，网络启动；调 dotoj 的 bug；写新的 profiler。劲都没使在正事上。</p><p>这一周的作息也基本上处于一个完犊子的状态。本来想往前调，结果每天在宿舍起床之后吃个晚饭回来，晚上准备早点睡。然后就开始折腾各种玩意，最后都是拖到早上，7点，9点。周六我寻思干脆这晚上在工位通宵算了，结果好家伙，又写了一个没什么大用的东西之后，开始猛刷视频。本来想着直接一波熬到晚上，这样还能调正过来。没想到吃完午饭回宿舍还是累了，睡了一觉，又是晚上到工位。</p><p>。。。</p><p>其实这种状态真的挺好的，只要我不用干活不用上班，那就是绝妙。可惜事情还是得做的。</p><p>虽然也没少想心思，但是已经比以前好多了。身边也没那么多事，况且前面去了一次 BSK 之后直接给我了一点小小的震撼，一段时间里可能都会处于比较佛系的状态。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt; 不确定，再看看&lt;/p&gt;
&lt;p&gt;把小桌板拿到桌上架起来，刚好够上显示器的底部高度。现在可以站着办公了。&lt;/p&gt;
&lt;p&gt;不过我说，这周我没少做事，但是又根本没干正事。周五老板给我发消息，下周开小会。结果我这周都干了什么呢：睡觉，翻译视频，调一个没头脑的 netdata</summary>
        
      
    
    
    
    <category term="生活" scheme="https://s.tilnel.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>制作视频汉化字幕</title>
    <link href="https://s.tilnel.com/20240722-script/"/>
    <id>https://s.tilnel.com/20240722-script/</id>
    <published>2024-07-22T07:47:15.000Z</published>
    <updated>2024-09-21T22:04:45.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近想搬两个视频到 B 站。所以学习一下如何制作汉化字幕。</p><p><a href="https://www.bilibili.com/read/cv35618868/">经验总结：汉化字幕的生产流程简介 - 哔哩哔哩 </a></p></blockquote><p>请注意，此文大部分是个人经验，每个字幕组的工作流程和具体内容都不大一样，仅供大家参考，可能不具有代表性。</p><p> 我自己做的字幕比较多的是：动画片、各类创作者访谈、电影幕后视频，有时候会自己一个人从头到尾做完一个视频，有时候也跟组里的伙伴们一起合作，所以啥的都会搞一点。就按照我做的这几个工种结合字幕制作流程中的顺序来说：</p><p>一、片源</p><p>首先是片源获取，这个分情况，大家都知道做字幕这个灰色地带，如果影视剧的话，第一时间肯定是到各大论坛、种子站或者DC++源之类的地方找资源，也有一些字幕组的片源帝是直接自购（流媒体or碟）然后扒出来的，总之这是个各显神通的环节。扒下来的片源往往被称作“生肉”，相对于做好字幕的片子“熟肉”，字幕组就是一个厨房团队。</p><p>接下来工作到了这里就有分别，最重要的一点是，片源有没有自带字幕，带的是什么语。</p><p>二、需不需要听写？听译？</p><p>如果没有自带字幕，就需要听写+翻译或者听译了（看组里翻译的能力水准，需要听写+翻译合作，还是一个人可以完成听译），我以前一个人翻那些YouTube上面扒下来的访谈视频就是靠硬听硬翻的，有时候一句没听懂，翻来覆去听，为了翻译一句话能搞一天。主要还是需求听的人对这个片源的常用语言、文化环境里的各类梗、说话人的口音等等有很详细的了解。</p><p>不过现在听译的需求越来越少了，有各类AI语音识别软件，连时间轴都帮你打好了，原片的语言如果没有特别重的口音，基本上AI都能识别出来，像YouTube甚至有自带的语音识别转字幕功能，轴都帮你打好了，虽然有时候打轴的断句有点奇怪。</p><p>如果片源有自带字幕，那就轻松很多，不用听写，而且轴打得都比较标准，可以直接进到翻译阶段。</p><p>三、打时间轴</p><p>上面说的“打轴”，啥意思呢，就是给这个字幕做上时间轴，这个时候我一般会先用最基础的字母格式：srt格式的文件（听写软件和YouTube自动生成的字幕一般也会导出这种格式）。srt不含任何字幕格式（字体大小、颜色、位置甚至更高级的特效等等），只有单纯的两个信息：1、某一段字幕在视频哪个时间点出现，又在哪个时间点消失；2、这段字幕的文字内容。</p><p>打轴是一个挺枯燥的活儿，你需要精确到毫秒，保证字幕和语音能完全对上。早年的软件不大好用，后来我发现了大家都在用的神器aegisub，这个软件能把音频波形、视频画面和字幕放在同一个窗口下，同步播放，并且可以用可视化的UI直接划取某一段音频波形打轴，工作效率高了很多。</p><p><img src="https://i0.hdslb.com/bfs/article/fbb33a979a1461f4890b3db4212a2752572604.png" alt="aegisub的界面示例，这是我翻译IGN《未来蝙蝠侠》幕后纪录片的截图"></p><p>四、翻译</p><p>翻译这个阶段，也是比较复杂的一个阶段，得分几个小点讲讲。</p><p>弄懂原文当然还是基础，视频翻译中可能更会容易出现俚语、俗语、典故、时代性表达等等，翻译虽然也是再创作，但是理解原文的基础上译者才能进行自己的发挥，这点对于所有类型的翻译都是一样的要求。</p><p>字幕翻译和书面翻译不同，其实更接近口译一点，字幕展示时间是被片中人说话的速度所固定的，观众并不像书的读者那样有反复回读的时间，所以对于译文更会要求短、准确、易于理解。一行中文字幕一般来说在15个字是观众能够兼顾看画面+读字幕的极限了，如果能在10个字以内更好了——当然这和这句话出现在屏幕上的时间也有关系，如果说得慢、时间长，那也可以适当放宽。这就反过来涉及到和上面打轴流程之间的冲突，不同语言之间的信息量不同，一句话长短可能区别很大，所以翻译的时候再次调整断句和时间轴是再常见不过的事情了。</p><p>还有和其他翻译形式共通的一个点，就是说话人的语气、用词等等，在时间允许的情况下，多多琢磨，如何用中文更好地把原文中特殊格式、隐含的意思表达出来。这些东西我有详细在经验总结：美漫汉化时要注意什么？这里说过。</p><p>四、注释</p><p>这是一个比较特殊的点，正式影视引进的字幕里，按照工作标准，是没有注释的，有带注释的都是我们这类民间字幕组。特别是我们翻译美漫采访、动画这类，典故、梗比较多的东西，有些东西就会想注释下，方便刚入坑的萌新更好理解，也是一个去对接多元宇宙里其他作品的跳板。在其他情况下也会有注释的情况，比如历史类、科技类、文化类等等纪录片、传记片之类的，很可能要出现注释一些背景知识的情况。但是一定要注意的是，注释时候不要过于自我陶醉了，克制一点，简短一点，观众是来看这个片子本身的~</p><p>五、校对</p><p>校对不一定每个字幕组的流程里都有，但是其实是必不可少的一个步骤，最基本是检查翻译好的字幕里有没有错别字等等低级错误，然后就是有没有翻译错误，例如对原文理解失误、中文表达不顺畅、或者有没有更好的表达等等之类的。校对需要比较熟练、对背景有深度了解、比较有责任心的人来做，一般都是字幕组里的老人。</p><p>六、格式、特效</p><p>这时候，格式一般就从srt转成ass了（不是屁股），ass格式中不光包括了时间轴信息和字幕内容，还有字幕的字体、位置、字号、颜色，甚至淡入淡出、在屏幕上移动、变大变小、卡拉OK特效等等。</p><p>格式上有一些我个人的习惯，可供大家参考：</p><p>如果你要做中英双语字幕，英文的字号要比中文小一点，和中文一样大的英文字母会显得非常臃肿。</p><p>中文字幕上的标点，可以有感叹号、问号、逗号等等，但是省略句号会比较美观，因为放了句号会显得原本居中的字幕向左偏了。</p><p>尽量用易读清晰的字体，适中的大小，颜色我喜欢选最常规的白色或者稍微低饱和度一点的黄色。高饱和度的颜色会让字幕显得非常廉价——当然如果你要突出复古迪斯科舞厅的感觉，某些特定的偶尔也能用个五彩斑斓的颜色点缀点缀，就是别从头到尾都闪瞎人眼就行。</p><p>为了增强字幕的易读性，描边、阴影、半透明背景、阴刻&#x2F;阳刻效果等等这些做法至少要选择一项，否则字幕常常会出现和视频背景颜色混杂导致看不清的情况。同样也是为了易读，不要选择太细的字体。</p><p>字幕的位置不要太高太低，更要注意不要挡住视频的重要部分，调节位置的时候一定要细心一点。</p><p>有些特效能手还会在ass的基础上用AE等等其他软件字幕做更进一步的特效，这就是更加各显神通的地方，也看各组的审美了。</p><p>七、压制</p><p>完成格式特效之后，又有两条路可走：直接发布外挂字幕，让观众自己把外挂字幕加载到生肉里面观看。或者直接把字幕压制到生肉中，做成熟肉。</p><p>以前的视频编码、格式比较混乱，有人用rmvb，有人用avi，还有人直接用mkv封装的，近些年来大家似乎慢慢都比较统一压成mp4了。压制也比以前简单了很多，不用再写代码，有许多傻瓜式的软件，把生肉和字幕拖进去，不到一会儿它就压好了。</p><p>八、发布</p><p>发布也有区别，可以线上平台直接让人观看，如果有版权因素容易被和谐，不过是当下懒人观众越来越多的情况下，线上还是最容易能被人看到的方式。还有还是发资源链接给人下载，以前大家搞BT、磁力、电驴，后来各类网盘野蛮生长的时候下载最方便，不过随着版权净网的增强和网盘限速越来越多，也稍难了一点，不过这两年貌似又有一些新的网盘开始野蛮生长了，不知道这些新的网盘还能野蛮多久。</p><p>还有一种比较尴尬的“发布”，就是字幕组做好的字幕，被某些盗版在线网站拿去，压进一些什么澳门赌场之类的诈骗广告，再发到自己的网站上让人在线看，很多字幕组对于这种事情都很无奈，但是本身又是个灰色地带，很少有维权的办法。</p><p>其实到了这个时代，字幕组越来越少了，有一点是因为中文市场越来越大，很多影视剧上流媒体的时候，都会自带翻译好的中文字幕，这时候只需要压制一下就成了熟肉了。当然某个内容的深度爱好者还是会觉得官方字幕不够精确，会自己再出精校版、注释版等等。还有一点是AI越来越发达了，许多比较简单口语的内容AI能够完成听译一条龙，不过目前对于语言类的AI还是英语方面做得最好，到翻译成中文还是经常有那么些纰漏和不像人话的地方，碰到英语之外的语言就更孱弱了。等到AI进化成完全体的那一天，也许字幕组才会真正退出历史舞台吧。 </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近想搬两个视频到 B 站。所以学习一下如何制作汉化字幕。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/read/cv35618868/&quot;&gt;经验总结：汉化字幕的生产流程简介 - 哔哩哔哩</summary>
        
      
    
    
    
    <category term="搬运" scheme="https://s.tilnel.com/categories/%E6%90%AC%E8%BF%90/"/>
    
    
  </entry>
  
  <entry>
    <title>网关吃了我的 dnsmasq REPLY</title>
    <link href="https://s.tilnel.com/20240721-dnsmasq/"/>
    <id>https://s.tilnel.com/20240721-dnsmasq/</id>
    <published>2024-07-21T07:09:42.000Z</published>
    <updated>2024-07-21T14:23:36.584Z</updated>
    
    <content type="html"><![CDATA[<p>这次只能说，好好品一下了。</p><p>先说一下网络配置：</p><p>网关 - 路由器 - dhcp 服务器1： 192.168.3.1 Huawei AX3 Pro</p><p>dhcp 服务器2，PXE 服务器：192.168.3.21(dnsmasq)</p><p>上 dnsmasq 配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/etc/dnsmasq.conf</span><br><span class="line">--------------------------</span><br><span class="line">port=0</span><br><span class="line"># dhcp-option-force=209,archiso_pxe.cfg</span><br><span class="line"># dhcp-option-force=210,</span><br><span class="line">dhcp-boot=/boot/syslinux/lpxelinux.0</span><br><span class="line">enable-tftp</span><br><span class="line">tftp-root=/srv/tftp</span><br><span class="line">log-dhcp</span><br><span class="line">dhcp-range=192.168.3.0,proxy,255.255.255.0</span><br><span class="line"># dhcp-vendorclass=set:bios,PXEClient:Arch:00000</span><br><span class="line">pxe-service=x86PC,&#x27;Network Boot&#x27;,/boot/syslinux/lpxelinux</span><br></pre></td></tr></table></figure><p>PXE 客户端：VirtualBox BIOS</p><p>两边抓包：</p><p>服务端：<img src="image-20240721151300600.png" alt="我肯定回复里是有信息的"></p><p>客户端：</p><p>不好意思，Wireshark 抓包结果没存。但是没有发现来自 c0a80315 的 DHCP 协议消息。RNM</p><p>我关掉了路由器的 DHCP，使用 Linux 上的 isc-dhcp-server，</p><p><img src="image-20240721203959046.png" alt="image-20240721203959046"></p><p>都没有 OFFER 了。如何验证是不是被路由器吞了？我们直接把两台电脑接起来</p><p><img src="image-20240721204222334.png" alt="image-20240721204222334"></p><p>瞬间啥都有了</p><p><img src="image-20240721204302756.png" alt="image-20240721204302756"></p><p>问题在于，我把 pxelinux.0 一送过去它就停下来了。不管是 VBox 还是物理 BIOS 都是这个 B 样。我懒得弄了，爬</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这次只能说，好好品一下了。&lt;/p&gt;
&lt;p&gt;先说一下网络配置：&lt;/p&gt;
&lt;p&gt;网关 - 路由器 - dhcp 服务器1： 192.168.3.1 Huawei AX3 Pro&lt;/p&gt;
&lt;p&gt;dhcp 服务器2，PXE</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://s.tilnel.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>在没有DHCP的情况下使用PXE-网络启动服务器设置</title>
    <link href="https://s.tilnel.com/20240720-ipxe/"/>
    <id>https://s.tilnel.com/20240720-ipxe/</id>
    <published>2024-07-20T10:00:53.000Z</published>
    <updated>2024-07-20T12:18:16.867Z</updated>
    
    <content type="html"><![CDATA[<p>PXE, Preboot eXecution Environment，发音一般为 pixie，是从网卡启动的环境。我的了解并不深刻，但是总归，这种启动方式是和硬盘启动、USB 启动并列的一种方式。它做的事情无非是：</p><ul><li>从当前网络环境中找到一个 DHCP 服务器</li><li>DHCP 服务器告诉本机，TFTP 服务器的位置</li><li>本机从 TFTP 服务器上下载一个引导程序。可能是 lpxelinux，总之是个程序</li><li>可能还下载一些配置文件，告诉引导程序应该做什么</li><li>然后将控制权移交给引导程序</li></ul><p>这样的启动方式，还可以直接启动 grub。间接地，可以启动任何的操作系统。只要引导程序后续向远程请求 vmlinuz 和 initramfs，就可以启动 linux 内核。这也是无盘机的原理。</p><p>但是，pxe 的不便之处就在于，必须要一个 DHCP 服务器来给出这些配置。这对于广域网上的用户，并不是很友好。比如我在南京大学，想要连接中科大的网络启动服务，这就很困难。如果我想要我自己搭建的网络启动服务在校内都可用，我还需要和 ITSC (信息服务中心) 做可能的协商（并且大概率不会成功！除非以组织的名义来做，比如 LUG 和高性能计算中心一起来）。</p><p>造成这一切的主要原因是，网卡自带的 pxe ROM 并没有很复杂的功能。于是 iPXE 呼之欲出。</p><h2 id="配置-iPXE"><a href="#配置-iPXE" class="headerlink" title="配置 iPXE"></a>配置 iPXE</h2><p><a href="https://ipxe.org/">iPXE</a></p><p>可以选择烧到网卡上（！）或是烧到其他的启动介质上。</p><p>如果烧到网卡上，等于是仅对于我现在能够控制的机器有用。对于未来可能的机器，比如我要装个系统，我还要先烧一个 iPXE。这就麻烦了。烧到其他的启动介质上？我不如直接烧一个 Windows.iso 进去。</p><p>当然因为是做一个小玩具。并且我们并不确定会不会雀实存在有的电脑上采用了 iPXE。（并且我们不想用 U 盘）。因此在这里我们选择<a href="https://ipxe.org/howto/romburning/intel">烧网卡</a>。注意根据自己的网卡型号去看 ipxe 官网上不同的指引。</p><p>然而根据指引，我们还是要烧 U 盘。你妈</p><p>我居然真的没有 U 盘</p><h2 id="放弃-iPXE"><a href="#放弃-iPXE" class="headerlink" title="放弃 iPXE"></a>放弃 iPXE</h2><p>使用 DHCP 服务器吧。</p><p>使用打包好的 <a href="https://netboot.xyz/">netboot.xyz</a> 的 docker image。</p><h2 id="放弃-netboot"><a href="#放弃-netboot" class="headerlink" title="放弃 netboot"></a>放弃 netboot</h2><p>docker 要加 proxy 才能运行。dashboard 完全加载不了。</p><h2 id="跟着-ArchWiki-来做"><a href="#跟着-ArchWiki-来做" class="headerlink" title="跟着 ArchWiki 来做"></a>跟着 ArchWiki 来做</h2>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;PXE, Preboot eXecution Environment，发音一般为 pixie，是从网卡启动的环境。我的了解并不深刻，但是总归，这种启动方式是和硬盘启动、USB 启动并列的一种方式。它做的事情无非是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从当前网络环境中找到一个</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://s.tilnel.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>从源码更新 sshd</title>
    <link href="https://s.tilnel.com/20240718-sshd/"/>
    <id>https://s.tilnel.com/20240718-sshd/</id>
    <published>2024-07-18T13:47:44.000Z</published>
    <updated>2024-07-21T15:29:43.402Z</updated>
    
    <content type="html"><![CDATA[<p> 之前爆出 Linux 上的 sshd 可能有一个 race condition 导致的 RCE。建议更新到 openssh 9.8。于是火速 clone 源码之后直接 make install 了。</p><p>但是今天在断电之后想扫一下办公室网络发现主机，觉得更新的人应该不多，随手就</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV ip/24 -p 22</span><br></pre></td></tr></table></figure><p>期待出一个 openssh 9.8，结果出来了一个别人的主机，自己的是没有。当然后来验证了其实是我的机器没有开，但我到了座位上之后，也是闲的蛋疼想看看 nmap 一下自己的设备到底能出些什么玩意。结果大为震撼，<code>openssh-9.6p1</code> 。。。</p><p>到底是谁发明的 <code>ssh -V</code> 验证版本更新成功法？这里面有另外？个变量：</p><ul><li>openssh 的安装目录</li><li>systemd 的配置</li><li>ssh 的编译参数</li></ul><p>openssh 现在居然默认安装在 <code>/usr/local</code>。。。但是 systemd 当然只认 <code>/usr/</code>。</p><p>ssh 编译时如果不指定和当前版本一致的 config 目录，就。。不知道会是哪里。最后会导致 fingerprint changed &amp; man in the middle attack。</p><p><img src="image-20240718215331548.png" alt="image-20240718215331548"></p><blockquote><p>配置文件目录变了之后，就不会用原来的 pubkey 作为 fingerprint 了</p></blockquote><p>所以我们根据 <a href="https://www.linuxfromscratch.org/blfs/view/systemd/postlfs/openssh.html">OpenSSH-9.8p1 (linuxfromscratch.org)</a> 的指导，重新编译了 openssh，并且小改 Makefile 进行了安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr                            \</span><br><span class="line">            --sysconfdir=/etc/ssh                    \</span><br><span class="line">            --with-privsep-path=/var/lib/sshd        \</span><br><span class="line">            --with-default-path=/usr/bin             \</span><br><span class="line">            --with-superuser-path=/usr/sbin:/usr/bin \</span><br><span class="line">            --with-pid-dir=/run                      &amp;&amp;</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>更新：这样做会使得在 ssh client（ssh-session）中，PATH 没有 &#x2F;usr&#x2F;local&#x2F;bin。导致自己编译安装的 vim 没办法直接启动。</p><p>解决办法：<code>--with-default-path</code> 和 <code>--with-superuser-path</code> 加一加。</p><p>更新：2FA 和登录邮件提醒消失了</p><p>解决：添加 <code>--with-pam</code></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt; 之前爆出 Linux 上的 sshd 可能有一个 race condition 导致的 RCE。建议更新到 openssh 9.8。于是火速 clone 源码之后直接 make install</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://s.tilnel.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux wakeonlan 无法正常开启</title>
    <link href="https://s.tilnel.com/20240718-linuxwol/"/>
    <id>https://s.tilnel.com/20240718-linuxwol/</id>
    <published>2024-07-18T12:52:47.000Z</published>
    <updated>2024-07-18T12:56:15.528Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nettool -s enp34s0 wol g</span><br></pre></td></tr></table></figure><p>g 就是 granted，d 就是 denied</p><p>这样设置网卡允许wol是一次性的。重启之后，又自动变成禁止。尝试用 update-rc.d 开机自动执行脚本，不知道为什么不行。</p><p>所以按照 ArchWiki 的方式，设置成 systemd 管理的</p><p><a href="https://wiki.archlinux.org/title/Wake-on-LAN">Wake-on-LAN - ArchWiki (archlinux.org)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/network/50-wired.link</span><br><span class="line">---</span><br><span class="line">[Match]</span><br><span class="line">MACAddress=aa:bb:cc:dd:ee:ff</span><br><span class="line"></span><br><span class="line">[Link]</span><br><span class="line">NamePolicy=kernel database onboard slot path</span><br><span class="line">MACAddressPolicy=persistent</span><br><span class="line">WakeOnLan=magic</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://s.tilnel.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows 快速启动无法被 wol 唤醒</title>
    <link href="https://s.tilnel.com/20240718-wol/"/>
    <id>https://s.tilnel.com/20240718-wol/</id>
    <published>2024-07-18T12:09:36.000Z</published>
    <updated>2024-07-18T12:11:28.246Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 官方文档《 <a href="https://go.smzdm.com/3ecd4f1e758f18ee/ca_aa_yc_163_amx025p4_16293_2621_1641_0">System Power States</a> 》中讲述到，<strong>Windows 系统自身（抛开 BIOS 不谈）是不支持“快速启动”和“关机”状态下的网络唤醒，只支持“睡眠”、“休眠”状态下的网络唤醒</strong>：</p><ul><li><p>睡眠（Sleep），属于 S3 电源状态；</p></li><li><p>快速启动（Fast Startup），属于 S4 电源状态；</p></li><li><p>休眠（Hibernate），属于 S4 电源状态；</p></li><li><p>关机（Soft off），属于 S5 电源状态</p></li><li><p>对于<strong>“快速启动（fast startup, S4）”：</strong>从 Windows 8.1 开始到 Windows 11，“快速启动”作为系统默认的“<strong>关机”方式</strong>，是不支持网络唤醒的，<strong>这也是为什么在 WOL 的教程中会让你关闭“快速启动”</strong>：</p></li></ul><blockquote><p>“快速启动”：快速启动是一种关机类型，它使用休眠文件来加快后续的启动速度，在这种关机状态下，Windows 系统不支持网络唤醒。“快速启动”与“休眠”同属于  S4 电源状态。</p></blockquote><p><img src="619f939c2356a9109.png_e1080.jpg" alt="WOL 网络唤醒避坑指南：常见问题的分析与内容补充"></p><p>“快速启动”属于“<strong>hybrid shutdown（混合关机）</strong>”，是关机的一种类型：</p><p><img src="619fb314b625f7326.png_e1080.jpg" alt="《System Power States》"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Windows 官方文档《 &lt;a href=&quot;https://go.smzdm.com/3ecd4f1e758f18ee/ca_aa_yc_163_amx025p4_16293_2621_1641_0&quot;&gt;System Power States&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="Windows" scheme="https://s.tilnel.com/categories/Windows/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 系统无法正常 suspend （睡眠）</title>
    <link href="https://s.tilnel.com/20240718-suspend/"/>
    <id>https://s.tilnel.com/20240718-suspend/</id>
    <published>2024-07-18T10:50:57.000Z</published>
    <updated>2024-07-18T12:09:04.860Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">suspend</span></span><br></pre></td></tr></table></figure><p>仔细翻看 journal：</p><p><img src="image-20240718185134192.png" alt="image-20240718185134192"></p><p> 但其实我们并没有 nvidia 驱动，甚至是 headless 的。查看 service 的依赖</p><p><img src="image-20240718185214952.png" alt="image-20240718185214952"></p><p>全删掉，然后 <code>daemon-reload</code> 就好了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://s.tilnel.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>看看Redis 2.8源码</title>
    <link href="https://s.tilnel.com/20240715-redis/"/>
    <id>https://s.tilnel.com/20240715-redis/</id>
    <published>2024-07-15T06:08:12.000Z</published>
    <updated>2024-07-15T06:09:10.180Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image-20240715140825253.png" alt="image-20240715140825253"></p><p>唯一用到多线程的地方是一个看起来很 tricky 的优化，震撼我妈</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;image-20240715140825253.png&quot; alt=&quot;image-20240715140825253&quot;&gt;&lt;/p&gt;
&lt;p&gt;唯一用到多线程的地方是一个看起来很 tricky</summary>
        
      
    
    
    
    <category term="Distributed Systems" scheme="https://s.tilnel.com/categories/Distributed-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>图形绘制技术-光学相机</title>
    <link href="https://s.tilnel.com/20240708-optical/"/>
    <id>https://s.tilnel.com/20240708-optical/</id>
    <published>2024-07-08T06:44:38.000Z</published>
    <updated>2024-07-10T07:55:54.840Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image-20240708144504816.png" alt="image-20240708144504816"></p><p>参考文献：现代光学镜头设计方法与实例</p><p><img src="image-20240710155552561.png" alt="image-20240710155552561"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;image-20240708144504816.png&quot; alt=&quot;image-20240708144504816&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考文献：现代光学镜头设计方法与实例&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>DMCK 设计</title>
    <link href="https://s.tilnel.com/20240701-dmck/"/>
    <id>https://s.tilnel.com/20240701-dmck/</id>
    <published>2024-06-30T23:54:13.000Z</published>
    <updated>2024-07-02T13:44:21.048Z</updated>
    
    <content type="html"><![CDATA[<p>我也不知道怎么回事，在后台有一个随机读写lock的程序忘了kill的情况下，测试程序一直能打出长度一样、顺序一样、甚至内容也一样的log，企图骗我这就是执行路径。CS套路深，我要回农村</p><p>假设我获得了系统调用的顺序和所有系统调用之后的进程状态。</p><p><img src="image-20240702214113221.png" alt="image-20240702214113221"></p><p>显然是B。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssite_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> buf[.count], <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure><p>注意 buf 是 <code>const</code> 意思是写之前和写之后是同一个状态。但是 $\mathbb{A}$ 状态下，write 的参数未必准备好了。只有到系统调用的前一刻，其所有的参数才被准备好。想要从 $\mathbb{B} $ 之前获取参数并不是什么问题，关键在于「向前多少」</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我也不知道怎么回事，在后台有一个随机读写lock的程序忘了kill的情况下，测试程序一直能打出长度一样、顺序一样、甚至内容也一样的log，企图骗我这就是执行路径。CS套路深，我要回农村&lt;/p&gt;
&lt;p&gt;假设我获得了系统调用的顺序和所有系统调用之后的进程状态。&lt;/p&gt;
&lt;p&gt;&lt;</summary>
        
      
    
    
    
    <category term="DisSys" scheme="https://s.tilnel.com/categories/DisSys/"/>
    
    
  </entry>
  
  <entry>
    <title>内心快板一则</title>
    <link href="https://s.tilnel.com/20240630-allegro/"/>
    <id>https://s.tilnel.com/20240630-allegro/</id>
    <published>2024-06-29T20:41:34.000Z</published>
    <updated>2024-06-29T21:40:16.070Z</updated>
    
    <content type="html"><![CDATA[<p>客人：这差使您办好了，不负众望。</p><p>先生：鬼知道我吃了多少苦头。</p><p>客人：这些磨难让您更加成熟老练，以后世上的人听到您的姓名，无人不知无人不晓这一位铁骨头的硬汉子。</p><p>先生：我本不想收受它的这些好处。这难事落到谁的头上，本来就是一笔糊涂账！有人可以得过且过，有人就要苦尽甘来， 甚至于这甘也并不来。</p><p>人本没有必要平衡心态，无非是对比多了自觉“失衡”。但我只劝想要“平衡”的，那高高在上的为什么用不着自己平衡，反而让落在下面的自己去找？</p><p>子女较多的家里，经常有被要求懂事的那几个，和被溺爱的那几个。那要懂事的，往往受到的恩惠是较少的。因为是”懂事的”，所以他们并不能为少受恩惠而大呼小叫。于是发展出的那种苦闷是二阶性的： 其怀疑的是【必须自己想出将这一切合理化的说辞说服自身】这件事。</p><p>简单来说，这个气我受了，但是要我跟谁也不能说，打碎了牙往肚子里咽，哪有这么霸道的。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;客人：这差使您办好了，不负众望。&lt;/p&gt;
&lt;p&gt;先生：鬼知道我吃了多少苦头。&lt;/p&gt;
&lt;p&gt;客人：这些磨难让您更加成熟老练，以后世上的人听到您的姓名，无人不知无人不晓这一位铁骨头的硬汉子。&lt;/p&gt;
&lt;p&gt;先生：我本不想收受它的这些好处。这难事落到谁的头上，本来就是一笔糊涂账</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://s.tilnel.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>2024春季 蒋炎岩《操作系统》期末回忆</title>
    <link href="https://s.tilnel.com/20240630-OS/"/>
    <id>https://s.tilnel.com/20240630-OS/</id>
    <published>2024-06-29T19:55:33.000Z</published>
    <updated>2024-06-29T19:59:06.954Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>By <a href="https://space.bilibili.com/8002700">Fradow</a></p></blockquote><h2 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一 基本概念"></a>一 基本概念</h2><p>均用10-20字描述即可。</p><ol><li>什么是内核（kernel），什么是外壳（shell）？</li><li>写出系统调用（<code>syscall</code>、<code>ecall</code> 等）的功能。</li><li>什么是数据竞争？为什么C代码中要避免数据竞争？</li><li>很多操作系统都没有关机指令，那么它是如何实现关闭计算机的？</li><li>为什么磁盘等存储设备要设计成按块读取？</li></ol><h2 id="二-进程、线程与地址空间"><a href="#二-进程、线程与地址空间" class="headerlink" title="二 进程、线程与地址空间"></a>二 进程、线程与地址空间</h2><p>现在你想在Linux上实现 <code>pidof</code> 指令，可通过命令行参数传入进程名，打印拥有该进程名的所有进程号。</p><ol><li><code>pidof</code> 的 <code>main</code> 函数有 <code>argc</code>、<code>argv</code> 两个参数，写出其函数原型，解释它们都代表什么含义。</li><li>命令行参数传给进程后存放在什么位置？</li><li>10-20字描述如何实现 <code>pidof</code>。</li><li>操作系统中的进程可以随时开始、中止。这对的实现有何影响？如果想让 <code>pidof</code> 显示（近期）历史上某个瞬间的进程列表，需要如何实现？</li></ol><h2 id="三-编译、链接和加载"><a href="#三-编译、链接和加载" class="headerlink" title="三 编译、链接和加载"></a>三 编译、链接和加载</h2><p>以下是执行 <code>./a.out</code> 后其进程对应的一段 <code>pmap</code> 输出。<em>（回忆时编的，重点是最后一列）</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0000000000400000</span>    <span class="number">132</span>K r-x-- a.out</span><br><span class="line"><span class="attribute">0000000000602000</span>      <span class="number">4</span>K r---- a.out</span><br><span class="line"><span class="attribute">0000000000603000</span>      <span class="number">4</span>K r---- a.out</span><br><span class="line"><span class="attribute">0000000000604000</span>      <span class="number">4</span>K rw--- a.out</span><br><span class="line"><span class="attribute">00007f8b1c000000</span>    <span class="number">128</span>K rw---<span class="meta"> [anon]</span></span><br><span class="line"><span class="attribute">00007f8b1c020000</span>    <span class="number">256</span>K rw---<span class="meta"> [anon]</span></span><br><span class="line"><span class="attribute">00007f8b1c040000</span>    <span class="number">132</span>K rw---<span class="meta"> [stack]</span></span><br><span class="line"><span class="attribute">00007fffedcfed00</span>      <span class="number">4</span>K r-x--<span class="meta"> [vvar]</span></span><br><span class="line"><span class="attribute">00007fffedcff000</span>      <span class="number">4</span>K r----<span class="meta"> [vdso]</span></span><br></pre></td></tr></table></figure><ol><li>解释静态链接和动态链接的区别。</li><li>在输出中的每一行地址空间后写出其表示的含义。<code>./a.out</code> 是通过静态链接还是动态链接得到的？</li><li>若实现一个调试器，支持用一个进程调试另一个进程，需要在操作系统上做什么设计（在系统对象和系统调用上）？</li></ol><h2 id="四-并发编程"><a href="#四-并发编程" class="headerlink" title="四 并发编程"></a>四 并发编程</h2><p>现有n个线程（线程号为1, 2, 3, …, n）玩石头剪刀布，每个线程创建后均执行一次 <code>play_one_round</code>。其中调用 <code>play</code> 得到每个线程的胜负结果，若平局则结果均为 <code>TIE</code>。请写出完整的 <code>play</code> 函数实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">play_one_round</span><span class="params">(<span class="type">int</span> pid, <span class="type">int</span> type)</span> &#123;</span><br><span class="line">  assert(type == ROCK || type == SCISSORS || type == PAPER);</span><br><span class="line">  <span class="type">int</span> result = play(pid, type);</span><br><span class="line">  <span class="keyword">switch</span> (result) &#123;</span><br><span class="line">    <span class="keyword">case</span> WIN: <span class="built_in">printf</span>(<span class="string">&quot;I (%d) win!\n&quot;</span>, pid); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LOSE: <span class="built_in">printf</span>(<span class="string">&quot;I (%d) win!\n&quot;</span>, pid); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为可以使用的线程库函数。假设互斥锁初始状态为解锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mutex_lock</span><span class="params">(<span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mutex_unlock</span><span class="params">(<span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">sem_t</span> semaphore = SEM_INIT(<span class="type">int</span> value); <span class="comment">// initialize semaphore</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> sem, <span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> sem, <span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cond_wait</span><span class="params">(<span class="type">cond_t</span> *cond, <span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cond_signal</span><span class="params">(<span class="type">cond_t</span> *cond, <span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cond_broadcast</span><span class="params">(<span class="type">cond_t</span> *cond, <span class="type">mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure><h2 id="五-文件系统"><a href="#五-文件系统" class="headerlink" title="五 文件系统"></a>五 文件系统</h2><ol><li>Everything is a file. 目录是文件吗？</li><li>什么是文件描述符？写出3个返回文件描述符的系统调用名称。</li><li>解释操作系统如何区分一个文件是普通文件、流还是设备。</li><li>RAID相比使用单个或多个可靠磁盘有何优点？</li><li>假如有一款内存得到普及，其容量和性能与DRAM相当，断电后数据不消失（但正在写入的内容可能会消失），这会对文件系统有何影响？可以适当展开分析。</li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;By &lt;a href=&quot;https://space.bilibili.com/8002700&quot;&gt;Fradow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-基本概念&quot;&gt;&lt;a href=&quot;#一-基本概念&quot;</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>镜头光晕 分析</title>
    <link href="https://s.tilnel.com/20240627-lensflare/"/>
    <id>https://s.tilnel.com/20240627-lensflare/</id>
    <published>2024-06-27T11:17:15.000Z</published>
    <updated>2024-06-29T19:55:06.442Z</updated>
    
    <content type="html"><![CDATA[<p>直观上来看：</p><ol><li>图片上的圆形和光斑是由于光线在镜头和光圈之间“来回反射”（反射）造成的。 </li><li>特定方向上的光线尖峰很可能是由于光线在相机传感器（数字相机上是网格状的）和&#x2F;或光圈光阑上的衍射造成的。 </li><li>光源周围的光晕（我这里不是说任何大气效应）是由于强光在镜头的玻璃材料中的散射造成的。</li></ol><p>为了实现1和3，需要扩展现实相机模型。我们必须考虑一些在镜头上反射的光线，除了那些仅通过它们折射的光线。</p><p>控制两种不同材料之间界面处光重新分配的物理方程是菲涅耳方程。它们可以从麦克斯韦方程中推导出来，麦克斯韦方程更普遍地控制电磁波在材料中的传播。</p><p>菲涅耳方程给出了在界面处反射的光的百分比 R，具体取决于斯涅尔角 θi 和 θt 以及两种材料的折射率 n1 和 n2。有两个方程，取决于入射光是否在垂直于该平面的入射平面上偏振。对于非偏振光 - 我们假设摄影师在这里没有使用任何偏振滤光片 - R 只是两个项 Rs 和 Rp 的平均值。</p><p>让我们看一下 R 的值取决于参数。正如我们所看到的，反射系数 R 增加得更快——当光从折射率较大的材料变为折射率较小的材料时，对于长角度（全内反射）等于 1。</p><p>在我们的例子中，这意味着镜头外部的反射比镜头内部的反射更频繁——这有点违反直觉。</p><p>下面可以看到光线在通过相机时被反射 4 次的示例：</p><p>我实现这一点的方式是概率的：在每个接口上，我计算反射系数 R。然后，我根据这个值随机决定光线是反射还是折射。这相当于实际拆分每个界面处的每条射线，并用 R 或 （1-R） 对它们进行加权，但以这种方式更容易实现。</p><p>下面是在随机选择的界面上分割的射线示例。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;直观上来看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图片上的圆形和光斑是由于光线在镜头和光圈之间“来回反射”（反射）造成的。 &lt;/li&gt;
&lt;li&gt;特定方向上的光线尖峰很可能是由于光线在相机传感器（数字相机上是网格状的）和&amp;#x2F;或光圈光阑上的衍射造成的。</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>AML复习</title>
    <link href="https://s.tilnel.com/20240618-aml/"/>
    <id>https://s.tilnel.com/20240618-aml/</id>
    <published>2024-06-17T16:58:05.000Z</published>
    <updated>2024-06-18T05:25:06.178Z</updated>
    
    <content type="html"><![CDATA[<p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkU5ZXBZQjN5YlYzY1hNeXNhaXRMVHliSlZqaEdJQ1BDU0QtQ2lpSmlNeVJtdUtHQTFDQXV5OA" alt="img"></p><p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkpYVGNGWm1nTzludDg5ejJaQUgzSUpRdXVGY0dJZVBDaUQtQ2lqdGxNeVJtdUtHQTFDQXV5OA" alt="img"></p><p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkNiUFlnU09oVUlGdExDY1YzQzAwUFNFbFZwUEdNcnNDaUQtQ2lqQjU5S1JtdUtHQTFDQXV5OA" alt="img"></p><p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRlBscGxpMVdVWnJqYzJ3UThMakdURkNQcWtCVkdJWENDQ0QtQ2lqVm50cVJtdUtHQTFDQXV5OA" alt="img"></p><p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkFLYzV5SktBV2lSV0hrb05pNV9QcEppYTM2NEdPdVJEU0QtQ2lqUHBOT1JtdUtHQTFDQXV5OA" alt=" "></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkU5ZXBZQjN5YlYzY1hNeXNhaXRMVHliSlZqaEdJQ1BDU0QtQ2lpSmlNeVJtdUtHQTFDQXV5OA&quot;</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>计算模型导引复习</title>
    <link href="https://s.tilnel.com/20240616-computTH/"/>
    <id>https://s.tilnel.com/20240616-computTH/</id>
    <published>2024-06-16T07:02:14.000Z</published>
    <updated>2024-06-16T13:19:21.751Z</updated>
    
    <content type="html"><![CDATA[<p>题型分析</p><p>基础概念 1，2-图灵机（16，17）3-一般、原始、部分递归函数，Lambda演算的CR性质（18）4-配对函数组，停机问题（19）5-（20） Lambda不动点算子（21）6-（22） 7-通用图灵机（22） 8-（23）9-Turing。。。算法可以达到的绝对极限（23）</p><p>函数 1，3，5，7，9，11，13-判定数论函数类（16，17，18，19，20，21，22）2-构造函数（16）4-构造函数（17）6，12-一元递归函数性质证明（18，21） 8-证明初等函数（19） 10-构造什么什么定义数论全函数 14，16-函数和Godel编码（22，23）15-一元递归函数性质，函数周期性等（23）</p><p>Lambda演算 1，2，3，4，5，6，7，8-添加公理的证明（16，17，18，19，20，21，22，23）</p><p>图灵机 1-求输出（16） 2，7，8，9，10，11-构造图灵机计算函数（16，19，20，21，22，23）3，5-从输入输出构造函数（17，18）4，6-停机问题证明（17，18） </p><p>其他：1，3，4，8，9-证明sinh&#x2F;其他函数的第n位 f(n) 为Turing可计算（23），进而证明是初等函数。（18，19，20，22）  2-可判定的证明（19） 5-证明Turing可计算函数为一般递归函数（20）  6-看不懂（21.6） 7-证明不动点结合子（21.7） 8-算中国剩余定理（23）</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;题型分析&lt;/p&gt;
&lt;p&gt;基础概念 1，2-图灵机（16，17）3-一般、原始、部分递归函数，Lambda演算的CR性质（18）4-配对函数组，停机问题（19）5-（20） Lambda不动点算子（21）6-（22） 7-通用图灵机（22）</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>为赋新词</title>
    <link href="https://s.tilnel.com/20240611-shortcircuit/"/>
    <id>https://s.tilnel.com/20240611-shortcircuit/</id>
    <published>2024-06-11T08:00:00.000Z</published>
    <updated>2024-10-09T05:36:15.435Z</updated>
    
    <content type="html"><![CDATA[<p>如今看年轻人为赋新词而说的愁，不免感到有点可笑。我倒不是在说他们的困境并非真实的，而是这种姿态显得不够强大。最近在很多场合，我都下了这样的定论：如果你觉得的内心足够强大，你尽可以随心意去做事；但如果一个人的内心容易受到伤害而不能很快地恢复，那对他来说采取保守的防备姿态也是一件相当正常的事情。</p><p>如何让自己相信自己的内心是强大的，我想这只能借助于一种自负，即那种在任何情况下否认自己受到了伤害，自己坚信不疑。（录者语：我现在改变看法了）这可能有很大一部分是天生的，有一小部分是长久以来的习惯。这样的习惯是很难刹得住车的。让人从一种信念而转向另一种看起来简直是蛮不讲理的信念。</p><p>这种蛮不讲理，仅仅是因为其不符合社会从一开始就赋予所有人的一种“短路”。可以想到只要解开这一短路。但这需要一个人在其经历中的反复思考，以及一种作“哥白尼式的革命”的勇气。</p><p>经验上看来，对于短路的路径作一系列追问将使人沉默。此时不应给予任何答案，不引入新的短路，而叫人获得一个自己选择的机会，深刻地在考虑自身的欲望之后进行选择。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;如今看年轻人为赋新词而说的愁，不免感到有点可笑。我倒不是在说他们的困境并非真实的，而是这种姿态显得不够强大。最近在很多场合，我都下了这样的定论：如果你觉得的内心足够强大，你尽可以随心意去做事；但如果一个人的内心容易受到伤害而不能很快地恢复，那对他来说采取保守的防备姿态也是一</summary>
        
      
    
    
    
    <category term="情感" scheme="https://s.tilnel.com/categories/%E6%83%85%E6%84%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Isolated</title>
    <link href="https://s.tilnel.com/20240611-lone/"/>
    <id>https://s.tilnel.com/20240611-lone/</id>
    <published>2024-06-11T07:00:00.000Z</published>
    <updated>2024-10-09T05:35:05.282Z</updated>
    
    <content type="html"><![CDATA[<p>越是到夏天这时候，在床上就越是难以入眠，特别是有一个喜欢关了空调睡觉的舍友。好在这光景也就只是持续一周。躺在床上翻来覆去，其实并没有什么可思考的。只是在那里把遗书的事情在脑子里安排了一遍。醒来之后倒也没觉得这种想法很可笑，只是觉得可以按住暂时不去实行，毕竟没到非死不可的境地。</p><p>去412坐了一晚，那是一个相当亲切又热情的地方，就像加州旅馆一样。之后一冲动就想着入社了。那里确实有很多朋友，就算我并不是社员，偶尔去玩一趟也不是什么不可以的事情，但毕竟还是希望名正言顺，希望没人会有意见。仿佛经过这一年的事情之后，我变得有点畏首畏尾的，昨晚还想着是不是应该行善积德，重新建立一下自我。这段时间我应该多一个人待着。特别忙碌的时候，人的进步就停止了。需要一段完整的时间对自己施加肉眼可见的改变。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;越是到夏天这时候，在床上就越是难以入眠，特别是有一个喜欢关了空调睡觉的舍友。好在这光景也就只是持续一周。躺在床上翻来覆去，其实并没有什么可思考的。只是在那里把遗书的事情在脑子里安排了一遍。醒来之后倒也没觉得这种想法很可笑，只是觉得可以按住暂时不去实行，毕竟没到非死不可的境地</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://s.tilnel.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
</feed>
