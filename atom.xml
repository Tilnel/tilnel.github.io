<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tilnel&#39;s Blog</title>
  <icon>https://s.tilnel.com/icon.png</icon>
  <subtitle>我需要先行到光年以外，为列星指明公转的轨道，否则你便看不到下一夜的闪烁与纷纭。</subtitle>
  <link href="https://s.tilnel.com/atom.xml" rel="self"/>
  
  <link href="https://s.tilnel.com/"/>
  <updated>2023-10-31T07:55:19.549Z</updated>
  <id>https://s.tilnel.com/</id>
  
  <author>
    <name>Tilnel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>置顶必读</title>
    <link href="https://s.tilnel.com/20231017-top/"/>
    <id>https://s.tilnel.com/20231017-top/</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2023-10-31T07:55:19.549Z</updated>
    
    <content type="html"><![CDATA[<p>这个小站只有在校园网里才能看见。</p><p>只要是我在电脑里写下的文字，除了少量牵扯到对其他人的看法的，几乎都会在这里出现。</p><p>我是一个看起来很正常的不正常的人。经常喝酒，轻度抽烟。喜欢花但是不太懂，养一些容易养活的盆栽，不过不想花太多精力。</p><p>正在努力学习调酒；并且努力取得练习调酒的经济条件。毕竟一瓶一两百的酒要比两块多的可乐要难获取得多。以低价格经营着一家宿舍内的酒吧；当然也可以做外送。</p><p>我用右耳的人体的穿刺警示着来往的人；尽管所有人都觉得我的性格没什么问题——甚至可以说性格极好。但经过23年的人生短跑，我知道自己可以对朋友很好，但完全没有耐心去搞这个年代里时兴的那种亲密关系。</p><p>我否认所有对爱情的普遍的模式化的定义：“爱谁就该怎么做”；我否认爱情中可以存在两个人：爱情顶多是两个人各自的爱情，其指向也不是别的，而正是与对方的身形刚好错位的幻影；我否认爱情是“崇高”、“神圣”的：不要拘泥于外界的灌输影响下你对爱情的各种幻想，爱情顶多是“独特”的。</p><p>我会认真思考每一个社会契约中的隐含条款，并在不逃避责任的情况下享受权利；或是通过<strong>拒绝行使权利与拒不承担责任</strong>来表达我对该条款的抗议。所以请不要通过<strong>附加隐含条款的“好意”</strong>将压力给到我头上。</p><p>有任何要求，任何疑惑，任何不满：</p><h1 id="讲。"><a href="#讲。" class="headerlink" title="讲。"></a>讲。</h1><p>我从来都不生气。请不要再当谜语人了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这个小站只有在校园网里才能看见。&lt;/p&gt;
&lt;p&gt;只要是我在电脑里写下的文字，除了少量牵扯到对其他人的看法的，几乎都会在这里出现。&lt;/p&gt;
&lt;p&gt;我是一个看起来很正常的不正常的人。经常喝酒，轻度抽烟。喜欢花但是不太懂，养一些容易养活的盆栽，不过不想花太多精力。&lt;/p&gt;
&lt;p&gt;</summary>
        
      
    
    
    
    <category term="日常" scheme="https://s.tilnel.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://s.tilnel.com/Untitled/"/>
    <id>https://s.tilnel.com/Untitled/</id>
    <published>2024-07-20T09:59:19.303Z</published>
    <updated>2024-07-20T09:59:19.303Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>从源码更新 sshd</title>
    <link href="https://s.tilnel.com/20240718-sshd/"/>
    <id>https://s.tilnel.com/20240718-sshd/</id>
    <published>2024-07-18T13:47:44.000Z</published>
    <updated>2024-07-18T13:55:30.963Z</updated>
    
    <content type="html"><![CDATA[<p> 之前爆出 Linux 上的 sshd 可能有一个 race condition 导致的 RCE。建议更新到 openssh 9.8。于是火速 clone 源码之后直接 make install 了。</p><p>但是今天在断电之后想扫一下办公室网络发现主机，觉得更新的人应该不多，随手就</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sV ip/24 -p 22</span><br></pre></td></tr></table></figure><p>期待出一个 openssh 9.8，结果出来了一个别人的主机，自己的是没有。当然后来验证了其实是我的机器没有开，但我到了座位上之后，也是闲的蛋疼想看看 nmap 一下自己的设备到底能出些什么玩意。结果大为震撼，<code>openssh-9.6p1</code> 。。。</p><p>到底是谁发明的 <code>ssh -V</code> 验证版本更新成功法？这里面有另外？个变量：</p><ul><li>openssh 的安装目录</li><li>systemd 的配置</li><li>ssh 的编译参数</li></ul><p>openssh 现在居然默认安装在 <code>/usr/local</code>。。。但是 systemd 当然只认 <code>/usr/</code>。</p><p>ssh 编译时如果不指定和当前版本一致的 config 目录，就。。不知道会是哪里。最后会导致 fingerprint changed &amp; man in the middle attack。</p><p><img src="image-20240718215331548.png" alt="image-20240718215331548"></p><blockquote><p>配置文件目录变了之后，就不会用原来的 pubkey 作为 fingerprint 了</p></blockquote><p>所以我们根据 <a href="https://www.linuxfromscratch.org/blfs/view/systemd/postlfs/openssh.html">OpenSSH-9.8p1 (linuxfromscratch.org)</a> 的指导，重新编译了 openssh，并且小改 Makefile 进行了安装。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr                            \</span><br><span class="line">            --sysconfdir=/etc/ssh                    \</span><br><span class="line">            --with-privsep-path=/var/lib/sshd        \</span><br><span class="line">            --with-default-path=/usr/bin             \</span><br><span class="line">            --with-superuser-path=/usr/sbin:/usr/bin \</span><br><span class="line">            --with-pid-dir=/run                      &amp;&amp;</span><br><span class="line">make</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt; 之前爆出 Linux 上的 sshd 可能有一个 race condition 导致的 RCE。建议更新到 openssh 9.8。于是火速 clone 源码之后直接 make install</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://s.tilnel.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux wakeonlan 无法正常开启</title>
    <link href="https://s.tilnel.com/20240718-linuxwol/"/>
    <id>https://s.tilnel.com/20240718-linuxwol/</id>
    <published>2024-07-18T12:52:47.000Z</published>
    <updated>2024-07-18T12:56:15.528Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nettool -s enp34s0 wol g</span><br></pre></td></tr></table></figure><p>g 就是 granted，d 就是 denied</p><p>这样设置网卡允许wol是一次性的。重启之后，又自动变成禁止。尝试用 update-rc.d 开机自动执行脚本，不知道为什么不行。</p><p>所以按照 ArchWiki 的方式，设置成 systemd 管理的</p><p><a href="https://wiki.archlinux.org/title/Wake-on-LAN">Wake-on-LAN - ArchWiki (archlinux.org)</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/etc/systemd/network/50-wired.link</span><br><span class="line">---</span><br><span class="line">[Match]</span><br><span class="line">MACAddress=aa:bb:cc:dd:ee:ff</span><br><span class="line"></span><br><span class="line">[Link]</span><br><span class="line">NamePolicy=kernel database onboard slot path</span><br><span class="line">MACAddressPolicy=persistent</span><br><span class="line">WakeOnLan=magic</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://s.tilnel.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows 快速启动无法被 wol 唤醒</title>
    <link href="https://s.tilnel.com/20240718-wol/"/>
    <id>https://s.tilnel.com/20240718-wol/</id>
    <published>2024-07-18T12:09:36.000Z</published>
    <updated>2024-07-18T12:11:28.246Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 官方文档《 <a href="https://go.smzdm.com/3ecd4f1e758f18ee/ca_aa_yc_163_amx025p4_16293_2621_1641_0">System Power States</a> 》中讲述到，<strong>Windows 系统自身（抛开 BIOS 不谈）是不支持“快速启动”和“关机”状态下的网络唤醒，只支持“睡眠”、“休眠”状态下的网络唤醒</strong>：</p><ul><li><p>睡眠（Sleep），属于 S3 电源状态；</p></li><li><p>快速启动（Fast Startup），属于 S4 电源状态；</p></li><li><p>休眠（Hibernate），属于 S4 电源状态；</p></li><li><p>关机（Soft off），属于 S5 电源状态</p></li><li><p>对于<strong>“快速启动（fast startup, S4）”：</strong>从 Windows 8.1 开始到 Windows 11，“快速启动”作为系统默认的“<strong>关机”方式</strong>，是不支持网络唤醒的，<strong>这也是为什么在 WOL 的教程中会让你关闭“快速启动”</strong>：</p></li></ul><blockquote><p>“快速启动”：快速启动是一种关机类型，它使用休眠文件来加快后续的启动速度，在这种关机状态下，Windows 系统不支持网络唤醒。“快速启动”与“休眠”同属于  S4 电源状态。</p></blockquote><p><img src="619f939c2356a9109.png_e1080.jpg" alt="WOL 网络唤醒避坑指南：常见问题的分析与内容补充"></p><p>“快速启动”属于“<strong>hybrid shutdown（混合关机）</strong>”，是关机的一种类型：</p><p><img src="619fb314b625f7326.png_e1080.jpg" alt="《System Power States》"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Windows 官方文档《 &lt;a href=&quot;https://go.smzdm.com/3ecd4f1e758f18ee/ca_aa_yc_163_amx025p4_16293_2621_1641_0&quot;&gt;System Power States&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="Windows" scheme="https://s.tilnel.com/categories/Windows/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux 系统无法正常 suspend （睡眠）</title>
    <link href="https://s.tilnel.com/20240718-suspend/"/>
    <id>https://s.tilnel.com/20240718-suspend/</id>
    <published>2024-07-18T10:50:57.000Z</published>
    <updated>2024-07-18T12:09:04.860Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">suspend</span></span><br></pre></td></tr></table></figure><p>仔细翻看 journal：</p><p><img src="image-20240718185134192.png" alt="image-20240718185134192"></p><p> 但其实我们并没有 nvidia 驱动，甚至是 headless 的。查看 service 的依赖</p><p><img src="image-20240718185214952.png" alt="image-20240718185214952"></p><p>全删掉，然后 <code>daemon-reload</code> 就好了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://s.tilnel.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>看看Redis 2.8源码</title>
    <link href="https://s.tilnel.com/20240715-redis/"/>
    <id>https://s.tilnel.com/20240715-redis/</id>
    <published>2024-07-15T06:08:12.000Z</published>
    <updated>2024-07-15T06:09:10.180Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image-20240715140825253.png" alt="image-20240715140825253"></p><p>唯一用到多线程的地方是一个看起来很 tricky 的优化，震撼我妈</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;image-20240715140825253.png&quot; alt=&quot;image-20240715140825253&quot;&gt;&lt;/p&gt;
&lt;p&gt;唯一用到多线程的地方是一个看起来很 tricky</summary>
        
      
    
    
    
    <category term="Distributed Systems" scheme="https://s.tilnel.com/categories/Distributed-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>图形绘制技术-光学相机</title>
    <link href="https://s.tilnel.com/20240708-optical/"/>
    <id>https://s.tilnel.com/20240708-optical/</id>
    <published>2024-07-08T06:44:38.000Z</published>
    <updated>2024-07-10T07:55:54.840Z</updated>
    
    <content type="html"><![CDATA[<p><img src="image-20240708144504816.png" alt="image-20240708144504816"></p><p>参考文献：现代光学镜头设计方法与实例</p><p><img src="image-20240710155552561.png" alt="image-20240710155552561"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;image-20240708144504816.png&quot; alt=&quot;image-20240708144504816&quot;&gt;&lt;/p&gt;
&lt;p&gt;参考文献：现代光学镜头设计方法与实例&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>DMCK 设计</title>
    <link href="https://s.tilnel.com/20240701-dmck/"/>
    <id>https://s.tilnel.com/20240701-dmck/</id>
    <published>2024-06-30T23:54:13.000Z</published>
    <updated>2024-07-02T13:44:21.048Z</updated>
    
    <content type="html"><![CDATA[<p>我也不知道怎么回事，在后台有一个随机读写lock的程序忘了kill的情况下，测试程序一直能打出长度一样、顺序一样、甚至内容也一样的log，企图骗我这就是执行路径。CS套路深，我要回农村</p><p>假设我获得了系统调用的顺序和所有系统调用之后的进程状态。</p><p><img src="image-20240702214113221.png" alt="image-20240702214113221"></p><p>显然是B。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssite_t</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">void</span> buf[.count], <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure><p>注意 buf 是 <code>const</code> 意思是写之前和写之后是同一个状态。但是 $\mathbb{A}$ 状态下，write 的参数未必准备好了。只有到系统调用的前一刻，其所有的参数才被准备好。想要从 $\mathbb{B} $ 之前获取参数并不是什么问题，关键在于「向前多少」</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我也不知道怎么回事，在后台有一个随机读写lock的程序忘了kill的情况下，测试程序一直能打出长度一样、顺序一样、甚至内容也一样的log，企图骗我这就是执行路径。CS套路深，我要回农村&lt;/p&gt;
&lt;p&gt;假设我获得了系统调用的顺序和所有系统调用之后的进程状态。&lt;/p&gt;
&lt;p&gt;&lt;</summary>
        
      
    
    
    
    <category term="DisSys" scheme="https://s.tilnel.com/categories/DisSys/"/>
    
    
  </entry>
  
  <entry>
    <title>内心快板一则</title>
    <link href="https://s.tilnel.com/20240630-allegro/"/>
    <id>https://s.tilnel.com/20240630-allegro/</id>
    <published>2024-06-29T20:41:34.000Z</published>
    <updated>2024-06-29T21:40:16.070Z</updated>
    
    <content type="html"><![CDATA[<p>客人：这差使您办好了，不负众望。</p><p>先生：鬼知道我吃了多少苦头。</p><p>客人：这些磨难让您更加成熟老练，以后世上的人听到您的姓名，无人不知无人不晓这一位铁骨头的硬汉子。</p><p>先生：我本不想收受它的这些好处。这难事落到谁的头上，本来就是一笔糊涂账！有人可以得过且过，有人就要苦尽甘来， 甚至于这甘也并不来。</p><p>人本没有必要平衡心态，无非是对比多了自觉“失衡”。但我只劝想要“平衡”的，那高高在上的为什么用不着自己平衡，反而让落在下面的自己去找？</p><p>子女较多的家里，经常有被要求懂事的那几个，和被溺爱的那几个。那要懂事的，往往受到的恩惠是较少的。因为是”懂事的”，所以他们并不能为少受恩惠而大呼小叫。于是发展出的那种苦闷是二阶性的： 其怀疑的是【必须自己想出将这一切合理化的说辞说服自身】这件事。</p><p>简单来说，这个气我受了，但是要我跟谁也不能说，打碎了牙往肚子里咽，哪有这么霸道的。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;客人：这差使您办好了，不负众望。&lt;/p&gt;
&lt;p&gt;先生：鬼知道我吃了多少苦头。&lt;/p&gt;
&lt;p&gt;客人：这些磨难让您更加成熟老练，以后世上的人听到您的姓名，无人不知无人不晓这一位铁骨头的硬汉子。&lt;/p&gt;
&lt;p&gt;先生：我本不想收受它的这些好处。这难事落到谁的头上，本来就是一笔糊涂账</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://s.tilnel.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>2024春季 蒋炎岩《操作系统》期末回忆</title>
    <link href="https://s.tilnel.com/20240630-OS/"/>
    <id>https://s.tilnel.com/20240630-OS/</id>
    <published>2024-06-29T19:55:33.000Z</published>
    <updated>2024-06-29T19:59:06.954Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>By <a href="https://space.bilibili.com/8002700">Fradow</a></p></blockquote><h2 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一 基本概念"></a>一 基本概念</h2><p>均用10-20字描述即可。</p><ol><li>什么是内核（kernel），什么是外壳（shell）？</li><li>写出系统调用（<code>syscall</code>、<code>ecall</code> 等）的功能。</li><li>什么是数据竞争？为什么C代码中要避免数据竞争？</li><li>很多操作系统都没有关机指令，那么它是如何实现关闭计算机的？</li><li>为什么磁盘等存储设备要设计成按块读取？</li></ol><h2 id="二-进程、线程与地址空间"><a href="#二-进程、线程与地址空间" class="headerlink" title="二 进程、线程与地址空间"></a>二 进程、线程与地址空间</h2><p>现在你想在Linux上实现 <code>pidof</code> 指令，可通过命令行参数传入进程名，打印拥有该进程名的所有进程号。</p><ol><li><code>pidof</code> 的 <code>main</code> 函数有 <code>argc</code>、<code>argv</code> 两个参数，写出其函数原型，解释它们都代表什么含义。</li><li>命令行参数传给进程后存放在什么位置？</li><li>10-20字描述如何实现 <code>pidof</code>。</li><li>操作系统中的进程可以随时开始、中止。这对的实现有何影响？如果想让 <code>pidof</code> 显示（近期）历史上某个瞬间的进程列表，需要如何实现？</li></ol><h2 id="三-编译、链接和加载"><a href="#三-编译、链接和加载" class="headerlink" title="三 编译、链接和加载"></a>三 编译、链接和加载</h2><p>以下是执行 <code>./a.out</code> 后其进程对应的一段 <code>pmap</code> 输出。<em>（回忆时编的，重点是最后一列）</em></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">0000000000400000</span>    <span class="number">132</span>K r-x-- a.out</span><br><span class="line"><span class="attribute">0000000000602000</span>      <span class="number">4</span>K r---- a.out</span><br><span class="line"><span class="attribute">0000000000603000</span>      <span class="number">4</span>K r---- a.out</span><br><span class="line"><span class="attribute">0000000000604000</span>      <span class="number">4</span>K rw--- a.out</span><br><span class="line"><span class="attribute">00007f8b1c000000</span>    <span class="number">128</span>K rw---<span class="meta"> [anon]</span></span><br><span class="line"><span class="attribute">00007f8b1c020000</span>    <span class="number">256</span>K rw---<span class="meta"> [anon]</span></span><br><span class="line"><span class="attribute">00007f8b1c040000</span>    <span class="number">132</span>K rw---<span class="meta"> [stack]</span></span><br><span class="line"><span class="attribute">00007fffedcfed00</span>      <span class="number">4</span>K r-x--<span class="meta"> [vvar]</span></span><br><span class="line"><span class="attribute">00007fffedcff000</span>      <span class="number">4</span>K r----<span class="meta"> [vdso]</span></span><br></pre></td></tr></table></figure><ol><li>解释静态链接和动态链接的区别。</li><li>在输出中的每一行地址空间后写出其表示的含义。<code>./a.out</code> 是通过静态链接还是动态链接得到的？</li><li>若实现一个调试器，支持用一个进程调试另一个进程，需要在操作系统上做什么设计（在系统对象和系统调用上）？</li></ol><h2 id="四-并发编程"><a href="#四-并发编程" class="headerlink" title="四 并发编程"></a>四 并发编程</h2><p>现有n个线程（线程号为1, 2, 3, …, n）玩石头剪刀布，每个线程创建后均执行一次 <code>play_one_round</code>。其中调用 <code>play</code> 得到每个线程的胜负结果，若平局则结果均为 <code>TIE</code>。请写出完整的 <code>play</code> 函数实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">play_one_round</span><span class="params">(<span class="type">int</span> pid, <span class="type">int</span> type)</span> &#123;</span><br><span class="line">  assert(type == ROCK || type == SCISSORS || type == PAPER);</span><br><span class="line">  <span class="type">int</span> result = play(pid, type);</span><br><span class="line">  <span class="keyword">switch</span> (result) &#123;</span><br><span class="line">    <span class="keyword">case</span> WIN: <span class="built_in">printf</span>(<span class="string">&quot;I (%d) win!\n&quot;</span>, pid); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> LOSE: <span class="built_in">printf</span>(<span class="string">&quot;I (%d) win!\n&quot;</span>, pid); <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下为可以使用的线程库函数。假设互斥锁初始状态为解锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mutex_lock</span><span class="params">(<span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">mutex_unlock</span><span class="params">(<span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">sem_t</span> semaphore = SEM_INIT(<span class="type">int</span> value); <span class="comment">// initialize semaphore</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_wait</span><span class="params">(<span class="type">sem_t</span> sem, <span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_post</span><span class="params">(<span class="type">sem_t</span> sem, <span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cond_wait</span><span class="params">(<span class="type">cond_t</span> *cond, <span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cond_signal</span><span class="params">(<span class="type">cond_t</span> *cond, <span class="type">mutex_t</span> *mutex)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cond_broadcast</span><span class="params">(<span class="type">cond_t</span> *cond, <span class="type">mutex_t</span> *mutex)</span>;</span><br></pre></td></tr></table></figure><h2 id="五-文件系统"><a href="#五-文件系统" class="headerlink" title="五 文件系统"></a>五 文件系统</h2><ol><li>Everything is a file. 目录是文件吗？</li><li>什么是文件描述符？写出3个返回文件描述符的系统调用名称。</li><li>解释操作系统如何区分一个文件是普通文件、流还是设备。</li><li>RAID相比使用单个或多个可靠磁盘有何优点？</li><li>假如有一款内存得到普及，其容量和性能与DRAM相当，断电后数据不消失（但正在写入的内容可能会消失），这会对文件系统有何影响？可以适当展开分析。</li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;By &lt;a href=&quot;https://space.bilibili.com/8002700&quot;&gt;Fradow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一-基本概念&quot;&gt;&lt;a href=&quot;#一-基本概念&quot;</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>镜头光晕 分析</title>
    <link href="https://s.tilnel.com/20240627-lensflare/"/>
    <id>https://s.tilnel.com/20240627-lensflare/</id>
    <published>2024-06-27T11:17:15.000Z</published>
    <updated>2024-06-29T19:55:06.442Z</updated>
    
    <content type="html"><![CDATA[<p>直观上来看：</p><ol><li>图片上的圆形和光斑是由于光线在镜头和光圈之间“来回反射”（反射）造成的。 </li><li>特定方向上的光线尖峰很可能是由于光线在相机传感器（数字相机上是网格状的）和&#x2F;或光圈光阑上的衍射造成的。 </li><li>光源周围的光晕（我这里不是说任何大气效应）是由于强光在镜头的玻璃材料中的散射造成的。</li></ol><p>为了实现1和3，需要扩展现实相机模型。我们必须考虑一些在镜头上反射的光线，除了那些仅通过它们折射的光线。</p><p>控制两种不同材料之间界面处光重新分配的物理方程是菲涅耳方程。它们可以从麦克斯韦方程中推导出来，麦克斯韦方程更普遍地控制电磁波在材料中的传播。</p><p>菲涅耳方程给出了在界面处反射的光的百分比 R，具体取决于斯涅尔角 θi 和 θt 以及两种材料的折射率 n1 和 n2。有两个方程，取决于入射光是否在垂直于该平面的入射平面上偏振。对于非偏振光 - 我们假设摄影师在这里没有使用任何偏振滤光片 - R 只是两个项 Rs 和 Rp 的平均值。</p><p>让我们看一下 R 的值取决于参数。正如我们所看到的，反射系数 R 增加得更快——当光从折射率较大的材料变为折射率较小的材料时，对于长角度（全内反射）等于 1。</p><p>在我们的例子中，这意味着镜头外部的反射比镜头内部的反射更频繁——这有点违反直觉。</p><p>下面可以看到光线在通过相机时被反射 4 次的示例：</p><p>我实现这一点的方式是概率的：在每个接口上，我计算反射系数 R。然后，我根据这个值随机决定光线是反射还是折射。这相当于实际拆分每个界面处的每条射线，并用 R 或 （1-R） 对它们进行加权，但以这种方式更容易实现。</p><p>下面是在随机选择的界面上分割的射线示例。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;直观上来看：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图片上的圆形和光斑是由于光线在镜头和光圈之间“来回反射”（反射）造成的。 &lt;/li&gt;
&lt;li&gt;特定方向上的光线尖峰很可能是由于光线在相机传感器（数字相机上是网格状的）和&amp;#x2F;或光圈光阑上的衍射造成的。</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>AML复习</title>
    <link href="https://s.tilnel.com/20240618-aml/"/>
    <id>https://s.tilnel.com/20240618-aml/</id>
    <published>2024-06-17T16:58:05.000Z</published>
    <updated>2024-06-18T05:25:06.178Z</updated>
    
    <content type="html"><![CDATA[<p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkU5ZXBZQjN5YlYzY1hNeXNhaXRMVHliSlZqaEdJQ1BDU0QtQ2lpSmlNeVJtdUtHQTFDQXV5OA" alt="img"></p><p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkpYVGNGWm1nTzludDg5ejJaQUgzSUpRdXVGY0dJZVBDaUQtQ2lqdGxNeVJtdUtHQTFDQXV5OA" alt="img"></p><p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkNiUFlnU09oVUlGdExDY1YzQzAwUFNFbFZwUEdNcnNDaUQtQ2lqQjU5S1JtdUtHQTFDQXV5OA" alt="img"></p><p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRlBscGxpMVdVWnJqYzJ3UThMakdURkNQcWtCVkdJWENDQ0QtQ2lqVm50cVJtdUtHQTFDQXV5OA" alt="img"></p><p><img src="NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkFLYzV5SktBV2lSV0hrb05pNV9QcEppYTM2NEdPdVJEU0QtQ2lqUHBOT1JtdUtHQTFDQXV5OA" alt=" "></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;img src=&quot;NTV2COMPAT.Ck0IARAAGkdDZ2s1T1RNeU16STNPRElTRkU5ZXBZQjN5YlYzY1hNeXNhaXRMVHliSlZqaEdJQ1BDU0QtQ2lpSmlNeVJtdUtHQTFDQXV5OA&quot;</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>计算模型导引复习</title>
    <link href="https://s.tilnel.com/20240616-computTH/"/>
    <id>https://s.tilnel.com/20240616-computTH/</id>
    <published>2024-06-16T07:02:14.000Z</published>
    <updated>2024-06-16T13:19:21.751Z</updated>
    
    <content type="html"><![CDATA[<p>题型分析</p><p>基础概念 1，2-图灵机（16，17）3-一般、原始、部分递归函数，Lambda演算的CR性质（18）4-配对函数组，停机问题（19）5-（20） Lambda不动点算子（21）6-（22） 7-通用图灵机（22） 8-（23）9-Turing。。。算法可以达到的绝对极限（23）</p><p>函数 1，3，5，7，9，11，13-判定数论函数类（16，17，18，19，20，21，22）2-构造函数（16）4-构造函数（17）6，12-一元递归函数性质证明（18，21） 8-证明初等函数（19） 10-构造什么什么定义数论全函数 14，16-函数和Godel编码（22，23）15-一元递归函数性质，函数周期性等（23）</p><p>Lambda演算 1，2，3，4，5，6，7，8-添加公理的证明（16，17，18，19，20，21，22，23）</p><p>图灵机 1-求输出（16） 2，7，8，9，10，11-构造图灵机计算函数（16，19，20，21，22，23）3，5-从输入输出构造函数（17，18）4，6-停机问题证明（17，18） </p><p>其他：1，3，4，8，9-证明sinh&#x2F;其他函数的第n位 f(n) 为Turing可计算（23），进而证明是初等函数。（18，19，20，22）  2-可判定的证明（19） 5-证明Turing可计算函数为一般递归函数（20）  6-看不懂（21.6） 7-证明不动点结合子（21.7） 8-算中国剩余定理（23）</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;题型分析&lt;/p&gt;
&lt;p&gt;基础概念 1，2-图灵机（16，17）3-一般、原始、部分递归函数，Lambda演算的CR性质（18）4-配对函数组，停机问题（19）5-（20） Lambda不动点算子（21）6-（22） 7-通用图灵机（22）</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>夕拾 第三周</title>
    <link href="https://s.tilnel.com/20240609-week3/"/>
    <id>https://s.tilnel.com/20240609-week3/</id>
    <published>2024-06-09T15:33:35.000Z</published>
    <updated>2024-06-19T07:51:31.944Z</updated>
    
    <content type="html"><![CDATA[<p>上周除了电视剧以外基本没看什么。明天补一点吧。</p><p>我找到一本书。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Z:/ZijingBT/kindle电子书资源/kindle人的资源打包/自制21-40/ZZ21-22/数码摄影构图与用光.pdf</span><br></pre></td></tr></table></figure><p>本周来把它看掉。</p><p>看雍正王朝（已过半）</p><p>​</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;上周除了电视剧以外基本没看什么。明天补一点吧。&lt;/p&gt;
&lt;p&gt;我找到一本书。&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="夕拾" scheme="https://s.tilnel.com/categories/%E5%A4%95%E6%8B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>人民的名义</title>
    <link href="https://s.tilnel.com/20240603-intheNameofPeople/"/>
    <id>https://s.tilnel.com/20240603-intheNameofPeople/</id>
    <published>2024-06-03T10:26:53.000Z</published>
    <updated>2024-06-03T10:36:12.809Z</updated>
    
    <content type="html"><![CDATA[<p>这是一部很长的剧，有55集之多。最后是用两周时间去看完的。</p><p>里面值得学习的细节很多，需要解读的内容也很多。当然有很多人去做了“中译中”，而我在看的时候的确就思考不了那么多，语言的艺术这些东西都显得有点虚了。</p><p>我只提几点：</p><p>一是守住底线。做任何事都要把原则性放在第一位。</p><p>二是谨慎交友。不结交卑鄙小人，不得罪道不同不相为谋的人；保持真正的革命友谊，既是最务实的，也是最打动人心的。</p><p>三是学会以退为进。适当的时候放弃眼前的，看到下一步应该怎么做。</p><p>四是学习上不能放松。特别是用严谨的思维分析情势的能力要加强。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这是一部很长的剧，有55集之多。最后是用两周时间去看完的。&lt;/p&gt;
&lt;p&gt;里面值得学习的细节很多，需要解读的内容也很多。当然有很多人去做了“中译中”，而我在看的时候的确就思考不了那么多，语言的艺术这些东西都显得有点虚了。&lt;/p&gt;
&lt;p&gt;我只提几点：&lt;/p&gt;
&lt;p&gt;一是守住底</summary>
        
      
    
    
    
    <category term="电视剧" scheme="https://s.tilnel.com/categories/%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>夕拾 第二周</title>
    <link href="https://s.tilnel.com/20240603-week2/"/>
    <id>https://s.tilnel.com/20240603-week2/</id>
    <published>2024-06-03T08:30:27.000Z</published>
    <updated>2024-06-22T04:30:31.661Z</updated>
    
    <content type="html"><![CDATA[<p>上周剩下一个没看完的：</p><p><img src="image-20240527150622100.png"></p><p>当然是因为上周最后把所有的时间都用来刷完了人民的名义，读性心理学这些。本周还是可以照常安排。</p><p>剧：</p><p><img src="image-20240603174946953.png" alt="image-20240603174946953"></p><p>电影：</p><p><img src="image-20240603175029995.png" alt="image-20240603175029995"></p><p><img src="image-20240603175126800.png" alt="image-20240603175126800"></p><p>学习材料</p><p><img src="image-20240603180310929.png" alt="image-20240603180310929"></p><p>纪录片</p><p><img src="image-20240603180358644.png" alt="image-20240603180358644"></p><p>​</p><p>我突然觉得摄影还是要比较系统地学。多练眼睛和构图的巧思</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;上周剩下一个没看完的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;image-20240527150622100.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;当然是因为上周最后把所有的时间都用来刷完了人民的名义，读性心理学这些。本周还是可以照常安排。&lt;/p&gt;
&lt;p&gt;剧：&lt;/p&gt;
&lt;p&gt;&lt;img</summary>
        
      
    
    
    
    <category term="夕拾" scheme="https://s.tilnel.com/categories/%E5%A4%95%E6%8B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>The.Scent.of.Yvonne.1994</title>
    <link href="https://s.tilnel.com/20240601-yvonne/"/>
    <id>https://s.tilnel.com/20240601-yvonne/</id>
    <published>2024-06-01T15:06:27.000Z</published>
    <updated>2024-06-01T15:22:19.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>吐个槽，紫荆站上的老电影真的是不能随便点开，你根本不知道什么时候会突然露个点给你看。</p></blockquote><p>背景大概是1940年左右，在法国。一个有点普通的爱情故事。但是最后的发展很奇怪。当然，在讲述往事的时候，穿插了十几年以后两位男主的故事。</p><p>为什么男主提出去美国之后，女主就和本地乡绅好上了？</p><p>为什么男二被打成同性恋者？完全没有交代。</p><p>为什么男二最后倒车再冲下山崖在男主面前自杀了？</p><p>真是一部一言难尽的电影。</p><p>从豆瓣摘了一点。看来我还是不懂一点浪漫。</p><blockquote><p>假如你见到了一个能满足你各种幻想的女人，你会有另一个脑子去相信她又懒又放荡又薄情吗？电影的关键点，就是伊冯娜的叔叔跟维克多私下交谈的内容，在她叔叔嘴里，完全是真实的伊冯娜。男女都是视觉动物，以貌取人，爱上的，都是这个人带给你的一种感觉，而感觉里有一半都是脑补出来的幻想。人的外表，和内在不见得是一致的，它代表一部分内在，但也隐藏了一部分内在。漂亮女人，让人贪爱的同时，很难想到她漂亮的外表下，可能是另一颗并不美丽的心。甚至，即使你知道她并不美丽的另一面，你也依然不觉得不美，甚至你还会去理解她。</p><p>这就是美丽外表的力量！</p><p>就像是香水，掩盖住了不堪的体味儿，却让你久久不能遗忘。漂亮，是一种资本，它可以让人沉迷于对猎物获取的快感之中，又能享受从不同猎物身上获取的价值。因此，有的漂亮的动物，就像是鸟儿一样，不会总落在同一个枝头。这就是更了解伊冯娜的勒内说的，你不要让她离开你的视线，她只属于那一刻。</p><p>而维克多，并没有理解这一番话的意思。香水带给人的感觉是挥之不去的，久久停留在人的记忆中，即使是失去，即使是知道不堪，你也忘不掉它带给你的感觉。</p></blockquote><blockquote><p>勒孔特搞突然死亡，无非是要解释人物对无聊生活、机械人生的厌倦，企望用死来获得超脱，用死来挽留正在流逝的美好时光，“证明我活过，我爱你，我爱你们，爱的那么纯粹”。</p></blockquote><blockquote><p>她叔叔说，她是个麻烦，她只活在那一刻。他砸烂那个每小时敲12下报时的老钟，那一刻，他是希望她能停下在那一刻的。</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;吐个槽，紫荆站上的老电影真的是不能随便点开，你根本不知道什么时候会突然露个点给你看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;背景大概是1940年左右，在法国。一个有点普通的爱情故事。但是最后的发展很奇怪。当然，在讲述往事的时候，穿插了十几年以后</summary>
        
      
    
    
    
    <category term="观影" scheme="https://s.tilnel.com/categories/%E8%A7%82%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>高级机器学习：二分类</title>
    <link href="https://s.tilnel.com/20240530-aml/"/>
    <id>https://s.tilnel.com/20240530-aml/</id>
    <published>2024-05-30T06:06:36.000Z</published>
    <updated>2024-05-31T13:40:23.226Z</updated>
    
    <content type="html"><![CDATA[<p>任务：</p><ul><li>读描述，下载数据集</li></ul><p>数据集：客户id，名字，信用点，位置，性别，年龄，年限，存款，产品数量，有信用卡，活跃，月薪</p><p>预测：客户是不是跑路了</p><p>实现：任何算法，任何语言。</p><p><strong>网络设计</strong>：根据问题的具体需求设计神经网络的结构。对于简单的二分类问题，一个两到三个隐藏层的小型 MLP 通常就足够。</p><p><strong>激活函数</strong>：对于隐藏层可以使用 ReLU 激活函数，因为它有助于解决梯度消失问题，并且计算上比较高效。输出层因为是二分类问题，所以建议使用 sigmoid 激活函数。</p><p><strong>损失函数</strong>：使用交叉熵损失函数（binary cross-entropy），这是处理二分类问题的标准选择。</p><p><strong>优化器</strong>：可以使用 Adam 或 SGD（带动量），这些优化器能帮助快速收敛且通常表现良好。</p><p><strong>正则化</strong>：为了避免过拟合，可以在训练过程中加入 Dropout 层或使用 L2 权重正则化。</p><p>**可以作一些仔细的分析。</p><p>输出：$yourId.txt，1000 lines，没有文件头的结果。</p><ul><li>实现算法，输出预测</li><li>写报告</li></ul><p>1）你的理解和分析</p><p>2）算法的动机，介绍算法的背景</p><p>3）算法的技术细节，特别是要包括伪代码</p><p>4）描述或分析算法的表现</p><p>5）总结和（可选的）讨论</p><p>使用 LaTeX 模板撰写含有英文摘要的中文报告。命名为 report.pdf</p><ul><li>提交</li></ul><p>1）$yourId.txt</p><p>2）report.pdf</p><p>3）源代码</p><p>打包zip，命名为 $Id_v$version.zip。e.g. 1912xxx_v1.zip</p><p>使用南大表格提交</p><p>Baselines:</p><p>经典算法包括随机森林，逻辑回归，XGBoost GBST，SVM，MLP，GBDT 等等。可以参考这些算法的表现。</p><table><thead><tr><th>alg</th><th>f1</th></tr></thead><tbody><tr><td>RF</td><td>0.583</td></tr><tr><td>LR</td><td>0.487</td></tr><tr><td>SVM</td><td>0.568</td></tr><tr><td>MLP</td><td>0.586</td></tr><tr><td>GBDT</td><td>0.603</td></tr><tr><td>RFE (n&#x3D;9)</td><td>0.609</td></tr></tbody></table><p>算法选择</p><p>CatBoost 是一种流行的梯度提升决策树（Gradient Boosting Decision Tree, GBDT）算法，由 Yandex 开发。它是专门为处理分类特征而优化的机器学习算法，同时也适用于回归问题。CatBoost 有几个显著的优点：</p><ol><li><strong>对分类特征的原生支持</strong>：CatBoost 可以直接处理分类特征，无需进行预处理（如独热编码）。这简化了数据预处理步骤，并通常能提高模型的性能。</li><li><strong>避免过拟合</strong>：CatBoost 实现了几种机制来减少过拟合的风险，例如具有有序提升的默认树学习策略。这种技术在训练每棵树时使用不同的数据子集，从而提高了模型的泛化能力。</li></ol><table><thead><tr><th>性能</th><th>baseline</th><th>smoothing + binning</th><th></th></tr></thead><tbody><tr><td>f1</td><td>0.598446</td><td>0.630029</td><td></td></tr><tr><td>acc</td><td>0.827778</td><td>0.846667</td><td></td></tr><tr><td>recall</td><td>0.641667</td><td>0.652778</td><td></td></tr><tr><td>precision</td><td>0.560680</td><td>0.608808</td><td></td></tr><tr><td>auprc</td><td>0.691654</td><td>0.693995</td><td></td></tr><tr><td>auc</td><td>0.856181</td><td>0.862392</td><td></td></tr><tr><td>macro f1</td><td>0.744414</td><td>0.766660</td><td></td></tr></tbody></table><p>数据预处理</p><p>观察训练集上属性值的数量可知，Surname 是 High-catdinality categorial variables. 做 polynomial smoothing</p><p>提高泛化能力，对Balance和Salary 做等频分箱</p><p>调参</p><p>depth, score_function,list of cat features</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读描述，下载数据集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;数据集：客户id，名字，信用点，位置，性别，年龄，年限，存款，产品数量，有信用卡，活跃，月薪&lt;/p&gt;
&lt;p&gt;预测：客户是不是跑路了&lt;/p&gt;
&lt;p&gt;实现：任何算法，任何语言。&lt;/p&gt;
&lt;p&gt;&lt;s</summary>
        
      
    
    
    
    <category term="课程" scheme="https://s.tilnel.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>性心理学 - 读书</title>
    <link href="https://s.tilnel.com/20240529-sexpsychology/"/>
    <id>https://s.tilnel.com/20240529-sexpsychology/</id>
    <published>2024-05-29T12:20:04.000Z</published>
    <updated>2024-05-29T12:23:15.222Z</updated>
    
    <content type="html"><![CDATA[<p>作者：霭理士</p><p>快快地读，做纸质的笔记，然后在归纳的时候录入到这里。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;作者：霭理士&lt;/p&gt;
&lt;p&gt;快快地读，做纸质的笔记，然后在归纳的时候录入到这里。&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="心理学" scheme="https://s.tilnel.com/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
    
  </entry>
  
</feed>
