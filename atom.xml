<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tilnel&#39;s Blog</title>
  <icon>https://tilnel.github.io/icon.png</icon>
  <subtitle>我们坐在一起，一整晚，一动不动</subtitle>
  <link href="https://tilnel.github.io/atom.xml" rel="self"/>
  
  <link href="https://tilnel.github.io/"/>
  <updated>2099-12-31T15:59:59.000Z</updated>
  <id>https://tilnel.github.io/</id>
  
  <author>
    <name>Tilnel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>序</title>
    <link href="https://tilnel.github.io/20991231-top/"/>
    <id>https://tilnel.github.io/20991231-top/</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2099-12-31T15:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近来看的人变多了，正好随手调整一下内容。</p><p>人无法对他写下的文字完全忠实。事实上我最近在录入以前的手写稿时，也有大量删改。19-22的册子看起来写了不少，但最终进入到这里的只有寥寥几篇：写的时候完全不讲究，事后自己去读的时候只有捂脸。这也算我本人这一时期的特色了。然而我还是希望“尽量忠实”，尤其是最近一年我觉得我在这方面做得不错。23年8月-24年7月的手写部分，除了一些涉及他人隐私的地方我不得不使用代号以外我几乎是原封不动地录入了。有可能是因为距离现在的我并不遥远所以我对这些文字大体上满意。</p><p>随手浏览一下文章列表，偶然会有几个月的沉寂期。19年以前的部分在考虑补，高中写的东西的确不少；20春-22春夏我的个人生活几乎是停滞的，因为那段时间包含了我状态最差的时候，最繁忙的时候，以及最无所事事的时候，所以就连纸质日记也没有几篇。仔细想来，爆发期其实就是22年秋冬的一段dramatic的感情，之后几乎每个月都有思考和记录。</p><p>介绍完博客的概况，该介绍一下自己了。如你所见这里有很多计算机相关的内容，偶尔也谈点哲学。然而相比于理性世界，我更在乎感性直观的冲击：视觉、味觉、嗅觉、听觉。所以正在努力成为味觉与嗅觉的美学家，从一个调酒师开始，探索饮品的各种可能。其他的成分只要再略读一两篇文字就明了了。</p><p>那么，如果您看到喜欢的文字并且愿意，可以在社交媒体上联系我（评论区并不会及时通知到我个人），这些反馈都会对我有很大帮助。</p><p>Tilnel 2024-10-23 06:42:15</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近来看的人变多了，正好随手调整一下内容。&lt;/p&gt;
&lt;p&gt;人无法对他写下的文字完全忠实。事实上我最近在录入以前的手写稿时，也有大量删改。19-22的册子看起来写了不少，但最终进入到这里的只有寥寥几篇：写的时候完全不讲究，事后自己去读的时候只有捂脸。这也算我本人这一时期的特色</summary>
        
      
    
    
    
    <category term="日常" scheme="https://tilnel.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>不抽烟了</title>
    <link href="https://tilnel.github.io/20241116-nosmoking/"/>
    <id>https://tilnel.github.io/20241116-nosmoking/</id>
    <published>2024-11-16T11:44:57.000Z</published>
    <updated>2024-11-16T11:44:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>走来计科楼的路上，我想着最近大概足够幸福了，可以不抽烟了。这是一个自我实现的预言。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;走来计科楼的路上，我想着最近大概足够幸福了，可以不抽烟了。这是一个自我实现的预言。&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="https://tilnel.github.io/20241116-working/"/>
    <id>https://tilnel.github.io/20241116-working/</id>
    <published>2024-11-16T04:54:24.000Z</published>
    <updated>2024-11-16T04:54:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来看一段代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">asm</span>(<span class="string">&quot;movq $-1, %rax\n&quot;</span><span class="string">&quot;syscall\n&quot;</span>); <span class="comment">/* won&#x27;t set errno */</span></span><br><span class="line">  <span class="comment">/* syscall(-1); */</span></span><br><span class="line">  <span class="type">void</span> *handle = dlopen(<span class="literal">NULL</span>, RTLD_LAZY);</span><br><span class="line">  <span class="type">long</span> *errno_position = dlsym(handle, <span class="string">&quot;errno&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!errno_position)</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not found&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(*errno_position));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>syscall()</code> 事实上还是 glibc 的 wrapper。errno 并不能够被 raw 的系统调用获得，只有 glibc 的 wrapper 能干这件事。我用内联汇编写 syscall 指令，errno 立马就不管用了。</p><p>问题在于 glibc 是怎么知道 syscall 出了什么问题的，感觉有点头秃。</p><p>OK syscalls(2):</p><blockquote><p>Note: system calls indicate a failure by returning a negative error number to the caller on architectures without a separate error register&#x2F;flag, as noted in syscall(2); when this happens, the wrapper function negates the returned error number (to make it positive), copies it to errno, and returns -1 to the caller of the wrapper.</p></blockquote><p>看到这里，我情不自禁地想问，既然 errno 对 kernel 不可见，那么对于 <code>ptrace(PTRACE_PEEKDATA)</code> 这种调用，它就算在成功的情况下也有可能返回 -38(ENOSYS) 这种东西。我怎么知道这个系统调用是成功了还是失败了？</p><p>答案是 ptrace(2):</p><blockquote><p>C library&#x2F;kernel differences: At the system call level, the PTRACE_PEEKTEXT, PTRACE_PEEKDATA, and PTRACE_PEEKUSER operations have a different API: they store the result at the address specified by the <u>data</u> parameter, and the return value is the error flag. The glibc wrapper function provides the API given in DESCRIPTION above, with the result being returned via the function return value.</p></blockquote><p>其实我觉得这样 wrap 一下真的很干。平白无故给我的理解上了一点强度。譬如在 strace 中</p><p><img src="image-20241116132923596.png" alt=""></p><p>我分明就是用内联汇编调用的。然后你告诉我这里无中生有返回了一个 -1。我觉得不行。</p><img src="image-20241116133145608.png" alt="image-20241116133145608" style="zoom:50%;"><p>对于我来说，我就想看到最 raw 的系统调用结果。</p><p>不过对于我们的 tracer 而言，这些都是小问题。现在我们知道如何设置 errno 了：因为 ptrace 获得的永远都是 raw 的 rval，所以只要改 rval(%rax) 就行了。</p><hr><p>关于线程退出状态的问题，可以看一看这个。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">foo</span><span class="params">(<span class="type">void</span> *_)</span> &#123;</span><br><span class="line">  <span class="comment">/* syscall(SYS_exit, EXIT_FAILURE); */</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *)<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">pthread_t</span> thrd;</span><br><span class="line">  pthread_create(&amp;thrd, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="type">void</span> *exited;</span><br><span class="line">  pthread_join(thrd, &amp;exited);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;foo exited with %ld\n&quot;</span>, (<span class="type">long</span>)exited);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接 exit，则会打印 foo exited with 0。但用 return 的就能打出 1 了。说明 pthread 在 foo return 之后果然是使用了一些同步的操作把返回值写进。如果没有这个操作，返回值就彻底丢掉了。</p><p>为什么是 0，其实是 join 的时候 pthread 干的。</p><img src="image-20241116135339801.png" alt="image-20241116135339801" style="zoom:50%;"><hr><p>对于 thread 的认知可能需要更新一下。</p><p>首先一个进程默认会有一个初始线程。进程是一个资源单位，而线程是一个调度单位。一个进程可以有很多个线程，包括初始的线程。这些线程之间都是平等的，在操作系统视角来说，没有高低，主次之分。任何线程都可以悄悄地似掉，如果没有其他的同步机制的话，那就真的死掉了。</p><p>新创建的线程，只是和创建它的进程同属一个线程组，可以说它是这个进程的子线程，而不能说是之前的线程的子线程。子线程创建新线程，它们依然是平级的。</p><img src="image-20241116141014668.png" alt="image-20241116141014668" style="zoom:50%;"><p>实验的结果</p><hr><p>想要恢复线程，也就是在dump的时候，先研究一下线程之间的关系。然后把cpu上下文装到线程里就行了。</p><p>while clone() 是会返回一些 tid 的。理想状况下，应该控制 tid 和之前一样，但是我该怎么做（？）</p><hr><p>明日任务：rewrite socket syscall</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先来看一段代码。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="科研" scheme="https://tilnel.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="https://tilnel.github.io/20241113-working/"/>
    <id>https://tilnel.github.io/20241113-working/</id>
    <published>2024-11-13T06:37:30.000Z</published>
    <updated>2024-11-13T06:37:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来做一个数独吧。然后就做了一小时。</p><hr><p>主要就来写一些关于 ptrace 的发现吧。从这样一个小程序说起</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid = fork();</span><br><span class="line">  <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">    ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    raise(SIGSTOP);</span><br><span class="line">    execl(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    perror(<span class="string">&quot;execl&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// tracer</span></span><br><span class="line">    waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    ptrace(PTRACE_SEIZE, pid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/* ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_TRACESYSGOOD); */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%*c&quot;</span>);</span><br><span class="line">      ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">      waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">ptrace_syscall_info</span> <span class="title">info</span>;</span></span><br><span class="line">      <span class="type">int</span> result = ptrace(PTRACE_GET_SYSCALL_INFO, pid, <span class="keyword">sizeof</span>(info), &amp;info);</span><br><span class="line">      <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptrace error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (info.op) &#123;</span><br><span class="line">      <span class="keyword">case</span> PTRACE_SYSCALL_INFO_ENTRY:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;syscall entry: ID = %lld\n&quot;</span>, info.entry.nr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PTRACE_SYSCALL_INFO_EXIT:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;syscall exit : ID = %lld\n&quot;</span>, info.entry.nr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PTRACE_SYSCALL_INFO_NONE:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;None\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PTRACE_SYSCALL_INFO_SECCOMP:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Seccomp\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 line 11 的注释。在注释掉这一行前，syscall_info 是可以获得相关信息的。但是注释之后，每次都只能获得到 NONE。Man ptrace(2) 理由是，”In case of system call entry or exit stop…limited to type ..NONE unless ..TRACESYSGOOD option is set”。</p><p>我们现在来控制它走几步。</p><img src="image-20241113174529054.png" alt="image-20241113174529054" style="zoom:50%;"><p>依此就是 execve()， NONE， 还有 brk()。</p><p>根据 strace，&#x2F;bin&#x2F;ls 的第一个调用就是 brk()，挺合理的。</p><p><img src="image-20241113174636851.png" alt="image-20241113174636851"></p><p>这里甚至看到 execve() 有返回值（？？）</p><p>那么，其实想要揪出这个 NONE 到底是什么。</p><img src="image-20241113181716326.png" alt="image-20241113181716326" style="zoom:50%;"><p>根本不懂。</p><hr><p>我是呆逼。</p><img src="image-20241113181807456.png" alt="image-20241113181807456" style="zoom:50%;"><p>意思是 <code>SIGTRAP|0x80</code> 是一般的正常的系统调用 invoke&#x2F;return 产生的。而那个 5 应该是有问题的。</p><hr><p>逆天。</p><img src="image-20241113184302150.png" alt="image-20241113184302150" style="zoom: 67%;"><p>这个特性挺能藏。</p><hr><p>接下来，我们将会来观察，在 clone 发生的时候，ptrace 要怎么跟踪</p><hr><p>首先随便讲一下线程这个东西。</p><p>作为 clone() 创建的 linux 原生线程呢，刚创建完后被控制的第一下，就是执行线程入口函数的第一个系统调用。这为我们简化了很多。但是在函数执行完之后，线程就会悄悄地死掉，然后什么也不告诉主线程。</p><p>事实上，thread 自行退出是通过 SYS_exit 系统调用（60号）。它做的仅仅是终结这个执行流；那么就少了一个可以调度到 CPU 上被执行的东西。不太明白这个系统调用对于资源的释放有没有，似乎没有，毕竟 clone() 之前就要准备好线程要使用的资源了，应该是调用者释放。</p><p>在任意一个线程，甚至是主线程，调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syscall(SYS_exit, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>都可以使当前执行流停止，并且其他的线程继续运行，整个进程基本上没啥大问题。资源应该都是进程层级的东西。</p><p>如果子线程退出，你会得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-process</span><br></pre></td></tr></table></figure><p>如果主线程退出，会得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-process-&#123;process&#125;</span><br></pre></td></tr></table></figure><p>是的，主线程死了，但是主进程还活着。</p><img src="image-20241113202635648.png" alt="image-20241113202635648" style="zoom:50%;"><p>当然其实 <code>ps -aux</code> 还是可以看到它的状态的。非常地合理。</p><hr><p>作为 tracer，在看到线程 syscall(60) 的时候，只要在 entry 处 detach 一下就好了。当然如果要砍掉一个线程，那只要罚它做一个 SYS_exit 然后 detach。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先来做一个数独吧。然后就做了一小时。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;主要就来写一些关于 ptrace 的发现吧。从这样一个小程序说起&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="科研" scheme="https://tilnel.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>新功能：显示我是否在工位干活</title>
    <link href="https://tilnel.github.io/20241112-activity/"/>
    <id>https://tilnel.github.io/20241112-activity/</id>
    <published>2024-11-12T07:49:37.000Z</published>
    <updated>2024-11-12T07:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>已实装在 <a href="https://tilnel.github.io/about">about | Tilnel’s Blog</a></p><p>给静态页面加这种东西，疑似有点闲。</p><p>实现分为三步：</p><p>1、判断我是否在工位 - 采取的标准是检测右手边主机是否锁屏</p><p>2、动态更新</p><p>3、将其显示在静态页面上。毕竟 github.io 仓库太慢了</p><h1 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h1><p>修改 Windows 组策略使得锁定(4800)解锁(4801)事件被记录。写一个cpp获取最后一个事件，挂在后台。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CheckLockUnlockEvents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HANDLE hEventLog = <span class="built_in">OpenEventLog</span>(<span class="literal">NULL</span>, <span class="string">&quot;Security&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hEventLog == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Failed to open event log.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DWORD bytesRead = <span class="number">0</span>, minBytesNeeded = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> bufferSize = <span class="number">1024</span> * <span class="number">10</span>;</span><br><span class="line">    <span class="function">std::vector&lt;BYTE&gt; <span class="title">buffer</span><span class="params">(bufferSize)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">ReadEventLog</span>(hEventLog, EVENTLOG_SEQUENTIAL_READ | EVENTLOG_BACKWARDS_READ,</span><br><span class="line">                      <span class="number">0</span>, buffer.<span class="built_in">data</span>(), bufferSize, &amp;bytesRead, &amp;minBytesNeeded)) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Failed to read event log.\n&quot;</span>;</span><br><span class="line">        <span class="built_in">CloseEventLog</span>(hEventLog);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span>* pRecord = <span class="built_in">reinterpret_cast</span>&lt;EVENTLOGRECORD*&gt;(buffer.<span class="built_in">data</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((BYTE*)pRecord &lt; buffer.<span class="built_in">data</span>() + bytesRead) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pRecord-&gt;EventID == EVENT_LOCK || pRecord-&gt;EventID == EVENT_UNLOCK) &#123;</span><br><span class="line">            std::string eventType = (pRecord-&gt;EventID == EVENT_LOCK) ? <span class="string">&quot;Lock&quot;</span> : <span class="string">&quot;Unlock&quot;</span>;</span><br><span class="line">            std::string message = <span class="string">&quot;Event: &quot;</span> + eventType + <span class="string">&quot;, Time: &quot;</span> + std::<span class="built_in">to_string</span>(pRecord-&gt;TimeGenerated);</span><br><span class="line">            std::cout &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">SendUDPMessage</span>(message);  <span class="comment">// 发送事件到目标主机</span></span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 每次检测只发送最新的一个事件</span></span><br><span class="line">        &#125;</span><br><span class="line">        pRecord = (EVENTLOGRECORD*)((BYTE*)pRecord + pRecord-&gt;Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseEventLog</span>(hEventLog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>把事件信息发到 Linux 主机上。启动一个守护进程，监听消息并生成一个 &#x2F;tmp&#x2F;activity 文件，内容为需要在网站上显示的 html 标签。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#ff0000&#x27;</span> <span class="attr">已经离开了</span>&lt;/<span class="attr">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 nginx</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /activity &#123;</span><br><span class="line">  <span class="attribute">default_type</span> text/html;</span><br><span class="line">  <span class="attribute">alias</span> /tmp/activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h1><p>塞一个 JavaScript 到主题的 js 文件夹里，fetch 这个 html 标签并塞到另一个 html 标签里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123; <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span> &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! Status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">text</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;html-container&#x27;</span>).<span class="property">innerHTML</span> =</span><br><span class="line">          html;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to fetch HTML:&#x27;</span>, error);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;html-container&#x27;</span>).<span class="property">innerText</span> =</span><br><span class="line">          <span class="string">&#x27;Failed to load content.&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在，为了从 github.io 上跨域访问，需要设置 nginx 的 Head</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> = /activity &#123;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Content-Type, Authorization&#x27;</span>;</span><br><span class="line">  <span class="attribute">default_type</span> text/html;</span><br><span class="line">  <span class="attribute">alias</span> /tmp/activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们把需要的元素装在 About 的 markdown 里面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;html-container&quot;</span>&gt;</span>校园网访问可加载当前状态<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/active.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><div id="html-container">校园网访问可加载当前状态</div><script type="text/javascript" src="/js/active.js"></script>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;已实装在 &lt;a href=&quot;https://tilnel.github.io/about&quot;&gt;about | Tilnel’s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给静态页面加这种东西，疑似有点闲。&lt;/p&gt;
&lt;p&gt;实现分为三步：&lt;/p&gt;
&lt;p&gt;1、判断我是否在工位 -</summary>
        
      
    
    
    
    <category term="摸鱼" scheme="https://tilnel.github.io/categories/%E6%91%B8%E9%B1%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="https://tilnel.github.io/20241112-working/"/>
    <id>https://tilnel.github.io/20241112-working/</id>
    <published>2024-11-12T01:30:58.000Z</published>
    <updated>2024-11-12T01:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今日目标是把之前的代码改完，并且至少支持 C&#x2F;S 类型的程序。</p><p> 第一步是重新梳理一下，auto 模式和 manual 模式分别到底发生了什么，进而能够在代码中对两种写法进行分开&#x2F;耦合。</p><p>事实上，auto 模式可以视为一种机器提供操作的 manual 模式。因而可以优先分析 Manual。</p><p>手动模式下，大致是这样的流程：</p><ul><li>启动 tracee，推进到初始状态后停下</li><li>等待用户输入，首先是切换“焦点”。进而是“执行一步”。</li></ul><p>此时，running 为全局第一个 state。</p><p>“执行一步”都做了什么？</p><ul><li>首先，作为手动模式，一般来说是顺着往下走，一般来说无须进行自动的状态恢复。</li><li>在某一位置触发了 Choose。此种情况并不需要进行 ckpt，因而只需要停下来，并询问 Choose 应当产生的结果。</li><li>一步执行结束。需要进行 ckpt。如果用户并未指定切换焦点，则下一步仍然在当前的焦点上进行。</li><li>当然，delete last_running; last_running &#x3D; running;</li></ul><p>ckpt 到底做了什么？</p><ul><li>将当前的状态放到 running 中。并且序列化然后写盘</li><li>也许写盘的操作可以在内存压力不大的情况下省去。用正经一点的话来说，就是“改变存储引擎为磁盘&#x2F;内存”<ul><li>但是这个好像并不是瓶颈，不首先考虑。</li></ul></li></ul><p>一个小问题。</p><p>在</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((constructor)) <span class="built_in">dwarf_init</span>();</span><br></pre></td></tr></table></figure><p>中，写 <code>std::unordered_map::operator[]</code> 会产生一个 floating point exception。推测 .init 早于了 STL 的实例化。</p><p>一天结束了。记一下我做到哪里了。</p><p>首先我在 Monitor 模块。其次我正在写 configure 的读取。接下来我要改写初始化状态的部分。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今日目标是把之前的代码改完，并且至少支持 C&amp;#x2F;S 类型的程序。&lt;/p&gt;
&lt;p&gt; 第一步是重新梳理一下，auto 模式和 manual 模式分别到底发生了什么，进而能够在代码中对两种写法进行分开&amp;#x2F;耦合。&lt;/p&gt;
&lt;p&gt;事实上，auto</summary>
        
      
    
    
    
    <category term="科研" scheme="https://tilnel.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>重读 eXplode 知道的事情</title>
    <link href="https://tilnel.github.io/20241111-eXplode/"/>
    <id>https://tilnel.github.io/20241111-eXplode/</id>
    <published>2024-11-11T09:30:39.000Z</published>
    <updated>2024-11-11T09:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The reader should keep in mind that conceptually what EXPLODE does is very simple. If we assume infinite resources and ignore some details, the following would approximate its implementation: 1. Create a clean initial state (§3.3) and invoke the client’s mutate on it. 2. At every choose(N) call, fork N children. 3. Onclient request, generate all crash disks and run the client check method on them. 4. When mutate returns, re-invoke it</p></blockquote><p>这个简化是非常不讲道理的。作为不需要复现这种技术的人来说，当然可以假设你在每一个分支的地方都去作 Fork，但是。。。这始终不是很对。</p><p>对于想要模仿这种做法的人来说，完全找不到任何方法可以忽略过度使用 fork() 带来的进程数量爆炸。问题不光处在系统性能资源上。甚至可以说，连进程数量上限都能摸到</p><p>当然作者的说法是很狡猾的，“你们大可以把这件事情看成是这样”。这句话隐含的意思就是实际情况和他所说的相去甚远。</p><p>当然，作者还是有所补充的：</p><blockquote><p>As a result, EX PLODE unsurprisingly looks like a primitive operating system: it has a queue of saved processes, a scheduler that picks which of these jobs to run, and time slices</p></blockquote><p>所以总的来说，做法还是状态存取和调度器。</p><img src="image-20241111174219924.png" alt="image-20241111174219924" style="zoom:50%;"><p>接下来有点费解。</p><blockquote><p>exhaust all possible combinations of choices within a single mutate call before doing another.</p></blockquote><p>也就是原地把所有的可能性都走一步，再往下走。有一种广搜的感觉，而不是：我尝试这个分支，然后从这里继续往后探索。</p><p>eXplode 的 ckpt 方法是确定性回放。也就是 stateless。</p><blockquote><p>EXPLODE uses computation rather than copying to recreate states.</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;The reader should keep in mind that conceptually what EXPLODE does is very simple. If we assume infinite resources and</summary>
        
      
    
    
    
    <category term="Distributed Systems" scheme="https://tilnel.github.io/categories/Distributed-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>重力</title>
    <link href="https://tilnel.github.io/20241110-gravity/"/>
    <id>https://tilnel.github.io/20241110-gravity/</id>
    <published>2024-11-10T10:13:45.000Z</published>
    <updated>2024-11-10T10:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>桌游组的重力系数也许太高了。可怕。是不是大家身上的负担都太重了？</p><p>虽然这个群可能本身就是这样，群友进来说两句抑郁的话，然后消失，然后过一阵子再来抑郁一下。这些抑郁却又说不出个实在的理由。每种情绪一定有引起它的原因，但是有人似乎是不愿意将这种原因附着于某种俗物，以便为它起一个浮华亮丽的名字。这样还可以敝帚自珍一下。</p><p>也许人都是有远多于自己想象的自尊的。譬如不愿意接受竟然是这么俗套、这么没意思的理由造成了自己的抑郁。于是就需要给原初的创伤套皮，如同河蚌分泌出物质来包裹沙石形成珍珠一样。于是伤口首先变得漂亮；其次变得看起来没有什么破坏力。分析卡在这一层也就没有什么实际的效用了。 </p><p>大概现在还是需要努力有意识地在聊天的时候断断句。但是文字形式的断句效果是很差的，因为文字经过自己的反思的概率是更高的，不一定能够逮到无意识的尾巴。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;桌游组的重力系数也许太高了。可怕。是不是大家身上的负担都太重了？&lt;/p&gt;
&lt;p&gt;虽然这个群可能本身就是这样，群友进来说两句抑郁的话，然后消失，然后过一阵子再来抑郁一下。这些抑郁却又说不出个实在的理由。每种情绪一定有引起它的原因，但是有人似乎是不愿意将这种原因附着于某种俗物，</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>博客、Hexo、Valine评论头像 备忘</title>
    <link href="https://tilnel.github.io/20241110-blog/"/>
    <id>https://tilnel.github.io/20241110-blog/</id>
    <published>2024-11-10T09:08:35.000Z</published>
    <updated>2024-11-10T09:08:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Valine 评论区在移动设备上可能刷不出来。应该是浏览器的问题。</p><p>Valine 评论是可以设置头像的，前提是留下一个邮箱，并且这个邮箱注册了 <a href="https://gravatar.com/">Gravatar</a> 然后设置了头像。一次注册到处使用。</p><img src="image-20241110171001041.png" alt="头像" style="zoom: 67%;"><p>砍掉了博客的文章摘要。改成了 Archive 的页面。</p><p>砍掉了文章列表分页，力求原始简单。</p><p>砍掉了回到顶部按钮，总共也不会多长。</p><p>终于启用了 jQuery 站内搜索，现在可以搜索关键字了。</p><p>更新了 About 的内容。省略了很多网络社交不需要的东西。</p><p>更新了几个友链，虽然我们并没有交换，就当是博主推荐了。</p><p>启用了访问统计(busuanzi)。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Valine 评论区在移动设备上可能刷不出来。应该是浏览器的问题。&lt;/p&gt;
&lt;p&gt;Valine 评论是可以设置头像的，前提是留下一个邮箱，并且这个邮箱注册了 &lt;a href=&quot;https://gravatar.com/&quot;&gt;Gravatar&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="技术" scheme="https://tilnel.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Highway to Hell</title>
    <link href="https://tilnel.github.io/20241108-trip/"/>
    <id>https://tilnel.github.io/20241108-trip/</id>
    <published>2024-11-07T21:46:41.000Z</published>
    <updated>2024-11-13T07:50:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Preface</p><p>11月7日，骑了很远的路。游记参考祁念的记录。似乎我也没有什么实际的情节需要补充。</p><p>为什么会做这样看起来疯狂且没头脑的事情，我已经忘记了很久——并非。</p><p>如果没有可以互动的对象，那么回家&#x2F;宿舍&#x2F;工位将会是一件非常乏味的事。看起来工作室的各位都不是十分愿意离开人群。与人在一起这件事本身包含了一种力量，似乎是“收到反馈”的权力。人做任何事、说任何话的背后都隐藏着一种期待，或是说一种欲望，即将这些话语和行为的意义进行锚定，以防止这些内容在产生意义之前就散失了。呃说人话：一种“回应”是人们所期待的，回应这件事使得自我的主动表达得到了ACK。于是就可以对行为的意义进行自己的判断。这一判断就是依据回应生成的。</p><p>可能这样说并不精准。回应并不是“判断”的内容的充分依据，它充其量是一种直接原因。因为回应到了，我们搜索自己的意识，产生新的行为以应对那个回应。</p><p>“≥3”是一个并不充分的条件。大多数情况下，3个人的活动可以产生足够多的plot以供所有人咀嚼，产生回应，引发一种“消息风暴”。2个人的活动就会大打折扣了。</p><p>我在说<strong>二人关系是乏味的</strong>，听起来有点危险。</p><hr><p>其实应该写游记的，但是祁老师已经写了主要情节，我就偷个懒搬来好了（）</p><blockquote><p>据说这个游记其实有五篇。但是跳票3篇。《自行车篇》《厕所篇》《消费篇》《旅途见闻篇》《尾声》</p></blockquote><p>一切的起因都要从一顿饭吃完回来已经过了十二点开始。</p><p>@祁念←半夜不好意思敲醒阿姨回宿舍的人<br>@茶栗←有人建议就会很乐意夜骑&#x2F;唱唱的人<br>@洗先生（Tilnel）←一件随机刷新的活动有≥3（含自己）就容易参与的人<br>三人成组，踏上行程准备，在玄武湖和晓庄中间选择了更近的目的地。</p><p>《自行车篇》<br>洗杯子先生记起来自己其实还有一辆被自己遗忘在宿舍门前数月的公路自行车，作为没有哈啰月卡又没办法骑电动车出校的人，选择回去看看公路车是否可用——结果当然是不可用的，从车山车海中把车举起来放出来的下一秒，车的瘪后胎就说明了自己不堪大用。于是选择了（看上去）更适合当天行程的价值8.6元的哈啰七天卡，此处是一个伏笔。</p><p>在出门的过程中，洗杯子先生认为自己的车需要重买，于是以五十块把车当场抛售给了乐得如此的cj——至于cj要花多少个五十块才能修好这辆车，此乃后话。</p><p>骑至金鹰附近借洗手间休整后，洗杯子先生突然发现，七天卡的权益不同于高贵的两小时无限次的月卡，单次最长时间其实只有30min——发现这件事的时候，已经37min后了，于是支出+1元。</p><p>此后订了闹钟，每半小时休整一次更新哈啰时间，最终在数次导航cj的偏航之后抵达了目的地——某不知名的夜不落食物街道。尽管当时已经近凌晨四点，街边小摊和相当多的临街店铺还在营业。随机选择了一家幸运早餐店作为补给。虽然选择了这家店的cj并没有吃，价格算得上低廉，味道也不差。</p><p>吃饱喝足之后再次上路，弹出的消息却是“您的哈啰权益已过期”，经过仔细确认和休整次数的回忆，三人惊喜的发现没有麻麻的哈啰的七天卡，是七天五次，反复开关最终提前刷爆了额度——不过其实还有三次助力车，但是南京压根没有助力车。于是洗杯子先生进入了今日第不知道几绷并表达了对哈啰的亲切问候。</p><p>尽管如此，限于有人骑自己的车来，还是没办法打车，又“骑都骑了”，最终继续选择哈啰上路。“这次要不你就全程开得了别开卡了？”“开了，因为我发现续卡只要4.1元。”——这 绝 对 是 消 费 陷 阱。</p><p>返程途中还是继续保持三十分钟一停的规律……吗？在某个三十分钟后试图休整的洗杯子先生遇到了全新的滑铁卢，哈啰单车颇为别出心裁将运营区挖了个洞——尽管来时我们走过相同的路，但是来时恰巧避开了这里休整。此处我们位于洞中，最近的回运营区重置时长的方式是倒车，但显然，倒车对于这种骑行还是太残忍了，最终骑到了路线经过的下一个运营区，换句话说，支出+1元。</p><p>总之最终先到了KFC吃cj的早餐，又到了金鹰711与起得早得过头的kakaa会合进行了一波消费。消费过后，尽管kakaa的后座仍可以坐人，但是一方面，“既然追求骑行，不如贯彻到底”，cj和洗杯子先生还是选择骑行；另一方面“自己的不爽固然令人难受，但同行人的舒适更加令人揪心”，被cj和洗杯子先生否决了“骑一辆更舒适的车这样自己可以顺势坐kakaa后座”的提议的祁念同学终究继续骑行。</p><p>最终四人从西门进校，进校后的第一件事是更换至自己具有高贵的电动车小蓝月卡的座驾，并放言“现在有两个人舒服了”。</p><p>舒服挺好，如果剩下的六次助力车次数能在七天内用完就更好了（笑）</p><blockquote><p>祁念: 其实返程cj提过从南京站走从钟山南侧回来，被两个人同时否了</p><p>洗先生: *绝对会死的*</p><p>祁念: *绝对会死的*</p></blockquote><hr><p>《厕所篇》<br>不知道为什么当天在厕所处的笑点如此之多，大概人类还是需要厕所。</p><p>在去查看洗杯子先生的公路车近况之前，cj提过一次用教学楼洗手间，可能是公路车的现况太过好笑且震撼，也可能是被冷风把脑壳吹不清醒了，三人直接出门前往晓庄了。</p><p>鉴于出门前校内711恐怖长队现状，祁念提出可去金鹰711逛一圈看看情况，于是稍微变更了一下路线经由金鹰前往目的地。抵达711并购入水补给之后，询问711店员附近的洗手间，店员答曰海底捞，于是出门前往海底捞借用厕所。</p><p>洗杯子先生认为金鹰有一家营业的酒店，上次的23：00左右他仍然有走过南侧的某条路。而具有丰富的阴间时间金鹰海底捞经验的cj认为不然，曾经有幸体验阴间时间海底捞的祁念也认为不然。于是前往金鹰北侧，提车后，洗杯子先生于此时发现哈啰七天卡权益打骨折，祁念同学正在看热闹。</p><p>一抬头cj已然消失，然而东北侧门实则已锁，并不熟悉夜半金鹰的二人确认了半天此路不通，跟着一般通过的路人，找到了略靠西北侧的可用门，并在电梯间遇到了已经用过厕所下楼的cj。什么叫做经验丰富啊[战术后仰.jpg]总之略等了一手之后，三人继续踏上行程。</p><p>在中途的某次停车休整时，路旁十字路口拐角有一间装修十分厕所的建筑，但是它的气味不足又弥补了这一部分。适逢cj正在查询消费记录和地图，好奇心绕行半圈以后发现，这确实是公共厕所，并且门前还有貌似已经收摊的夜市。[如果一间建筑长得像厕所，位置像厕所，那它就是厕所.jpg]</p><p>时间一路快进到抵达大成名店的KFC吃完早餐之后，cj惊喜发现此间KFC的厕所是坏的。在KFC店员和大成名店内部员工的指路下找到了大成名店一楼的厕所——尽管在数米开外，奇妙的气味已经让人有了敬而远之的想法。于是祁念和洗杯子同学一同在外等候cj，而cj在出来以后分享了自己与鼠鼠（rat而非mouse版）在厕所相见的趣闻。</p><p>还好没去。</p><hr><p>鉴于剩下的几篇跳票太久了，作者自己记性不太好。所以还是试图自己写了。</p><hr><p>《消费篇》</p><p>说起来，本次夜骑正是从一场未遂的711开始的。在吃完上一顿后，打车回来的三人准备看一眼校内711的营业情况。洗杯子先生认为，应该没有那么多人无聊&#x2F;精力旺盛到半夜起来去排队给711刷业绩。但是真的在一点多的时候看到校内711的盛况之后傻眼了，本来打算捡个漏的，没想到我校学生还是太有精神了。鉴于三人都不想排队于是离开，就在这路上，三人草率地决定要夜骑——去往cj记忆中的某一个夜市。</p><p>离开学校不久，三人打算去瞧一瞧金鹰的711是否有活动，于是提前进行了一个拐弯。当711出现在眼前的时候，三人惊喜地发现：不但有活动，而且还没人排队（果然大学生是这个世界上最有精神的群体）。三人决定在711进行一些液体补给，并在黎明时分返回到这里进行一波抢购。</p><p>转眼目的地已然到达，夜市一条街除了两边的商铺开着，马路中间也各种流动摊贩，还有在路中间支起了帐篷的临时馆子，繁华程度让在南京生活了快24年的洗杯子先生表示活久见——毕竟是完全没有夜生活的城市。三人略犹豫一会儿后，决定去吃一家早餐店，此时大约是三四点的样子。</p><p>令人疑惑的是，祁念点了两碗粥——记忆中是赤豆元宵和皮蛋瘦肉粥。问及缘由的时候，说是喜欢又喝甜的又喝咸的。这也是从来没见过的操作。另外要吐槽的是，这家店的锅贴出奇地小。虽然看到价格是6块钱8个的时候就觉得份量应该不太大，但是这个实际大小很难让洗杯子先生将其与他认知中的锅贴联系在一起。当然，总的来说这家店是很便宜的，不仅感叹这居然是2024年的物价。cj什么也没有吃，表示他只是想来到这里，就满意了。</p><p>返程路上三人先经过了大成名店的KFC，cj在此作早餐补给，三人修整后与kakaa一道去了金鹰的711。6点时候的711已经人比较多了。在进门的时候，所有人都以为这里一共有两个711会员，所以应该会有4张117-60的券……吧？然而并没有：祁念似乎没有领券。洗杯子先生和kakaa买了一篮子，而祁念和cj拿了两篮子，到了结账的时候发现没券，不得不使用kakaa的另一张。cj得知充满了零食的那一篮无法结账后悲痛欲绝：您这是把大头给省掉了啊。在回校之后，发现似乎太多的同学都经历了挑选半天商品最后结账时发现没有券的惨剧，这下非常庆幸了——kakaa在那时候恰好醒了，并且恰好能够被call来，kakaa简直就是三人的救世主。</p><hr><p>《旅途见闻篇》</p><p>首先复盘一下路线</p><p>走仙林大道</p><p><img src="image-20241118183037258.png" alt="image-20241118183037258"></p><p>在仙林中心站看到罗森未开门，补给失败决定右拐到金鹰711</p><p><img src="image-20241118183148372.png" alt="image-20241118183148372"></p><p>在金鹰湖滨天地左拐进入文苑路，一直到久客宾馆</p><p><img src="image-20241118183226843.png" alt="image-20241118183226843"></p><p>走仙隐北路向西北方向出了仙林街道</p><p><img src="image-20241118183330230.png" alt="image-20241118183330230"></p><p>经过仙尧路。路过车管所以及垃圾宁芜铁路</p><p><img src="image-20241118184523720.png" alt="image-20241118184523720"></p><p>接下来我认到了这个。因而我们一定走了尧新大道。</p><p><img src="image-20241118184615526.png" alt="image-20241118184615526"></p><img src="image-20241118185512486.png" alt="image-20241118185512486" style="zoom:33%;"><img src="image-20241118185700686.png" alt="image-20241118185700686" style="zoom: 33%;"><p>然后在煤炭地质局附近看到了一家KTV。我问有没有唱唱（）。此处左拐</p><p><img src="image-20241118185813078.png" alt="image-20241118185813078"></p><img src="image-20241118190043362.png" alt="image-20241118190043362" style="zoom:50%;"><p>去程燕尧路是一个下坡。有路牌指马鞍山，但是我也没找到附近有任何马鞍形状的山。</p><p><img src="image-20241118190143976.png" alt="image-20241118190143976"></p><p>可以看到街景这里的照片比较新，有这个外市非机动车禁止通行。再往前走点的老街景是没有的。</p><p><img src="image-20241118190308257.png" alt="image-20241118190308257"></p><p>此处对面就是G36宁洛高速入口了。</p><p><img src="image-20241118190523192.png" alt="image-20241118190523192"></p><p>总之向西南进入华银路。路过了丁家庄夜市，还有妇幼保健院。厕所篇亦有记载。</p><p><img src="image-20241118190945710.png" alt="image-20241118190945710"></p><p>之后是路过了兴卫村站。感叹道这是活在语音报站里的118路底站。在这里下坡一路狂奔，但是走错路了，在前面折返。返回来看到有遛狗的了都。</p><p><img src="image-20241118191203034.png" alt="image-20241118191203034"></p><p>嗯这条路就长这样。</p><p><img src="image-20241118191239926.png" alt="image-20241118191239926"></p><p>![image-20241118183005612](20241108-trip.assets&#x2F;image-20241118183005612.png</p><p><img src="image-20241118184232297.png" alt="image-20241118184232297"></p><p>终点：寻苏味粥铺（万寿商业街）。在北边存在一个万寿购物中心的全天营业茶百道</p><p>出发后不久，仍在仙林大学城地界内的时候，经过了一个路口。此时cj触发了某种开关，停车下去开始拍照：眼前是一家名叫“久客宾馆”的店。笔者已经忘记这里有什么渊源，但是“久客”的发音类似于joker，大约如此。</p><p>我们的路线是一路向西出仙林大学城，走仙尧路，迈尧路&#x2F;迈化路等，一路穿过尧化街道到达晓庄，最终落点应该是燕子矶街道和迈皋桥街道之间。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Preface&lt;/p&gt;
&lt;p&gt;11月7日，骑了很远的路。游记参考祁念的记录。似乎我也没有什么实际的情节需要补充。&lt;/p&gt;
&lt;p&gt;为什么会做这样看起来疯狂且没头脑的事情，我已经忘记了很久——并非。&lt;/p&gt;
&lt;p&gt;如果没有可以互动的对象，那么回家&amp;#x2F;宿舍&amp;#x2F;工位</summary>
        
      
    
    
    
    <category term="日常" scheme="https://tilnel.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>性别意识-理性 allegro</title>
    <link href="https://tilnel.github.io/20241104-relationship/"/>
    <id>https://tilnel.github.io/20241104-relationship/</id>
    <published>2024-11-03T17:00:00.000Z</published>
    <updated>2024-11-07T22:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>正是在对于差异的认知当中——此处的差异指的是对具体交际当中的人而非一种概念上的认识的差异——人才在交往中寻见一种乐趣。因为其中包含了一种事物发展方向的潜能。</p><p>而其中最乐见的恐怕是性别差异。古往今来有不少女扮男装并在长久的相处之后对性别进行重新发现的故事。例如梁祝；例如木兰辞。谜底揭晓的一刻，新的可能性，或者说得更加物化一点，新的选项就出现了。</p><p>其中所暗喻的是什么？长久相处这个环节只是故事当中使用的夸张手段，以凸显出那个性别意识的到来的震惊。事实上性别意识是无处不在涌现的。我想这些故事中都包含了这样一层意思：如果直白地告诉你有一个女性在你的面前，然后你意识到那是一个女性，这样稀松平常的事情并不会引发你对“性别意识”这件事的反思；那好，我就先告诉你她是个男的，再给出真相。这样性别意识涌现的瞬间就被放大了，人的态度会在一瞬间发生变化。</p><p>如果看到这里您应激了，想说自己根本不会有任何波澜，自己对男性女性是一视同仁的，那么您一定是完全未经性化的主体，也就不会成为这篇文章的读者。反过来说，您非常害怕自己被人指出无法对男女性别一视同仁，只能通过反驳的方式自我标榜一下。</p><p>写这段也是终于意识到我有一小撮读者了，会考虑读者对我有期待，而我对读者也有预期，预期读者会是尚未进化掉动物性的 Homo Sapiens Sapiens (现代人类)。为什么动物性如此重要？我临时想到一个简单的二分法，但是刀法不是很精湛：社会化的部分是工具理性，是世界机器运转的关节；未社会化的剩余（欲望）是驱动力，是根本的目的。</p><p>不过这听起来很掉价。不是想说人根本就是为了生物冲动才活在这世界上，我始终认为意识是物质世界将其自身溶化为一种理智的中介，人一定会追求理性当中的无条件者，即一切观念存在的原因。这不仅是一项崇高的事业，也是人的生物本能的一种高阶的表现。理性就这样从“看似的”非理性当中孕育出来。</p><p>更进一步，Willingness 当然是一种理性。婴儿哭哭啼啼需要人哄，也是理性的作用。类比的话，我们无法在非图灵完备的机器上实现一种图灵完备的语言。从非理性上能长出理性来吗？人能够产生理性，只能说明生物冲动虽然看起来是非理性的，但其中含有完整的“理性的潜能”。简单的晶体管几乎什么都不能做，但它们堆起来并且输入程序，仿佛就能思考。</p><p>我缝完了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;正是在对于差异的认知当中——此处的差异指的是对具体交际当中的人而非一种概念上的认识的差异——人才在交往中寻见一种乐趣。因为其中包含了一种事物发展方向的潜能。&lt;/p&gt;
&lt;p&gt;而其中最乐见的恐怕是性别差异。古往今来有不少女扮男装并在长久的相处之后对性别进行重新发现的故事。例如梁</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>11月4日纸质稿遗失的②。密码是88888888</title>
    <link href="https://tilnel.github.io/20241104-disappeared/"/>
    <id>https://tilnel.github.io/20241104-disappeared/</id>
    <published>2024-11-03T16:30:00.000Z</published>
    <updated>2024-11-03T16:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d294e764122956503f89c311d2568bd54be370c97d5ffbd262052ac5580c2e4">346518f25371ed5bd356f6b975c718b10b447f069f24e3eb1dff358858fbb02e6132f4398a81a590a39cf23c0e7e477e5a10f54bce3d5ba6675fd96e8932c25c9ab0440beb9bfe3e5b2fe134c00fa1f0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="日常" scheme="https://tilnel.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>摸</title>
    <link href="https://tilnel.github.io/20241104-slacking/"/>
    <id>https://tilnel.github.io/20241104-slacking/</id>
    <published>2024-11-03T16:00:00.000Z</published>
    <updated>2024-11-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>科研处于一种停滞的状态。我就说真不应该读这个研究生。接下来一段时间要有实质性的进展，但这真的可能吗，在得了痴呆症的情况下？</p><p>我也不知道我的心思到底在哪里，总之飘着。可能是怕手头这点东西到最后并不会有好的成效，也可能是怕不能按照预期的方式工作。但总而言之我不想做这个。我并不想处理这类复杂的要高强度动脑的知识。可能只想唱唱歌，做做数独——甚至有的时候做数独都会感觉累；养养花，看点好看的，吃点好吃的，体验很多不一样的事情。比待在实验室里撸代码更有成就感。</p><p>大概是哪怕平时感到微不足道的成就也大于在科研上做出了什么，毕竟与人交互的反馈是大于与物质世界交互的反馈的。</p><p>我认为我心理上是健康的，但是一提到工作就不太健康了，这是我的困境。反过来说如果我希望工作有所进展的话，是不是就需要自觉放弃一点心理健康程度？</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;科研处于一种停滞的状态。我就说真不应该读这个研究生。接下来一段时间要有实质性的进展，但这真的可能吗，在得了痴呆症的情况下？&lt;/p&gt;
&lt;p&gt;我也不知道我的心思到底在哪里，总之飘着。可能是怕手头这点东西到最后并不会有好的成效，也可能是怕不能按照预期的方式工作。但总而言之我不想做</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>关于穿衣这件事情，有一些不成熟的想法</title>
    <link href="https://tilnel.github.io/20241024-night/"/>
    <id>https://tilnel.github.io/20241024-night/</id>
    <published>2024-10-23T20:28:27.000Z</published>
    <updated>2024-10-23T20:28:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从看了 JOJO 时尚考之后，我就再也停不下来关注这些时装品牌了。虽然现在还很不容易看出一场show的主题，也说不出每个look到底有哪些设计元素，但总之能够看到服装，尤其是男装，并不是以前所想的那么沉闷的主体。当然到了这里也应当说，也许女装当中的设计随便抖一抖撒到男装上，都能做出许多新鲜的东西了。</p><p>第一推荐的时尚博主是 <a href="https://space.bilibili.com/353368172">AHALOLO-Bilibili</a>。也许是在中文互联网上最容易接触到的最前沿的，并且是解读过的时装咨询。两位主持人自身无论是知识素养还是外形条件都足够打了。</p><p>当然作为学生党肯定是买不起奢侈品的。但是也有不少方法可以借鉴，而不会停留在观看</p><ul><li><p>挑选认为好看，有意思的单品，并去找平替</p></li><li><p>一些小细节&#x2F;装饰可以从基础款手动改出来</p></li><li><p>看一场秀&#x2F;一件单品的思路，然后在自己搭配时反复强调</p></li></ul><p>有的时候也许重要的不是喜欢什么风格，喜欢什么单品。而是“我”如何让这件单品在我身上变得更合理。从衣服装饰人变成人去配合衣服，听起来不可思议，但对于卖衣服的人来说，在他们拿到成衣设计的时候，这是一个基本思路。</p><p>买衣服一定要挑模特。首先没有模特效果图的衣服要慎买。但是为什么对于消费者来说，选择好的模特比选择看起来不那么专业的模特，也是合理的？如果模特本身的素质很牛逼，套个麻袋都好看，是不是容易让自己造成误判？</p><p>我的思路是这样的：对于同一家店，选模特与摄影的审美（能力）与其服装设计的审美（能力）几乎是匹配的。这意味着如果模特图的效果就很差，那么一定是在某个审美的环节除了问题。这样你还能够相信他们的衣服吗？假如衣服确是设计得精良，那么设计者一定不会允许在最终呈现效果上打了折扣。</p><p>对于时装品牌，除了衣服本身的素质以外，秀场也会非常在乎 styling。现代的模特们已经几乎不走台步了，然而谁也都能感受到，每一场每一场之间，随着主题的不同，模特们的步伐，神态etc都是贴着场景的需要走的。</p><p>穿衣这件事情，其目的本身就是去呈现一种感觉。服装设计是固定的，因而最大的变量还是人本身。</p><p>「观察」是掌握美的第一能力。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;自从看了 JOJO</summary>
        
      
    
    
    
    <category term="时尚" scheme="https://tilnel.github.io/categories/%E6%97%B6%E5%B0%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>和 Blue 的聊天记录</title>
    <link href="https://tilnel.github.io/20241023-chat/"/>
    <id>https://tilnel.github.io/20241023-chat/</id>
    <published>2024-10-22T20:42:23.000Z</published>
    <updated>2024-10-22T20:42:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Blue 0:07:47 我好喜欢半夜在外面乱转啊 完全不想上楼回家</p><p>Tilnel 0:08:18 无数次夜游玄武湖了 回家&#x2F;回宿舍好无聊</p><p>Blue 0:11:05 昨天&#x2F;前天去了四种宗教的宗教场所（门口）</p><p>Blue 0:16:19</p><blockquote><p>Boss 0:09:11 哎 我真的活着吗</p></blockquote><p>连我都活着 您可比我热爱生活多了</p><p>Blue 0:16:49 我想 如果能被人感知到的话 大概是确实活在世上的</p><p>Blue 0:17:44 比如要是我说话没人理的话 我的存在就弱一分</p><p>Blushed 0:18:01 我配热爱生活吗</p><p>Blue 0:18:12 您在做对世界产生变化的事</p><p>Blue 0:18:28 说明您激烈地欲继续生活</p><p>Boss 0:18:59 我现在不想变化了</p><p>Blushed 0:19:03 也许只是激烈地想证明自己活着，或者一些其他事情</p><p>Blue 0:20:15 您还在关注世界</p><p>Blue 0:21:02 说明您大概还想深入生活的更多可能性</p><p>Blue 0:22:00 （天哪 不躺着的半夜真是有魔力吧 我这辈子讲过这么积极的话吗</p><p>Blushed 0:22:16</p><blockquote><p>Blue 0:21:02 说明您大概还想深入生活的更多可能性</p></blockquote><p>我不关注这个世界，也不胆敢深入什么可能性。我只是由于感到一些责任或者牵绊，还不能就此放手。</p><p>Blue 0:23:11 我此刻竟觉得 如果我在过去的某些时候能说这些话 或许我的生命能有翻天覆地的变化呢</p><p>Tilnel 0:24:40 每个人的生命是有自己的节奏的</p><p>Tilnel 0:25:11 有些事情就是会迟到，您可能会因此觉得有点委屈</p><p>Blue 0:25:29</p><blockquote><p>我不关注这个世界，也不胆敢深入什么可能性。我只是由于感到一些责任或者牵绊，还不能就此放手。</p></blockquote><p>我很多时候想着 我要爱这些牵绊 这样我就暂时没有必要惶恐 仅仅一刻也好 我只是想要顺从他们 让他们把我安全地缚在这地上</p><p>Tilnel 0:26:55 这样是对的</p><hr><p>Blue 0:27:57 我有点开心了</p><p>Blue 0:28:12 去便利店看看有什么啤酒</p><p>Tilnel 0:29:20 我们来到这里都是为了寻找更多的羁绊。我们享受这种受迫而不得不做某些事的感觉，因为我们自己是从来没有什么必须要做的事的</p><p>Blushed 0:30:10 为什么开心的时候要饮用酒精呢</p><p>Blushed 0:30:23 为什么难过的时候要饮用酒精呢</p><p>Blue 0:31:18 不知道</p><p>Blue 0:31:30 但是喝啥呢</p><p>Tilnel 0:31:32 为了去见邪恶的酒神！</p><p>Blue 0:31:38<br><img src="image-20241023044758338.png" alt="image-20241023044758338" style="zoom:50%;"></p><p>Tilnel 0:31:39 喝Asahi</p><p>Blue 0:32:24 我记得21年夏天我在摇联的活动上喝asahi</p><p>Blue 0:32:55 有个老哥叫我别一个人喝闷酒</p><p>Blue 0:33:47 然后我就混入了他们其中</p><p>Blue 0:33:58 开始乱叫乱跳</p><p>Blue 0:34:46 现在想想感觉就像那个一夜情</p><p>Blue 0:35:03 后来我也从来没有认识过他们其中的任何人</p><p>Blushed 0:36:10 人生也许就是这样子的</p><p>Blushed 0:36:26 会在某段时间和一些人聚在一起做某些事情</p><p>Blushed 0:36:48 后来再也没有认识甚至见过他们其中的任何人了</p><p>Blushed 0:37:21 最后认识的人也会不认识，见过的人也不会再见</p><p>Blue 0:37:32 有什么不好呢</p><hr><p>Blushed 0:38:42 我为什么戒酒呢？</p><p>Tilnel 0:39:27 不想度过一个荒唐的夜晚</p><p>Tilnel 0:39:44 但其实不喝酒的每天也都是很荒唐的</p><p>Blue 0:40:16 我手里这罐asahi是500ml的</p><p>Blue 0:40:33 我记得那年我喝的是1500的</p><p>Blue 0:40:45 别人都倒出来分着喝的</p><p>Blue 0:40:58 但是我对嘴了</p><p>Blue 0:41:11 而且也没有和我分酒喝的人</p><p>Blushed 0:41:22 因为如果我主动找酒喝且酒足够的话，我一定会喝醉。因为那就是我想要的。但是失去意识的时候并不会停止讲话或者做事。</p><p>Blushed 0:41:44 我难以承受这些无意识行为带来的后果</p><p>Tilnel 0:43:10 没被朋友拍成大型纪录片就不错了（</p><p>Blushed 0:43:12 我可以有意识地去做荒唐的事情，那是我选择的；但我害怕无意识地去做荒唐的事情，因为我没有经历过程，却不得不接受后果</p><p>Blushed 0:43:27 也许已经被拍成大型纪录片了</p><p>Blue 0:43:44 真的不得不接受后果吗</p><p>Tilnel 0:44:08 我认为无意识地表达点什么也挺好的</p><p>Tilnel 0:44:27 如果有所记录的话你还可以用来解读自己</p><p>Blue 0:44:50 我其实挺期待看到无意识的自己的</p><p>Blushed 0:44:56 但是我并不是自言自语</p><p>Blushed 0:45:05 我是在和别人说话</p><p>Blue 0:45:32 听我爸妈说我睡着了之后就像是死了 不会动当然也不会说话</p><p>Blue 0:45:41 我觉得挺没意思的</p><hr><p>Blushed 0:46:27 当我输出一些给自己看的文本的时候，我发现充满了情绪垃圾</p><p>Blushed 0:47:10 我曾经向某人展示过我的精神废料，后来人家就再也没有理我了</p><p>Blue 0:48:09 我常常觉得我不知道什么是我</p><p>Blushed 0:48:15 与其说我的写作能力在下降，毋宁说大学以来我作为人的能力就在退化</p><p>Tilnel 0:48:18 写blog吧（</p><p>Tilnel 0:48:39 被动地展示精神废料</p><p>Blue 0:48:45 我想如果把理智剥离的话 我或许能知道什么是我吧</p><p>Blushed 0:48:47 说实话，我并不知道技术上怎么去维护blog</p><p>Blushed 0:49:02 我不知道如何搭建个人主页</p><p>Tilnel 0:49:07 开个博客园，etc</p><p>Tilnel 0:49:51 然后在一些角落里若无其事地挂个链接</p><p>Blue 0:50:16 我没啥写作能力</p><p>Blue 0:50:37 积了很多很多500字的东西</p><p>Blue 0:50:51 最多也就能连续写2000</p><p>Blushed 0:50:53 好久没有写作了</p><p>Tilnel 0:51:05 我的博客大多都是笔在纸上滑到哪里算哪里，然后照着敲进电脑</p><p>Tilnel 0:51:15 大多都是零散的</p><p>Tilnel 0:51:34 重要的不是连续的文字生成</p><p>Blue 0:51:43 而且我还喜欢讲事情之前前摇</p><p>Tilnel 0:51:43 而是你写文字当中的犹豫和沉默</p><p>Blue 0:52:02 所以基本还没摇完就不想写了</p><p>Blue 0:52:15 我感觉我比较适合发微博</p><p>Blue 0:52:26 一句话暴论</p><p>Blue 0:52:45 妈的 想把手机扔进河里</p><p>Tilnel 0:53:10 我也常有一些暴力冲动（</p><p>Tilnel 0:53:20 比如躺床上就会想着把床板拍烂</p><p>Blushed 0:53:31 也许确实可以考虑搭建一个个人主页了</p><p>Blushed 0:53:46 有一些protocol还没有系统地整理</p><p>Blushed 0:54:10 一直没有动力去做这件事情</p><p>Blue 0:54:12 我躺床上的时候总想被钉在床上</p><p>Blushed 0:54:19 常常感觉自己是个废物</p><p>Blue 0:54:40 很简单的</p><p>Blue 0:55:43 github.io</p><p>Tilnel 0:56:43 写一些markdown放在github里我觉得都够了（</p><p>Tilnel 0:57:10 讲究一个形式</p><p>Tilnel 0:57:49 甚至可以提issue评论</p><p>Blue 1:00:51</p><blockquote><p>Blue 1:00:51 我躺床上的时候总想被钉在床上</p></blockquote><p>想象被什么长兵贯穿心脏钉住</p><p>Tilnel 1:02:34</p><blockquote><p>Blue 1:00:51 想象被什么长兵贯穿心脏钉住 </p></blockquote><p>想保持对生活的热情可能真的需要自觉地去当一个剧情发动机</p><p>Blue 1:02:53 啊 月亮露出来了</p><p>Blue 1:03:10 云层上的风看起来很大</p><p>Tilnel 1:03:51 生活需要一点dramatic</p><p>Blue 1:04:15 唉 走路有点晃了 上楼喝吧</p><p>Tilnel 1:04:22 陪一杯（</p><p>Tilnel 1:06:27 我躺在床上会被恶灵附身</p><p>Blue 1:06:31 家里只有酸奶</p><p>Blue 1:06:31 啊 在电梯里喝没了</p><p>Boss 1:06:35 我在玉玉什么</p><p>Boss 1:06:36 我不知道</p><p>Tilnel 1:06:52 你在嫉妒</p><p>Tilnel 1:07:06 你在委屈</p><p>Tilnel 1:07:08 你在。。。</p><hr><p>Blue 1:09:48 我中学的时候晚上回家 我妈都会让我快吃饭 但是我从来就更喜欢用睡觉来抵抗饥饿</p><p>Blue 1:10:02 或者我其实根本感觉不到饥饿吧</p><p>Tilnel 1:10:10 我就不行，因为白天耗能太高了</p><p>Tilnel 1:10:15 中学的时候</p><p>Tilnel 1:10:30 我们中学的食堂又是一坨</p><p>Tilnel 1:10:39 经常夜里回家狼吞虎咽</p><p>Blue 1:11:12 哈哈 我中学食堂也</p><p>Tilnel 1:11:15 现在想想还是很神奇，也许高中才是人最脆弱的时候</p><p>Blue 1:11:21 甚至小学食堂也</p><p>Tilnel 1:11:37 我会因为被早饭粥烫到了就大哭（</p><p>Blue 1:11:47 所以我大概中午也不怎么吃</p><p>Blue 1:12:02 后来我妈退休了 他就天天中午给我送饭</p><p>Tilnel 1:12:57 真好，我得自带</p><p>Tilnel 1:13:55 高中只是强度大，但是现在事情实在变得复杂</p><p>Blue 1:14:12 唉</p><p>Tilnel 1:14:17 我真希望不带脑子生活</p><p>Blue 1:14:26 我大概是不配聊高中的</p><p>Blue 1:14:46 闭麦了</p><p>Tilnel 1:15:02 怎么寸止了</p><p>Tilnel 1:15:21 那就不聊高中！</p><p>Qin 1:15:28 大概是觉得保送生有点开</p><p>Twist 1:15:43 sbw的名字终于有我喝过的了</p><p>Tilnel 1:15:58 有喝过我做的这款吗</p><p>Blue 1:16:11 我也喝过</p><p>Tilnel 1:16:12 大言不惭，但是全南京第一</p><p>Blue 1:16:18 群友调的</p><p>Tilnel 1:17:01 所以为什么要摆摊呢</p><p>Qin 1:17:13 不是好玩吗</p><p>Tilnel 1:17:17 大概是我想主动当一个剧情发动机了</p><p>Blue 1:21:51 唉 躺下之后就不想说话了</p><p>Tilnel 1:22:01 您躺下之后会想什么</p><p>Blue 1:22:08 感觉我是个不称职的社畜</p><p>Tilnel 1:22:33 称不称职不是自己该考虑的（</p><p>Tilnel 1:22:44 老板觉得你好就是好</p><p>Blue 1:23:03 嗯</p><p>Blue 1:23:32 社畜一般都啥时候睡觉呢</p><p>Tilnel 1:23:52 这个点，或者两三点</p><p>Tilnel 1:24:04 要不问问吉良</p><p>Blue 1:24:06 五六点睡吧</p><p>Tilnel 1:24:14 吉良11点</p><p>Blue 1:25:31 上半年的时候 我在南京睡不好觉吃不下饭 在上海还行</p><p>Blue 1:25:44 现在在上海也不太行了</p><p>Blue 1:26:09 之前吃了一罐褪黑素软糖</p><p>Blue 1:26:14 真好吃啊</p><p>Tilnel 1:26:19 我感觉褪黑素这玩意</p><p>Blue 1:26:21 所以不敢吃了</p><p>Tilnel 1:26:27 让我睡醒之后也没精神</p><p>Tilnel 1:26:36 所以用了一次之后就再也没用过了</p><p>Tilnel 1:26:59 主要还是连吃两粒也没睡着</p><p>Blue 1:27:03</p><blockquote><p>Blue 1:26:14 真好吃啊</p></blockquote><p>“您真的没overdose吗？”</p><p>Blue 1:27:10 哈哈</p><p>Tilnel 1:27:15 不要碰od</p><p>Blue 1:27:19 我连着吃6粒</p><p>Tilnel 1:27:57 我买的是汤臣那个</p><p>Blue 1:28:04 但是旺仔qq糖真没他好吃</p><p>Tilnel 1:28:04 应该是没什么味道</p><p>Tilnel 1:28:32</p><blockquote><p>Tilnel 1:27:15 不要碰od</p></blockquote><p>算了我也不好说</p><p>Tilnel 1:28:38 我这是不是一种酒精od</p><p>Blue 1:29:07 唉 感觉我现在可能有点癫 所以说这些话</p><p>Tilnel 1:29:15 癫好</p><p>Tilnel 1:29:47 如果我能保持100g酒精的微醺状态并且不用开车，我觉得我身边的人都会幸福一点（</p><p>Tilnel 1:30:13 小嘴嘎嘎能讲</p><p>Qin 1:31:21 作为不喝酒精神状态就已经不太正常的选手</p><p>Blue 1:31:37 我不喝酒的时候精神状态很正常吗</p><p>Qin 1:31:43 我觉得还是不要再用酒精挑战我的精神状态下限</p><p>Blue 1:32:06 我想有些群友大概一直都能发现我不太正常</p><p>Blue 1:32:21 说到底 什么是正常呢</p><p>Tilnel 1:32:23 什么是正常</p><p>Qin 1:32:29 什么是正常呢</p><p>Tilnel 1:33:15 自己觉得好的状态就是好的</p><hr><p>Qin 1:34:29 一点半把宿管喊醒编个ID</p><p>Tilnel 1:34:50 其实真实ID也不会怎样</p><p>Otaku 1:35:35 哦对 您可以去计科楼824</p><p>Tilnel 1:35:54 824－9有一张可以躺的椅子（</p><p>Otaku 1:36:00 还有纸质读物</p><p>Qin 1:36:17</p><blockquote><p>Otaku 1:36:00 还有纸质读物</p></blockquote><p> 这下想去了</p><p>Tilnel 1:37:39 我恭维的纸质读物大多已经被我录进博客了</p><p>Tilnel 1:37:44 工位*</p><p>Qin 1:38:07 不对吧，中间有一段blog断更说是记笔记了</p><p>Tilnel 1:38:21 噢对</p><p>Qin 1:38:25 不会首字母缩写连连看确实缺乏一些乐趣（</p><p>Tilnel 1:38:27 也在工位上</p><p>Tilnel 1:38:41 您要盒谁我可以直接告诉您（</p><p>Qin 1:38:50 太诚实了以至于完全就是诱饵</p><p>Tilnel 1:39:09 诚实吗</p><p>Tilnel 1:39:23 我觉得还差一点</p><p>Qin 1:39:43 真有人能对自己的文字完全诚实吗</p><p>Tilnel 1:39:55 说出来的和想的事情之间有一道无法逾越的鸿沟</p><p>Tilnel 1:40:05 更别提发布版了</p><p>Tilnel 1:40:12 但我在尽量诚实</p><p>Qin 1:40:18 我不写这种东西的原因就是我对自己的文字大概不诚实</p><p>Tilnel 1:41:12 其实写作的最终的玩法就是咀嚼自己写作过程中犹豫不决的，避而不谈的部分</p><p>Tilnel 1:41:32 当然阅读的最终玩法也是这样（</p><p>Qin 1:42:13</p><blockquote><p>Tilnel 1:41:12 其实写作的最终的玩法就是咀嚼自己写作过程中犹豫不决的，避而不谈的部分</p></blockquote><p>问题是自己都没办法把真正犹豫不决的东西付诸纸上（</p><p>Tilnel 1:42:13 “你为什么没说，必定有诈！”</p><p>Tilnel 1:43:26</p><blockquote><p>Qin 1:42:13 问题是自己都没办法把真正犹豫不决的东西付诸纸上（</p></blockquote><p>只是走这样一个过程而已。那些平时没意识到但是写的时候犹豫不决的东西会在自己的心里留下痕迹</p><p>Tilnel 1:43:36 一种自我诊断法</p><p>Tilnel 1:43:55 真正有用的从来不是静态的文字</p><p>Tilnel 1:45:09 看到一道裂谷的时候，第一个想的会是裂谷是如何形成的，而不是周边的平原</p><p>Tilnel 1:47:06 因为人天生知道，这道惊为天人的奇观底下才蕴含着地球内部活动的最大动力</p><hr><p>Blue 1:47:34 谢谢大家 给我发了6年钥匙扣</p><p>Tilnel 1:48:07 唉 zijingbt</p><p>Tilnel 1:48:19 今天还在品鉴紫荆的遗产</p><p>Blue 1:51:51 这么多年了 还没真的看完girl’s guide</p><p>Tilnel 1:52:07 有这个，可惜用不上</p><p>Tilnel 1:52:16 因为不是 girl</p><p>Tilnel 1:53:09 当时紫荆预告关服，然后我匆忙地下载了很多资源，填满了所有的机械硬盘</p><p>Tilnel 1:54:04 可能信息量最大的还是一堆kindle的电子书合集</p><p>Tilnel 1:54:42 你说，我手里掌握了一辈子都读不完的精神文明，但是却觉得自己依然精神匮乏</p><p>Tilnel 1:54:51 是怎么回事呢</p><p>Qin 1:55:42</p><blockquote><p>Tilnel 1:54:42 你说，我手里掌握了一辈子都读不完的精神文明，但是却觉得自己依然精神匮乏</p></blockquote><p>应聘图书馆管理员能让自己变得精神富足吗</p><p>Tilnel 1:55:54 对啊，这是怎么回事呢（</p><p>Tilnel 1:57:56 关站的时候我还传了一份白色相簿2的游戏然后被拒了（</p><p>Blue 2:00:23 即使都读了 很多时候也只是六经注我 只能读到我能懂的东西</p><p>Tilnel 2:00:40 那我觉得没什么问题</p><p>Tilnel 2:00:53 很多东西就是单纯的没读</p><p>Tilnel 2:01:07 我借图书馆的书已经超期了</p><p>Blue 2:01:15 我也不知道 人从什么时候开始就接受不了新的思想了呢</p><p>Tilnel 2:01:16 9天</p><p>Blue 2:02:15 如果这个世界上所有尚未属于我的事物都已经不再能被我所认识 那我就觉得确实起离死不远了</p><p>Tilnel 2:03:32</p><blockquote><p>Blue 2:02:15<br>如果这个世界上所有尚未属于我的事物都已经不再能被我所认识 那我就觉得确实起离死不远了</p></blockquote><p>我现在已经改变目标了</p><p>Tilnel 2:03:41 我想要各种 好看的东西</p><p>Tilnel 2:04:08 胜过某种新奇的认识</p><p>Blue 2:04:46 我其实觉得新奇的认识是精神自虐</p><p>Tilnel 2:04:50 也许应该学服装设计</p><p>Blue 2:04:53 我大概喜欢这个</p><p>Tilnel 2:04:58 计科只是planB</p><p>Blue 2:05:21 喜欢把自己置于一个痛苦的位置上</p><p>Tilnel 2:05:44 明白。。。</p><p>Blue 2:05:55 然后对自己说 这都是你活该 思想配得上苦难</p><p>Tilnel 2:05:59 认识到新的东西是有阵痛的</p><p>Tilnel 2:06:22 很多曾经笃信的东西都打碎了重新考量</p><p>Tilnel 2:06:37 然后不接受退缩的自己，也不接受新的</p><p>Blue 2:07:02 我确实有许多没来由的信条</p><p>Tilnel 2:07:05 所以，《彷徨》</p><p>Blue 2:07:17 但是大部分时间我还是</p><p>Blue 2:07:30 痛于自己失去了信仰的能力</p><p>Blue 2:08:53 如果能甘愿顺从于一种神圣力量的话 大概能生活地更简单吧</p><p>Tilnel 2:08:58 现在处于一种，悬置的状态</p><p>Blue 2:09:09 甚至能感觉到被爱呢</p><p>Tilnel 2:09:11 没法判断任何东西</p><p>Tilnel 2:09:52 相应地，对于很多事情的接受度也虚假地提高了</p><p>Blue 2:10:03 我中学附近的基督新教教堂的匾上就写着类似于爱与信仰的事情</p><p>Blue 2:10:15 唉</p><p>Blue 2:10:40 论爱欲也没看完 pending一个多月了</p><p>Blue 2:10:51 我天天都在干什么</p><p>Tilnel 2:11:53 您可千万别</p><p>Tilnel 2:12:04 算了，我希望你不要</p><p>Blue 2:12:27 没事</p><p>Blue 2:12:38 我大概现在并不知道我在说啥</p><p>Tilnel 2:12:40 至少我希望我不要</p><p>Tilnel 2:13:11 总之我希望自己有一种信仰的能力，但是不要信仰任何东西</p><p>Tilnel 2:13:30 这样能保留一种潜能</p><hr><p>Blue 2:13:46 应该就是没在思考了 只是在把自己想过的事情读出来而已</p><p>Tilnel 2:14:05 我也是啊</p><p>Tilnel 2:14:27 还坐在阳台上喝呢</p><p>Tilnel 2:14:58 我可能已经复读这些东西一两年了</p><p>Blue 2:15:12 嗯</p><p>Blue 2:15:15 我也是吧</p><p>Blue 2:15:29 我不相信我这些话是没说过的</p><p>Tilnel 2:16:00 但总之我还相信一件事</p><p>Tilnel 2:16:20 就是这些话背后的原因可能就是非常简单的一件事</p><p>Tilnel 2:16:29 对于这些课题大概微不足道</p><p>Tilnel 2:17:10 那也许“幸福”就是微不足道的</p><hr><p>Blue 2:17:17</p><blockquote><p>Blue 2:15:29 我不相信我这些话是没说过的</p></blockquote><p>但是我挺好奇的 我在什么时候什么地点说什么话能得到谁的回应呢</p><p>Blue 2:17:48 毕竟大部分时候 是没有回应的</p><p>Tilnel 2:18:57 我会暗自期望一种没有回应的分支</p><p>Tilnel 2:19:25 任何形式上的回应可能都会触发一种短路</p><p>Tilnel 2:19:52 于是此处的答案就不是我自己的了</p><p>Tilnel 2:20:04 或者说，此处我就没有思考的机会了</p><p>Blue 2:20:15</p><blockquote><p>Tilnel 2:18:57 我会暗自期望一种没有回应的分支</p></blockquote><p>我也</p><p>Qin 2:20:21 那您期待的是自己说着说着想明白了吗</p><p>Blue 2:20:31 我想我说话的结局一定是不再说话</p><p>Tilnel 2:20:32 yep</p><p>Blue 2:20:44 但是我比较懦弱</p><p>Blue 2:21:21 我会想 如果是有强制力命令我不再说话就好了</p><p>Tilnel 2:21:33 我有一个暴论</p><p>Tilnel 2:21:47 就是人其实是畏惧自由的</p><p>Blue 2:21:48 这样我就可以把自己摆在受害者的位置上</p><p>Tilnel 2:21:59 因为自由代表自甘风险</p><p>Tilnel 2:22:08</p><blockquote><p>Blue 2:21:48 这样我就可以把自己摆在受害者的位置上</p></blockquote><p>和你这句差不多</p><p>Tilnel 2:22:50 如果遵从某种命令，那么错误就可以归咎于某种异己的力量</p><p>Tilnel 2:23:09 完全的自由就是另一回事</p><p>Blue 2:23:10</p><blockquote><p>Blue 2024&#x2F;8&#x2F;8 22:39:49 我就是想要得到一个貌似权威的、先验正确的规范 然后他全然地战胜了我 我就能轻松地放弃思考 屈服于他 并把不思考的罪孽和逃避的责任推给他…</p></blockquote><p>。</p><hr><p>Tilnel 2:23:25 唉</p><p>Tilnel 2:23:31 所以我是M（</p><p>Tilnel 2:23:41 而且这世界上M多S少</p><p>Blue 2:23:48 我是m吗</p><p>Blue 2:23:51 我不知道</p><p>Blue 2:24:02 也有群友说过我是s</p><p>Blue 2:24:22 还有群友说过什么别的</p><p>Tilnel 2:26:47 S其实是世界的M</p><p>Tilnel 2:27:05 祂是世界施虐的代行者</p><p>Tilnel 2:27:34 所有人都是M罢了（</p><p>Blue 2:27:46 唉</p><p>Tilnel 2:27:49 感觉说得有点多了</p><p>Tilnel 2:28:06 喝得也有点多了</p><p>Blue 2:28:15 想起昨天早上 明明起得很早</p><p>Qin 2:28:34</p><blockquote><p>Tilnel 2:27:34 所有人都是M罢了（</p></blockquote><p>前两天和朋友聊过，我觉得这种逻辑推完了所有人都是M，反过来讲所有人都不是M</p><p>Blue 2:28:42 还是把自己按在床上做了20min清明梦</p><p>Tilnel 2:28:56</p><blockquote><p>Qin 2:28:34 前两天和朋友聊过，我觉得这种逻辑推完了所有人都是M，反过来讲所有人都不是M</p></blockquote><p>完全可以这么说</p><p>Blue 2:29:05 上班的路上整个人都还是恍惚的</p><p>Tilnel 2:29:46 所以是“逻辑”自身有问题</p><hr><p>Blue 2:29:57</p><blockquote><p>Blue 2:28:42 还是把自己按在床上做了20min清明梦</p></blockquote><p>虽然这很亵渎但是 我实在喜欢做神的感觉</p><p>Tilnel 2:29:58 我在说什么</p><p>Blue 2:30:25 但是又觉得作为人是不能贪恋这个的</p><p>Blue 2:30:29 这是危险的</p><p>Tilnel 2:30:34 好</p><p>Qin 2:30:37 没事，你有一半的意思是酒精代驾的</p><p>Qin 2:30:54 适合文艺创作的状态</p><p>Qin 2:31:01</p><blockquote><p>Qin 2:30:37 没事，你有一半的意思是酒精代驾的</p></blockquote><p>意识*</p><p>Tilnel 2:31:06 酒精可能不是代驾</p><p>Tilnel 2:31:22 我才是代驾（</p><p>Blue 2:31:29</p><blockquote><p>Blue 2:29:57 虽然这很亵渎但是 我实在喜欢做神的感觉</p></blockquote><p>我太自大了</p><p>Tilnel 2:31:35 是我替世界说</p><p>Tilnel 2:31:52 感觉好糟糕啊</p><hr><p>Qin 2:32:13 自大的人会说自己自大吗</p><p>Tilnel 2:32:18</p><blockquote><p>Blue 2:31:29 我太自大了</p></blockquote><p>我倒挺羡慕的？</p><p>Blue 2:33:01 我有一个信念吧</p><p>Blue 2:33:12 唯有矛盾的才是真实的</p><p>Blue 2:33:36 所以因为我是自卑的所以我是自大的</p><p>Qin 2:34:03 我认可自卑自大二象性</p><p>Blue 2:34:06 因为我的自我意识过强 所以我欲抹掉我的存在</p><p>Blue 2:34:35 他们只能同时为真 虽然看上去是矛盾的</p><p>Tilnel 2:35:00 抹平是不符合能量最低原则的（</p><p>Blue 2:35:07 唉 我觉得我并不是酒精代驾</p><p>Blue 2:35:25 我和不少人平时说话估计就这样</p><p>Tilnel 2:35:59 有一个差异蹦出来才是最自然的</p><p>Tilnel 2:36:29 你已经完成一种循环了</p><p>Sakuran 2:37:14</p><blockquote><p>Qin 2:32:13 自大的人会说自己自大吗</p></blockquote><p>或许会的</p><p>Sakuran 2:37:25 自大的人不一定认识不自己自大</p><p>Sakuran 2:37:52 有的时候会意识到自己的自大，但在无意识间又会让自己的自大气氛弥散出来</p><p>Tilnel 2:38:01 但是一个自大的人只认识得到自己的自大这件事是不可能的</p><p>Tilnel 2:38:13 因为认识到自己的自大的同时就已经蕴含了自卑了（</p><p>Blue 2:38:26 唉</p><p>Tilnel 2:38:30 就是，我在这里装什么呢</p><p>Tilnel 2:38:36 这种感觉</p><p>Blue 2:38:46 好想今天早上也做清明梦</p><p>Tilnel 2:38:57 他同时认识到的是自己是一只纸老虎</p><p>Sakuran 2:40:28</p><blockquote><p>Tilnel 2:38:30 就是，我在这里装什么呢</p></blockquote><p>太对了</p><p>Tilnel 2:40:53 恰如此时此刻（</p><p>Blue 2:40:56 我刚把钟补回来 迟到还得补</p><p>Blue 2:41:32</p><blockquote><p>Tilnel 2:38:57<br>他同时认识到的是自己是一只纸老虎</p></blockquote><p>怎么说呢</p><p>Tilnel 2:41:39</p><blockquote><p>Blue 2:40:56 我刚把钟补回来 迟到还得补</p></blockquote><p>我觉得就算放您沉默了您还得再想几个钟头</p><p>Tilnel 2:41:43 所以干脆继续聊</p><p>Blue 2:41:49 世界上谁不是纸老虎呢</p><p>Tilnel 2:42:15</p><blockquote><p>Blue 2:41:49 世界上谁不是纸老虎呢</p></blockquote><p>我也会这样想</p><p>Blue 2:42:16 唉</p><p>Blue 2:42:30 我想展示一下我的输入法</p><p>Tilnel 2:42:45 但是人与人直接相对的时候就很容易被击倒（</p><p>Blue 2:43:03 有神秘的联想词</p><p><img src="image-20241023051500751.png" alt="image-20241023051500751" style="zoom:25%;"><img src="image-20241023051513574.png" alt="image-20241023051513574" style="zoom:25%;"></p><p>Tilnel 2:43:42 哈哈哈哈</p><p>Sakuran 2:43:42</p><blockquote><p>Tilnel 2:42:45 但是人与人直接相对的时候就很容易被击倒（</p></blockquote><p>而我常常是被击倒的</p><p>Sakuran 2:44:03 我应该少讲点b话显然</p><p>Tilnel 2:44:06</p><blockquote><p>Sakuran 2:43:42 而我常常是被击倒的</p></blockquote><p>也许是双方都被击倒</p><p>Tilnel 2:44:20 我偶尔觉得您的态度挺好的</p><p>Tilnel 2:44:34 就是一种能一直说下去的感觉</p><p>Tilnel 2:44:54 不管不顾</p><p>Blue 2:44:57 我挺嫉妒Sakuran桑的 我猜</p><p>Tilnel 2:45:02 我要是这样会有多开朗</p><p>Tilnel 2:45:08 不敢相信</p><p>Tilnel 2:45:26 哪怕冷场</p><p>Tilnel 2:45:48</p><blockquote><p>Tilnel 2:44:20 我偶尔觉得您的态度挺好的</p></blockquote><p>不是偶尔，是骤然</p><p>Sakuran 2:46:26 我发觉这是我在线上的社交在进了大学后奇迹般地搬运到了线下</p><p>Blue 2:46:32 我猜我对各位群友的任何负面情绪其实都是酸 而已</p><p>Tilnel 2:46:40</p><blockquote><p>Blue 2:46:32 我猜我对各位群友的任何负面情绪其实都是酸 而已</p></blockquote><p>我觉得没问题</p><p>Tilnel 2:46:44 我一直认为</p><p>Sakuran 2:46:53 因为我在高中时线下呈现出这样的状态是难以置信的</p><p>Tilnel 2:46:54 嫉妒，是我活下去的第一推动力（</p><p>Blue 2:46:58 但是我其实生活得客观上很幸福了</p><p>Blue 2:47:09 所以我好像也没资格酸</p><p>Sakuran 2:47:25 我不知道我的动力是啥，或许是享乐吧</p><hr><p>Tilnel 2:47:55</p><blockquote><p>Blue 2:46:58 但是我其实生活得客观上很幸福了</p></blockquote><p>你们难道都是完全的唯物主义者吗</p><p>Blue 2:48:11 您觉得我难道是吗？</p><p>Tilnel 2:48:13 至少我感觉我是主观唯心的</p><p>Tilnel 2:48:30</p><blockquote><p>Blue 2:48:11<br>您觉得我难道是吗？</p></blockquote><p>大概不是</p><p>Tilnel 2:48:59 所以提出一个客观视角的判断有点难以接受</p><p>Tilnel 2:49:48 然而在一个客观视角上看我其实也有点窘迫</p><p>Tilnel 2:51:06 所以我可能希望身边的所有我喜欢的人都尽量能逃离窘境</p><p>Tilnel 2:51:33 也就是尽力支援一下</p><p>Qin 2:52:50</p><blockquote><p>Tilnel 2:49:48 然而在一个客观视角上看我其实也有点窘迫</p></blockquote><p>怎么个客观法</p><p>Blue 2:52:56 我觉得我没有陷入过窘境</p><p>Blue 2:53:08 或者说我宁愿这样认为</p><p>Tilnel 2:53:20</p><blockquote><p>Qin 2:52:50 怎么个客观法</p></blockquote><p>纯主观的客观法（</p><p>Tilnel 2:53:33 自己评判自己</p><p>Blue 2:53:41 可是然后我依然是忧虑的</p><p>Blue 2:54:13 唉</p><p>Sakuran 2:54:57 我没有真的陷入过较大程度上（何为较大程度？）的窘境，但却常常会幻想自己在近未来即将落入这样的窘境</p><p>Sakuran 2:55:16 但我又不真的有动力去为避免之做出努力</p><p>Tilnel 2:55:23 我觉得很小的危机也是一种危机</p><p>Blue 2:55:27 我丝毫没有行动能力</p><p>Sakuran 2:55:35 焦虑与懒惰的伴生是致命的</p><p>Tilnel 2:55:36 就是一个细节可能对别人毫无影响</p><p>Tilnel 2:55:43 但是对自己就至关重要</p><p>Sakuran 2:55:49 是可以杀死人的，或许</p><p>Blue 2:56:07 所以我的一部分会以看戏的心态坐等我的毁灭</p><p>Sakuran 2:56:09 单独的焦虑和单独的懒惰杀伤力尚不足惧</p><p>Blue 2:56:26 但是一直以来 最后都无事发生</p><p>Tilnel 2:56:28 每个人希望能达到自己心中所想的那个状态</p><p>Tilnel 2:56:35 但是可能总是差一点</p><p>Sakuran 2:56:49 丧了 可那并不奇怪</p><p>Tilnel 2:56:51 所以要是能补上那一点也就好了</p><p>Sakuran 2:57:11 这是一种贪婪吗</p><p>Tilnel 2:57:13 但是换一个角度来说，差的那一点正好是一个人发展的动力</p><p>Tilnel 2:57:18</p><blockquote><p>Sakuran 2:57:11 这是一种贪婪吗</p></blockquote><p>不是</p><p>Blue 2:57:28</p><blockquote><p>Blue 2:56:26 但是一直以来 最后都无事发生</p></blockquote><p>所以只剩下可悲的嬉笑而已</p><p>Tilnel 2:58:12</p><blockquote><p>Sakuran 2:57:11 这是一种贪婪吗</p></blockquote><p>也许是世界给你植入的思想钢印</p><hr><p>Sakuran 2:58:30 像是窗外总有阴霾</p><p>Sakuran 2:58:42 嘲笑 可笑的 oh my</p><p>Blue 2:58:43 我不知我是否看起来很焦虑</p><p>Tilnel 2:58:44 <em>不完美</em></p><p>Tilnel 2:58:50 您看起来很焦虑</p><p>Sakuran 2:58:53 心有不甘</p><p>Sakuran 2:59:01 力所不逮</p><p>Qin 2:59:02 感觉晚上的这聊天可以拿去写术力口歌词</p><p>Sakuran 2:59:16 无怪</p><p>Tilnel 2:59:20 非要术力口吗</p><p>Sakuran 2:59:22 世界照常运转</p><p>Sakuran 2:59:31 没有惊喜</p><p>Blue 2:59:32 我妈说我看起来很焦虑 所以他们早就不敢碰我了</p><p>Sakuran 2:59:33 没有意外</p><p>Sakuran 2:59:41 渺小</p><p>Sakuran 2:59:48 那是一种常态</p><p>Sakuran 2:59:58 多么（忘了）</p><p>Blue 3:00:06 我不知道各位看见我的时候我是表现成什么样子</p><p>Tilnel 3:00:24 我觉得我喝酒之后也许是最佳状态</p><p>Sakuran 3:00:27 不用再去奋勇地失败</p><p>Blue 3:00:31 我不知道是否还有机会让各位看见我</p><p>Tilnel 3:00:41 这可能是饮酒的根源</p><p>Sakuran 3:00:48 酒精混搭烟草 爱与梦全部点燃</p><p>Tilnel 3:00:54 草</p><p>Tilnel 3:01:00 开始作词</p><p>Sakuran 3:01:06 我在烟雾中寻找期待</p><p>Tilnel 3:01:20 您这歌不是给赛博丁真唱的吧</p><p>Blue 3:01:24 开始唱唱了</p><p>Sakuran 3:01:29 手心紧握哪怕只是一片虚幻</p><p>Blue 3:01:39 这是背歌词呢</p><p>Tilnel 3:01:48 我狂笑了</p><p>Tilnel 3:01:59 还是在阳台上</p><p>Tilnel 3:03:02 这种时候大笑一声真中断思路了</p><p>Qin 3:03:33 酷</p><p>Tilnel 3:03:43 cool</p><p>Sakuran 3:03:57 所以，我想要说的，前人全都说过了</p><p>Tilnel 3:04:09 前人之述备矣</p><p>Sakuran 3:04:15 我想要做的</p><p>Sakuran 3:04:20 有钱人都做过了</p><p>Qin 3:04:23</p><blockquote><p>Qin 2:59:02 感觉晚上的这聊天可以拿去写术力口歌词</p></blockquote><p>但是bw的某几句真的很适合写歌词（</p><p>Blue 3:04:48 如果我不去看前人的工作</p><p>Tilnel 3:05:12 哪几句</p><p>Blue 3:05:12 我觉得我还可以装作我的思考是有意义的</p><p>Tilnel 3:05:15 没有意识到</p><p>Tilnel 3:05:25</p><blockquote><p>Blue 3:05:12 我觉得我还可以装作我的思考是有意义的</p></blockquote><p>不用装作</p><p>Tilnel 3:05:30 就是有</p><p>Tilnel 3:06:07 他人的思想被你思想了，那就是有意义的</p><hr><p>Tilnel 3:07:03</p><blockquote><p>Blue 3:00:31 我不知道是否还有机会让各位看见我</p></blockquote><p>我也想再见见</p><p>Tilnel 3:07:24 大概只见过一次？</p><p>Tilnel 3:08:12 见过的那一次甚至是有点悲伤的日子</p><p>Blue 3:08:37 没事 我大概一直都这样</p><p>Tilnel 3:09:00 我这样可不容易</p><p>Blue 3:11:09 唉 虽然我住哪里大伙都知道</p><p>Blue 3:11:21 但是最好还是和我打个招呼</p><p>Blue 3:11:44 我有点怕见人的 真的</p><p>Tilnel 3:11:51 您需要的话可以call</p><p>Tilnel 3:12:07 虽然我知道您的性格很难主动call人</p><p>Tilnel 3:13:27 其实我也无所谓</p><p>Tilnel 3:13:44 我甚至希望有人能突然闯上门</p><p>Tilnel 3:14:25 谁突然到12栋门口说要喝点啥我也不会有意见的（</p><p>Tilnel 3:14:40 我可能特别喜欢不确定性</p><p>Tilnel 3:15:16 因为会有非常丰富的心理活动发生</p><p>Tilnel 3:15:39 比如今天我说不会在工作室待很久</p><p>Tilnel 3:15:50 转头开了三集电视剧</p><p>Blue 3:17:29</p><blockquote><p>Tilnel 3:12:07 虽然我知道您的性格很难主动call人</p></blockquote><p>我什么性格呢</p><p>Blue 3:17:39 有些事情我很惊讶</p><p>Blue 3:18:06 比如 并不是每个人都能发现我是内向的人</p><p>Tilnel 3:18:15 比如上次我说您别说怪话之后直接自己禁言了</p><p>Tilnel 3:18:21</p><blockquote><p>Blue 3:18:06 比如 并不是每个人都能发现我是内向的人</p></blockquote><p>这还挺明显（</p><p>Blue 3:18:40 甚至有不少人在我如此声称之后还一直表示不信</p><p>Blue 3:18:56 我觉得这甚至不需要“发现”吧</p><p>Tilnel 3:19:40 的确</p><p>Tilnel 3:20:35</p><blockquote><p>Tilnel 2:16:29 对于这些课题大概微不足道</p></blockquote><p>我没喝酒的时候的脑回路就是这样</p><p>Tilnel 3:21:01 一些“微不足道”的郁闷就该直接说出来</p><p>Tilnel 3:21:37 就算输了也认了（</p><p>Blue 3:22:29</p><blockquote><p>Tilnel 3:18:15 比如上次我说您别说怪话之后直接自己禁言了</p></blockquote><p>我不知道</p><p>Blue 3:22:53 或许我不记得了 或许这是您的误解</p><p>Tilnel 3:23:42</p><blockquote><p>Blue 3:22:53 或许我不记得了 或许这是您的误解</p></blockquote><p>我记得您回答说认为并不是怪话，但是认为有人说看不懂是好的</p><p>Blue 3:24:40 我转的我的那几句话是我想时时告诫自己的</p><p>Blue 3:25:06 然后现实一点的原因是…</p><p>Blue 3:26:39 我与群友不共享生活 我观察生活有点看烦了</p><p>Blue 3:27:58 我就想起“不调查就没有发言权”的事</p><p>Blue 3:28:45 然后我就是觉得我早就应该（甚至主动地）fade away</p><p>Tilnel 3:29:32</p><blockquote><p>Blue 3:28:45 然后我就是觉得我早就应该（甚至主动地）fade away</p></blockquote><p>希望您能不fade away</p><p>Tilnel 3:29:53 我真的觉得应该想说就说</p><p>Tilnel 3:29:57 虽然我也这样（</p><p>Blue 3:30:09 原来我没被群友们屏蔽 或者说没被所有群友屏蔽吧</p><p>Tilnel 3:30:18 但我也很不喜欢看人脸色说话</p><p>Blue 3:30:49 我不知道 我觉得我其实和群友没什么话可说</p><p>Tilnel 3:31:11 前文亦有记载 我羡慕一个人能够自大</p><p>Blue 3:32:03 而且我其实是不敢说话的</p><p>Blue 3:32:12 尤其是打字</p><p>Blue 3:32:33 会永远被人翻出来的</p><p>Blue 3:32:43 我怎么可能敢说话呢？</p><p>Tilnel 3:33:09 instant message害的</p><p>Tilnel 3:33:34 我以前会有点想回到只能寻呼机的时代</p><p>Blue 3:35:02 所以我只有想着“也不会有人看到吧” 甚至是“别扯了 他人根本就是不存在的”才敢打点字呢</p><p>Tilnel 3:35:17 那我觉得这是真的</p><p>Qin 3:35:36 被完全地忘记是一件大概不太好的事情</p><p>Blue 3:35:44 why</p><p>Qin 3:35:53 所以被惦记大概有助于多一点和这个世界的联系</p><p>Blue 3:36:04 我也不止听您这样讲</p><p>Qin 3:36:05</p><blockquote><p>Blue 3:35:44 why</p></blockquote><p>因为我朴素地觉得活着更好</p><p>Tilnel 3:36:08 说明你活了一世但是完全没有影响力（</p><p>Qin 3:36:22 被忘记不太利于活着</p><p>Tilnel 3:36:25 我总觉得应该留下点什么</p><p>Blue 3:36:55 但是我并不信仰着这种朴素的认识</p><hr><p>Tilnel 3:37:01 影响力也是演化的一环</p><p>Tilnel 3:38:01 曾经是基因，现在可能是思想和知识</p><p>Tilnel 3:39:12 可能总会有一种奢望，就是人类应该往何处去</p><p>Blue 3:40:35 我自我意识过强了 竟觉得世界会因为我的行为改变 我害怕世界变化的责任担在我的肩上 从而想着最好不要行动了</p><p>Blue 3:42:31 我又是自卑的 所以想要磨灭我的存在</p><p>Blue 3:43:55 唉 感觉都是陈词滥调</p><p>Tilnel 3:44:07 那也有可能你感受到的目的就是这样</p><p>Tilnel 3:44:15 我也就不多说什么了</p><p>Tilnel 3:44:29 虽然有点神棍</p><p>Tilnel 3:44:57 但是我总认为世界是会降临它的意志到人的头上的</p><p>Tilnel 3:45:33 你去履行它也不构成任何问题</p><p>Blue 3:46:12</p><blockquote><p>Tilnel 3:44:57 但是我总认为世界是会降临它的意志到人的头上的</p></blockquote><p>即使我是祂的先知 我也是无力的</p><p>Tilnel 3:46:49 最后就是一个平凡的论点，每个人的目标都是不同的</p><p>Tilnel 3:47:26 所以只能等待你感受到祂</p><p>Blue 3:47:34</p><blockquote><p>Tilnel 2:38:31 就是，我在这里装什么呢</p></blockquote><p>唉 我感觉我也是这个</p><p>Tilnel 3:47:47 然后做出你所希望的变化</p><p>Tilnel 3:47:56 或者确实就这样了</p><p>Tilnel 3:48:26 但是我不会觉得你的做法有任何问题</p><p>Tilnel 3:48:57 如果你坚信世界需要自己做这一件事</p><p>Tilnel 3:49:00 那就去做</p><p>Blue 3:49:28 好像也没有</p><p>Tilnel 3:49:38 我是whatever肯定bot</p><p>Blue 3:49:56 在我的生命里发生更多的是… 我做与不做都一样</p><p>Blue 3:50:11 甚至我故意不做 他还是降临了</p><p>Blue 3:50:41 我不明白哪里来的这种恩赐</p><p>Tilnel 3:51:06 换言之你只需要实行自己的想法</p><p>Blue 3:51:13 或者说其实这是陷阱？是我太愚钝了看不出来？</p><p>Tilnel 3:51:34 可能说决定论是比较悲观的</p><p>Tilnel 3:52:08 只能诉诸荒木飞吕彦了</p><p>Tilnel 3:52:46 即使知晓命运，也会去反抗的勇气</p><p>Tilnel 3:53:02 不一定是反抗，也可能是代行</p><p>Blue 3:54:05 然后为了让我自己不那么惶恐 我就猜想 我的生活其实没那么幸运 只是我降低了期待而已</p><p>Blue 3:54:30 但我这样想 又怕自己不知满足</p><p>Tilnel 3:54:52 一个行为造成的结果，其影响是回溯性地论断的</p><p>Tilnel 3:55:37 没有未来就没有一个历史事件的论断</p><hr><p>Tilnel 3:57:48</p><blockquote><p>Blue 3:54:30 但我这样想 又怕自己不知满足</p></blockquote><p>我恐怕没有足够的精力去评判这个微观的事件</p><p>Tilnel 3:58:14 一来是喝多了</p><p>Blue 3:58:23 也不能说是微观的吧 唉</p><p>Tilnel 3:59:10 但是你总是立足于宏观的影响去判断自己的生活</p><p>Tilnel 3:59:56 似乎世界的意志是否被满足才决定了你的幸福</p><p>Blue 4:00:14 嗯… 确实</p><p>Tilnel 4:00:25 这早就是一种宗教信仰了</p><p>Blue 4:00:42 其实只不过是我不知道什么是幸福</p><p>Blue 4:01:11 所以我才会说“客观上的幸福”</p><p>Tilnel 4:01:33 那不妨再主观一点</p><p>Tilnel 4:02:49 但我也做不到</p><hr><p>Blue 4:03:03 唉</p><p>Blue 4:03:13 想起群友说</p><p>Blue 4:03:19 “需要性解放”</p><p>Blue 4:03:42 或许想了半天最后也还是这个</p><p>Blue 4:04:21 但是我其实挺怀疑的</p><p>Tilnel 4:04:38 解放的状态大概是全部人类顷其生命周期才能完成（消灭）的</p><p>Tilnel 4:05:45 用极限的逼近去形容有点庸俗，但也就是这样</p><p>Tilnel 4:06:18 毕竟完美这个词并不归属于人类</p><p>Blue 4:06:49 是的</p><p>Tilnel 4:10:59 假如你还心有不甘</p><p>Tilnel 4:11:08 请务必不被消灭</p><p>Blue 4:11:36 谢谢</p><hr><p>Tilnel 4:11:51 唉，都是复读</p><p>Blue 4:12:05 其实 当然毕竟是世俗的人</p><p>Tilnel 4:12:08 我说的你100%都想过</p><p>Tilnel 4:13:29 有一个被我复读过114514次的论调，就是嫉妒使人活着（</p><p>Blue 4:15:03 我也不知道 是应该去喜欢听自己听得懂（早已在自己之中）的话呢？ 还是要去努力听自己没想过或者避免去想所以听不懂的话呢</p><p>Blue 4:15:21</p><blockquote><p>Tilnel 4:13:29 有一个被我复读过114514次的论调，就是嫉妒使人活着（</p></blockquote><p>谢谢</p><p>Blue 4:15:49 看来我说的话看上去是陷入存在主义危机了</p><p>Blue 4:16:16 我肯定是会活着的 大可放心</p><p>Tilnel 4:16:27</p><blockquote><p>Blue 4:15:03 我也不知道 是应该去喜欢听自己听得懂（早已在自己之中）的话呢？ 还是要去努力听自己没想过或者避免去想所以听不懂的话呢</p></blockquote><p>感觉没有”应该”</p><p>Blue 4:16:58 因为我认为生死并非是凡人应该决定的</p><p>Tilnel 4:17:31 AB二选一的最优解永远是选C</p><p>Tilnel 4:18:41</p><blockquote><p>Blue 4:16:58 因为我认为生死并非是凡人应该决定的</p></blockquote><p>那我觉得是保留这一选择的能力</p><p>Tilnel 4:19:45 谁让你生，谁又让你死</p><p>Tilnel 4:20:04 通通干掉</p><p>Tilnel 4:20:12 滚！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Blue 0:07:47 我好喜欢半夜在外面乱转啊 完全不想上楼回家&lt;/p&gt;
&lt;p&gt;Tilnel 0:08:18 无数次夜游玄武湖了 回家&amp;#x2F;回宿舍好无聊&lt;/p&gt;
&lt;p&gt;Blue 0:11:05</summary>
        
      
    
    
    
    <category term="喜剧" scheme="https://tilnel.github.io/categories/%E5%96%9C%E5%89%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>中期考核</title>
    <link href="https://tilnel.github.io/20241018-mid/"/>
    <id>https://tilnel.github.io/20241018-mid/</id>
    <published>2024-10-18T07:46:32.000Z</published>
    <updated>2024-10-18T07:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>  在拖延了半个月之后，我终于开工了。也没什么别的原因，主要是因为时间只剩下8个小时了。</p><p><strong>个人陈述（学术创新类）</strong></p><p><strong>（一）</strong> <strong>科研选题的前沿性和独创性</strong>（结合科技前沿和学科领域发展动态，论述选题的研究意义、拟解决的关键科学问题；附相应参考文献）</p><p>科研选题：针对分布式系统实际代码实现的模型检测方法。</p><p>分布式系统运行的过程中往往会出现大量不确定性的因素。在多个节点上运行的进程协同工作，会产生通信、调度上的偶然变化，构造分布式系统的时候往往无法穷举这些情况，程序的异常处理不完善导致系统潜在的崩溃可能。并且在错误发生之后，引发问题的执行路径通常难以还原，导致最终定位不到问题所在。</p><p>面对分布式系统的验证问题，通常的做法是模型检测。模型检测是一种形式化的自动化验证技术，用于验证系统模型是否满足要求。通过将系统的行为建模为一系列状态转换，检查系统的所有可能状态，以确保系统在任何可能状态下都满足特定的属性或规范。如果某个状态违反了规范，模型检测将报错，并提供有关不符合规范的状态的信息，帮助系统设计人员识别和解决问题。</p><p>传统的模型检测是使用 TLA+ 等形式化验证工具对分布式算法进行建模。然而，面对真实而复杂的系统实现，强行使用形式化的方法进行建模则面临着困难的约简：约简过多，则与实际系统偏差越远；约简越少，则状态转换的分支越多，容易出现“状态爆炸”的问题。</p><p>然而，为真实代码构建模型是非常困难的。传统的模型检测通常假设系统设计是在较高层次完成的，并抽象掉了实际实现的许多细节。要验证实际代码需要从代码中重建这些抽象描述，这一过程涉及大量的手工操作，阻碍了模型检测在实际系统中的应用。此外，人为在手动抽象过程中犯的错误可能会导致误报或漏报。这些错误可能发生在模型构建阶段，也可能在系统演变过程中发生。</p><p>为了规避传统模型检测中的模型“漂移”问题，前人也提出了各类方法。CMC 是一个 stateful 的模型检测工具，能够对 C 代码直接进行模型检测，被用于检测网络协议和文件系统（FiSC）。但是 CMC 的检测需要侵入式地修改源程序代码，以使得被测程序运行在 CMC 的地址空间内。同时，它要求被测系统具有明显的事件驱动的特征，并不能适应更广泛的实际系统实现的需求。</p><p>MaceMC 使用深度优先搜索和随机行走来检测网络协议实现中的 liveness 问题，但是被测系统限定于使用 Mace 语言生成的 C&#x2F;C++ 实现。Yabandeh 等人基于 MaceMC 提出的 CrystalBall 中增加了 Steering Execution，在运行的过程中分析未来的错误状态，并通过控制执行来避免走入错误状态。</p><p>Junfeng Yang 等人提出了 eXplode 对文件系统进行穷举式的测试。后提出了一个在 Windows 上对实现级的分布式系统进行透明的模型检验的 MoDist 框架。但是由于商业原因，并未开源其实现。</p><p>为了弥补这些方法的不足，我的科研选题是提出一种通过系统调用截停的方式，不侵入性地修改代码而操纵实际实现的分布式系统执行，以达到对分布式系统的实际代码实现进行模型检测的方法。由于直接从系统调用层面进行操作，因而不需要进行代码插桩操作，并且对于被测系统的要求较为宽松，适应面更广。</p><p><strong>（二）</strong> <strong>代表性成果的理论、方法或技术创新亮点</strong>（重点阐述研究生个人取得的代表性成果的创新性、引用和评价情况、国内外获奖情况等）</p><p>对于选题“针对分布式系统实际代码实现的模型检测方法”，个人已经开发了一套测试框架，代码量约 4000 行。目前应用于 Raft 共识协议的 C 语言实现的验证上，已经证明了其有效性。</p><p>1、工作简介</p><p>计算机中的一个进程所作的事情无非是两件事情，一部分是图灵机一样的确定性的计算，另一部分是通过系统调用与外部世界进行交互。系统调用是单一进程的全部不确定性的来源。对于分布式系统而言，我们将其由于进程间执行的先后顺序造成的执行结果差异称为调度不确定性；将进程受系统调用结果变化造成的差异称为环境不确定性。由此，我们只需要控制好分布式系统运行中的每一个不确定性，并且对于状态做相应的管理，就可以任意地探索分布式系统执行的状态空间。</p><p>因而，为了实现这样的框架，我们必须解决的问题有：</p><ul><li>如何完整地保存进程状态，并且在需要的时候将保存下来的状态恢复成运行中的进程？进而实现整个分布式系统的状态快照保存恢复。</li><li>如何自由地控制分布式系统中的各个不确定性，以实现对执行路径的完全操控？</li><li>如何从分布式系统的实际实现中提取其需要的不确定性，如由随机数&#x2F;时钟超时决定的不同操作？</li><li>如何对分布式系统的状态合法性进行检查？</li></ul><p>2、技术路线</p><p>Linux 中的 ptrace 系统调用提供了对于进程的观察以及控制执行的能力。</p><p>对于测试框架，我的最终实现形式类似于 gdb。一个控制进程（下称 tracer）和多个被控进程（下称 tracee）组成。tracee 为设定好的被测程序，由 tracer 创建新进程并启动被测程序，根据分布式系统的需要，传递节点信息等各自不同的参数。通过 ptrace 系统调用对多个 tracee 进程施加控制，统一运行到有意义的用户代码之前， 作为分布式系统的初始状态。</p><p>此时，每一个进程都停止在一个系统调用之前。由 tracer 将所有进程的状态储存下来，包括每个进程的：1、内存地址映射；2、可读写的内存地址空间（堆、栈、数据段等） 3、文件描述符表。并保存所有的环境状态，包括每个进程占用的文件和网络中滞留的数据包等。</p><p>以此作为初始状态，分别对每一个 tracee，通过 ptrace 控制其执行一个系统调用后保存新的状态，并恢复旧的状态，最后将初始状态标记为“已遍历”并存盘。对新产生的状态继续执行上述操作。如此即可搜索分布式系统运行中产生的所有可能状态。</p><p>新的状态产生后，通过 dwarf 调试信息，提取其进程地址空间中与分布式系统状态相关的变量的值，验证分布式系统的状态断言是否满足，并报告给测试人员。</p><p>3、验证分析</p><p>框架最初成型时，我将测试框架应用于 Bakery 锁算法的经典错误写法，能检测出其中错误，验证了技术路线的可行性。经过完善后，将其用于某开源的 C 语言 Raft 共识协议实现，复现了已有工作检测到的多项 bug，证明这项技术对于实际生产应用中的系统是具有检测能力的。</p><p><strong>（三）</strong> <strong>其它研究成果</strong>（除上述学术创新成果外，简要阐述研究生个人在面向国家需求的自主原创系统研发，或产生实际经济社会效益的应用转化方面作出的贡献，如无可不填）</p><p>研究生期间，本人持续对 C 语言程序设计课程的在线评测系统进行开发与维护，支撑了 2023 与 2024 级技术科学实验班与软件学院新生的教学工作（每级约800人）。同时保障了 2024 年软件学院保研夏令营、2024年南京大学计算机学科体验专题营的机试系统正常运行。</p><h3 id="1-2-ptrace-简介"><a href="#1-2-ptrace-简介" class="headerlink" title="1.2 ptrace 简介"></a>1.2 ptrace 简介</h3><p>ptrace 是 Linux 内核提供的进程跟踪的系统调用，它允许父进程检查和替换子进程的内核镜像（包括寄存器）的值。</p><p>子进程调用 ptrace(PTRACE_TRACEME) 且父进程调用 ptrace(PTRACE_SEIZE) 后，父进程即可对子进程的执行进行控制：在子进程进行系统调用前或系统调用返回后停止；获取子进程系统调用信息；读写子进程内存和寄存器的值；模拟系统调用执行等。通过几种基本操作，能够实现程序的确定性执行。</p><h2 id="2-系统设计"><a href="#2-系统设计" class="headerlink" title="2 系统设计"></a>2 系统设计</h2><p>单线程程序从一个特定的状态出发，其状态转换分为两类。一是进行系统调用，对操作系统对象进行创建、删除、读写；二是系统调用以外的运算逻辑。对于第二类而言，其代表的状态转换是确定性的，即给定进程状态和代码，执行代码达到的目标状态是唯一确定的；对于第一类而言，则状态转换还要取决于操作系统对象的状态。比如同样执行 read() 系统调用，如果文件的内容正同时被其他进程改变，则产生的结果不确定。</p><p>在多线程程序以及分布式系统中，由于其由多个独立执行的程序组成，因而其执行路径还受到各执行流之间的调度的影响。 </p><p>因此，为了对分布式系统进行模型检验，首先需要穷尽系统调用的可能结果；同时穷尽系统所有节点的各操作执行的先后顺序。</p><h3 id="2-1-整体框架"><a href="#2-1-整体框架" class="headerlink" title="2.1 整体框架"></a>2.1 整体框架</h3><p>对于 n 个节点的分布式系统，我们用 n + 1 个进程进行整个系统的操控执行：</p><ul><li>一个 tracer 进程，用以控制所有的进程</li><li>n 个 tracee 节点进程，即受控运行的分布式系统</li></ul><p>以 3 个节点为例，对于一个运行中的分布式系统，其状态为 $S&#x3D; &lt;Env, Node1, Node2, Node3&gt;$，其中：</p><p>$Node$N$ 代表节点的状态，包括节点的堆、栈、寄存器。</p><p>$Env$ 代表节点之外的环境，包括被节点使用的操作系统对象的状态，如网络消息，系统时间，打开的文件等。</p><p>在分布式系统执行的过程中，能够引发状态不确定性的分歧操作包括：消息的先后顺序，消息是否到达，以及消息等待是否超时。</p><p>tracer 进程每次从一个状态 $S$ 开始控制其中一个节点，运行到下一个分歧操作前，即：消息发送前，消息接受前，以及请求系统时间之前。之后对于每一个节点，都由 Choose() 函数根据运行时的上下文决定下一个分歧操作可能的状态转换集合$Transfer$，且对于每一种可能性 $t \in Transfer$，生成如下的“转换边”：  $(Node$N.t(), &lt;Env, Node1, Node2, Node3)&gt;)$ </p><p>它表示，状态的下一次转换从状态四元组出发，通过 $Node$N$ 执行 $p()$ 所代表的转换可达到下一个状态：</p><p>$(Node$1.p(), &lt;Env, Node1, Node2, Node3)&gt;)\rightarrow &lt;Env’, Node1’, Node2, Node3)&gt;$ </p><p>$(Node$2.p(), &lt;Env, Node1, Node2, Node3)&gt;)\rightarrow &lt;Env’’, Node1, Node2’, Node3)&gt;$ </p><p>$(Node$3.p(), &lt;Env, Node1, Node2, Node3)&gt;)\rightarrow &lt;Env’’’, Node1, Node2, Node3’)&gt;$ </p><p>总的工作流程是：设置一个状态转换边的队列；每一次从中取出一条边并执行达到新的状态，在新的状态的基础上，生成新的转换边并入队。</p><p>对于 DMCK 的实现有两种，一种是 stateful，即通过保存和恢复节点的内存、寄存器等信息来重现状态；一种是 stateless，通过重放记录的执行路径来重现状态。我们的工作主要是 stateful 的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">S = &lt;Env, Node1, Node2, Node3&gt;</span><br><span class="line"></span><br><span class="line">q.add(Edge(skip, S))</span><br><span class="line">while (!q.empty()) &#123;</span><br><span class="line">    edge = q.deque()</span><br><span class="line">    S&#x27; = edge.transfer()</span><br><span class="line">    forall (node in Nodes) &#123;</span><br><span class="line">        // 只根据 node 的状态就可以算出当前执行上下文了</span><br><span class="line">    Transfers = Choose(node)    </span><br><span class="line">    forall (t in Transfers) &#123;</span><br><span class="line">    q.add(Edge(t, S&#x27;))</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def transfer(edge) &#123;</span><br><span class="line">S = edge.getState()</span><br><span class="line">t = edge.getTransfer()</span><br><span class="line">node = t.getNode()</span><br><span class="line">nodeState = S.getNodeState(node)</span><br><span class="line">nodeState.t()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>- </p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;  在拖延了半个月之后，我终于开工了。也没什么别的原因，主要是因为时间只剩下8个小时了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人陈述（学术创新类）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（一）&lt;/strong&gt;</summary>
        
      
    
    
    
    <category term="科研" scheme="https://tilnel.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>应该忘记什么</title>
    <link href="https://tilnel.github.io/20241018-wasureta/"/>
    <id>https://tilnel.github.io/20241018-wasureta/</id>
    <published>2024-10-17T21:49:14.000Z</published>
    <updated>2024-10-17T21:49:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>我记得的东西太多了。负担太多了。也许应该忘记一些事情。</p><p>曾经我认为，往事就算想忘记也是无法忘记的，说忘记只是自欺欺人。因而并不需要做这样的努力，只要不去想就好了。就像一个伤口你告诉自己不要去摸但是最后还是经常去摸一样。</p><p>这样度过了很久很久。我以为这就是万全的方法。</p><p>现在，似乎应该去做一点“蒸馏”。虽然我觉得很多事情就是会记一辈子，客观上记这些东西只会害了我。但是似乎还是有办法能淡忘。大概就是决定去忘记。。。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我记得的东西太多了。负担太多了。也许应该忘记一些事情。&lt;/p&gt;
&lt;p&gt;曾经我认为，往事就算想忘记也是无法忘记的，说忘记只是自欺欺人。因而并不需要做这样的努力，只要不去想就好了。就像一个伤口你告诉自己不要去摸但是最后还是经常去摸一样。&lt;/p&gt;
&lt;p&gt;这样度过了很久很久。我以为</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>什么时候才能长大呢</title>
    <link href="https://tilnel.github.io/20241017-shiriai/"/>
    <id>https://tilnel.github.io/20241017-shiriai/</id>
    <published>2024-10-16T19:33:48.000Z</published>
    <updated>2024-10-16T19:33:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>熬夜的原因找到了。一躺上床就只有负面的心情，所以不愿意躺上床，就会拖；好不容易躺下了，脑子里面就是那些事翻过来倒过去。</p><p>晚上聊天有一个说得很好。高中给那个还是傻小子的我带来的确实是快乐。但是想明白了很多事情之后再回味，其实并不是什么好地方，也并没有发生什么好事，只会觉得各种不是滋味。</p><p>获得的教训是千万不要没事翻旧相识的朋友圈。那都是比起我而言更配得上幸福的人，为什么非要自讨苦吃呢。。。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;熬夜的原因找到了。一躺上床就只有负面的心情，所以不愿意躺上床，就会拖；好不容易躺下了，脑子里面就是那些事翻过来倒过去。&lt;/p&gt;
&lt;p&gt;晚上聊天有一个说得很好。高中给那个还是傻小子的我带来的确实是快乐。但是想明白了很多事情之后再回味，其实并不是什么好地方，也并没有发生什么好事</summary>
        
      
    
    
    
    <category term="情感" scheme="https://tilnel.github.io/categories/%E6%83%85%E6%84%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>不要承认那个名字</title>
    <link href="https://tilnel.github.io/20241009-cite/"/>
    <id>https://tilnel.github.io/20241009-cite/</id>
    <published>2024-10-09T15:12:37.000Z</published>
    <updated>2024-10-09T15:12:37.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>忘了是从哪里抄的了，应该是今年上半年抄的。总之原文写得很好，拿来用用</p></blockquote><blockquote><p>谁规定人不能畏怯敏锐，不能沉郁昂扬？那正是我的疾病，也是我的天赋；是我的宝藏，也是我的残缺。</p></blockquote><p>fine，我承认，用一种有名有姓的病症来定义生活十分诱人——它可以解释我的一切疑虑：嘴角上扬，是躁狂症发作；眼泪决堤，则是抑郁作祟。如果做错事情，那千万不会是我的问题——看嘛，那些行为可是清清白白地写在医学论文里。</p><p>这诱人的定义将现代医学移情为一种神学意识形态：化验单便是赎罪券，同无力改变的人们一起，求助于圣母、耶稣、佛祖、科学……什么都好，什么都不重要，因为错误已经被忏悔，可以心安理得地原谅自己。</p><p>福柯在《疯癫与文明》里讲，正常与不正常，本就是被话语与文化界定，是一种社会建构的概念，是社会空间中的一个知觉对象。况且，现代医学本身也还没搞明白双相的成因——只是狡猾地用「十分可能」「也许」来假定一种缺陷遗传基因或脑部病变。</p><p>&lt;后面或许有，但是我只抄到了这里&gt;</p><p>update: 我找到原文了</p><p><a href="https://coink.wang/bipolar-disorder.html">疯癫絮语 | Coink DO BOOM!</a></p><p>我不想把药物治疗当作阿鼻地狱里唯一的那根蛛丝。诺洛西汀、碳酸锂的确能够帮助患者社会意义上地「恢复正常」。但，病毒可以由刻意转录的药剂杀灭，心境稳定剂只是堪堪钝化人的感官。我知道它有效，只是我现在用不着。</p><p>谁规定人不能畏怯敏锐，不能沉郁昂扬？</p><p>「那正是我的疾病也是我的天赋，是我的宝藏也是我的残缺」(蒙马特遗书)</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;忘了是从哪里抄的了，应该是今年上半年抄的。总之原文写得很好，拿来用用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;谁规定人不能畏怯敏锐，不能沉郁昂扬？那正是我的疾病，也是我的天赋；是我的宝藏，也是我的残缺。&lt;/p&gt;
&lt;/bl</summary>
        
      
    
    
    
    <category term="哲学" scheme="https://tilnel.github.io/categories/%E5%93%B2%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>这下看懂了</title>
    <link href="https://tilnel.github.io/20241002-yarareta/"/>
    <id>https://tilnel.github.io/20241002-yarareta/</id>
    <published>2024-10-02T07:00:00.000Z</published>
    <updated>2024-10-02T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>早上起来随手翻了翻斯嘉丽的小号，很多当时没看懂的东西现在看懂了。总之足以说明她在这方面并不算纯粹，或者说“朴素的善良”。可能我以前真的疏于了解吧。</p><p>卧床不起的心情一定不是很好；下来走走，然后稍微收拾一下就是另一种精神面貌。所谓的总结研究并没有开始进行，因为好累。我怕累，所以一直在这里写着，这是一种延宕。</p><p>其实写这些就是为了拖拖时间罢了，我自己也知道。不想立刻投身到新的节奏当中去。也许是那种「野草」式的自恋。</p><p>“感觉”这种事真是捉摸不定，但我也没有任何必要、任何义务对其进行预判。或者说那是一件纯粹存活于当下的物质——物质所创建出的一种临时性。</p><p>我也许需要适当地发一点精神病。只要对碎碎念这种事情脱敏，也就会对那种“精神病”式地发言脱敏。那才是我能无障碍地言说的时刻。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;早上起来随手翻了翻斯嘉丽的小号，很多当时没看懂的东西现在看懂了。总之足以说明她在这方面并不算纯粹，或者说“朴素的善良”。可能我以前真的疏于了解吧。&lt;/p&gt;
&lt;p&gt;卧床不起的心情一定不是很好；下来走走，然后稍微收拾一下就是另一种精神面貌。所谓的总结研究并没有开始进行，因为好累</summary>
        
      
    
    
    
    <category term="情感" scheme="https://tilnel.github.io/categories/%E6%83%85%E6%84%9F/"/>
    
    
  </entry>
  
</feed>
