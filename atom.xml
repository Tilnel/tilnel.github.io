<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tilnel&#39;s Blog</title>
  <icon>https://tilnel.github.io/icon.png</icon>
  <subtitle>我们坐在一起，一整晚，一动不动</subtitle>
  <link href="https://tilnel.github.io/atom.xml" rel="self"/>
  
  <link href="https://tilnel.github.io/"/>
  <updated>2099-12-31T15:59:59.000Z</updated>
  <id>https://tilnel.github.io/</id>
  
  <author>
    <name>Tilnel</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>序</title>
    <link href="https://tilnel.github.io/20991231-top/"/>
    <id>https://tilnel.github.io/20991231-top/</id>
    <published>2099-12-31T15:59:59.000Z</published>
    <updated>2099-12-31T15:59:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近来看的人变多了，正好随手调整一下内容。</p><p>人无法对他写下的文字完全忠实。事实上我最近在录入以前的手写稿时，也有大量删改。19-22的册子看起来写了不少，但最终进入到这里的只有寥寥几篇：写的时候完全不讲究，事后自己去读的时候只有捂脸。这也算我本人这一时期的特色了。然而我还是希望“尽量忠实”，尤其是最近一年我觉得我在这方面做得不错。23年8月-24年7月的手写部分，除了一些涉及他人隐私的地方我不得不使用代号以外我几乎是原封不动地录入了。有可能是因为距离现在的我并不遥远所以我对这些文字大体上满意。</p><p>随手浏览一下文章列表，偶然会有几个月的沉寂期。19年以前的部分在考虑补，高中写的东西的确不少；20春-22春夏我的个人生活几乎是停滞的，因为那段时间包含了我状态最差的时候，最繁忙的时候，以及最无所事事的时候，所以就连纸质日记也没有几篇。仔细想来，爆发期其实就是22年秋冬的一段dramatic的感情，之后几乎每个月都有思考和记录。</p><p>介绍完博客的概况，该介绍一下自己了。如你所见这里有很多计算机相关的内容，偶尔也谈点哲学。然而相比于理性世界，我更在乎感性直观的冲击：视觉、味觉、嗅觉、听觉。所以正在努力成为味觉与嗅觉的美学家，从一个调酒师开始，探索饮品的各种可能。其他的成分只要再略读一两篇文字就明了了。</p><p>那么，如果您看到喜欢的文字并且愿意，可以在社交媒体上联系我（评论区并不会及时通知到我个人），这些反馈都会对我有很大帮助。</p><p>Tilnel 2024-10-23 06:42:15</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近来看的人变多了，正好随手调整一下内容。&lt;/p&gt;
&lt;p&gt;人无法对他写下的文字完全忠实。事实上我最近在录入以前的手写稿时，也有大量删改。19-22的册子看起来写了不少，但最终进入到这里的只有寥寥几篇：写的时候完全不讲究，事后自己去读的时候只有捂脸。这也算我本人这一时期的特色</summary>
        
      
    
    
    
    <category term="日常" scheme="https://tilnel.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>骨折后那些没人告诉你的事</title>
    <link href="https://tilnel.github.io/20250209-fracture/"/>
    <id>https://tilnel.github.io/20250209-fracture/</id>
    <published>2025-02-09T08:00:00.000Z</published>
    <updated>2025-02-09T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我是右腿胫腓骨骨折。本文仅讨论下肢骨折，骨盆、上肢、肋骨骨折及脊椎病患者不适合参考。</p><p>做手术前医生大概会问要不要镇痛泵，就是自动给你定时止痛药的装置。理论上是可选，但其实必选，尤其怕痛体质。医生没说，要主动问医生，如果医院里没有那算你倒霉。主要做完手术有疼痛会影响休息。博主相对耐痛，也还是用了，术后几天都没任何痛感。</p><p>初期卧床的阶段，吃饭时吃饭后上半身能抬高尽量抬高。平时时不时也要起身，可以不太久。老是躺着会便秘，别说吃乳果糖，你吃华莱士都不管用。便盆是废物一个，谁用谁知道。</p><p>也不要想着不方便就憋。大肠把水一重吸收，就更难排了。</p><p>做牵引、安排牵引床也许是件好事。你会拥有结实的钢架子和拉手用于起身，甚至上半身可以直立，对排遗很有用。没牵引没这装备。</p><p>关节活动要趁早，医生不说你要问。术后一天，有条件并经医生批准，要努力进行屈膝，足背屈（勾脚），跖屈（绷脚）的练习，谨防筋膜粘连，关节硬化。屈膝一开始有点疼，需要慢慢地增加角度。一个月内，大小腿完全折叠为佳。我隔壁床做前十字韧带重建，第二天康复师进来照着腿就是掰，屈膝过90度为止，疼得龇牙咧嘴。</p><p>早练早活动。晚了，关节硬了，你就糟老罪了。<br>早期可能伸膝有点受限属正常。</p><p>手术后局部血管未重建，腿部淤血，大片深红摸着稍微有点疼，属正常。等待血管重新生长后会慢慢消解，此时血供也恢复好了。</p><p>有条件者，上厕所坐马桶。能坐马桶了，心态会变好。能安全地独自做什么事了，都要尝试去做。</p><p>在家这担心那担心，一定记得把平时小问题记下来，复查问医生。省得看了医生又忘掉了。</p><p>大约两个月的时候记得问医生脚能否触地，以及占体重比例，省得脚下没轻没重影响恢复，或者应力刺激不够恢复速度慢。</p><p>胫腓骨骨折，对于腓骨断点在骨干的，可能只做胫骨不管腓骨，这是较为普遍的临床实践，到积水潭医院那也是这么做。有时近端更是不管，因为神经密集。腓骨愈合慢不太影响整体恢复。但腓骨远端到外踝这里的骨折，由于可能影响踝关节活动，一般会干预。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;我是右腿胫腓骨骨折。本文仅讨论下肢骨折，骨盆、上肢、肋骨骨折及脊椎病患者不适合参考。&lt;/p&gt;
&lt;p&gt;做手术前医生大概会问要不要镇痛泵，就是自动给你定时止痛药的装置。理论上是可选，但其实必选，尤其怕痛体质。医生没说，要主动问医生，如果医院里没有那算你倒霉。主要做完手术有疼痛会</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Ave Mujica 的未来 - 第五话后评</title>
    <link href="https://tilnel.github.io/20250206-mujica/"/>
    <id>https://tilnel.github.io/20250206-mujica/</id>
    <published>2025-02-06T13:00:00.000Z</published>
    <updated>2025-02-06T13:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>第五话的问题究竟在哪？单拎一话其实它的观感是不差的，但评分骤降到8.8（事实上B站的大手已经锁分了）表明了一种看空。</p><p>前四话在不断的爆发中揭露了许多队内矛盾，第五话的任务是在前四话紧锣密鼓高信息密度的轰炸之后放缓节奏，承上启下。在炸团已经确定的情况下，对于团队成员的状态以穿插的方式进行叙述。当然要明确目前的主要矛盾在于 Ave Mujica 重组的必然结果和当下团队成员动机不足、责任心不足的矛盾。因而刻画方向应当在于，老成员们不得不回归的理由，以及回归后拥有让队伍发展向好的能力。</p><p>目前第五话对人物积极面刻画不足。大众视角看祥子的人物形象已经跌落谷底。当然也有处理好的部分，比如沉默整集的祥子唯一一句话轻声破防中展现的人物弧光。但更多的信息是负面的——若叶睦闭门不出，祥子不关心睦，也不回初华的消息，正照应 MyGO!!!!! 第13话 Ave Mujica 的短剧中，Doloris 被抛弃而 Mortis 不被爱着。她们都被 Oblivionis 所遗忘。</p><p>B站动漫区头部的相对悲观情绪是在说，剩下的8话篇幅不够，无法以优美的方式和适当的节奏展开对 Ave Mujica 五人的救赎可能产生两种问题，一是节奏急迫，忽视观感；二是逻辑不严谨，强行推进。由此，也可以说第五话的问题就在于它是一季13话而不是16话、20话。祥子作为队魂，是开启 Ave Mujica 复活之路的最关键人物，在这样的重要节点，人物形象依旧在总体下滑。</p><p>也有乐观派，观点大约有几点：1、没完结不要着急下定论 2、人物塑造在进行 3、角色不是圣人，她不闹我看什么？</p><p>两方实际的不同是对待作品立场不同。Ave Mujica 是要成为一个剧情流畅、处处合理、大众的理解度高的故事？还是要成为一个小众解读、卖爆点的故事？</p><p>用一个比喻即可阐明：Ave Mujica 的发展如同棋局。</p><p>再聪明的棋手，在行棋过程中也有可能打出漏勺。你最终可能会赢，也许这个漏勺将棋局推向了较为激烈精彩的局势，但漏勺就是漏勺，棋谱会记得，胜率会下降，你在那个地方总是有一个更好的选择。Ave Mujica 就是这样一盘棋：漏勺已经打了；精彩也的确精彩。获得了讨论度，也有乐子和高光，但精彩的故事大纲和部分人物闪光之外，也有演出发挥失常和逻辑断裂。</p><p>Ave Mujica 的漏洞包括：</p><p>1、来自经纪公司的现实的重压只在炸团后出现。摘面具不担责，日常工作不见人辅助，赔款的时候人来了。</p><p>2、所有的吵架戏通通给人一种感觉：“怎么突然开始说这个了？”团队立身之本的争论犹如儿戏。</p><p>3、高高抬起，轻轻落下。结尾形势紧张，下一话告诉你危机平稳度过，怎么解决的不给你看。第四话炸团结尾尤甚，整个团队在起爆之后瞬间达成开幕即解散的共识。观众是信你按下不表呢？还是应该认为你没能力圆上这个情节呢？</p><p>4、在团队起爆之前，没有为成员归队准备台阶&#x2F;伏笔。那么势必在后续剧情交代，这搞不好就会变成追加设定，强行解释，以及机械降神。</p><p>所以不怪现在有假药。总是说假药看多了，擅自期待，擅自破防。大伙为什么都这么好奇剧情，因为是真的想不到怎么圆。诸多分析向假药都在试图圆上剧情逻辑，是一种无奈之举。</p><p>当厨师端给你一道看上去像宫保鸡丁的菜的时候，你吃了一口顿感味道不对，是否厨师也应该告诉你，“你不要擅自期待这道菜的味道然后擅自破防”？</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;第五话的问题究竟在哪？单拎一话其实它的观感是不差的，但评分骤降到8.8（事实上B站的大手已经锁分了）表明了一种看空。&lt;/p&gt;
&lt;p&gt;前四话在不断的爆发中揭露了许多队内矛盾，第五话的任务是在前四话紧锣密鼓高信息密度的轰炸之后放缓节奏，承上启下。在炸团已经确定的情况下，对于团队</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>哪来那么多长期主义</title>
    <link href="https://tilnel.github.io/20241128-longtermism/"/>
    <id>https://tilnel.github.io/20241128-longtermism/</id>
    <published>2024-11-28T10:59:15.000Z</published>
    <updated>2024-11-28T10:59:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1kABYYeE19">最近哪来的那么多长期主义开箱</a></p><blockquote><p> 我们能否在购买之前就意识到这是一件“长期主义单品”，并在之后的日子里坚持一开始的认知？</p></blockquote><p>个人现役服装中服役时间最久的是一件商场买的肯宁顿风衣（但是1k6且聚酯），品牌也是已经从中国退市一年的SELECTED(听起来是很没品的名字)。但是它可以说是建立了我对风衣这种商品形态的认知，那就是——几乎怎么穿也不应该看到明显起皱的长外套。当然从此我和嘎巴甸（华达呢）这种面料就无缘了。那么最喜欢做这种面料的其实是—-Burberry。到底是谁在喜欢这么难打理的面料？并且一般支数还会比较高，这样容易反光，起皱就更明显了。</p><p>到今年满打满算买到手已经4年了。但是我今年穿这件衣服应该比我前3年加起来都要多。我也不知道为什么把它放在衣柜里躺尸，主要的原因还是以前自己在穿衣这方面克扣自己太多了，几乎没怎么买过衣服——因此我其实没有其他的衣服来搭它。这就很要命。</p><p>当然另一个原因是我以前觉得这样穿太奇怪了。似乎当时还是 cityboy 版本——没事，现在也是。为什么能把这件衣服想起来也要赖它。大概是说ex给我推了几家淘宝店，都是这种风格。后来分手了，连带着这种风格一起不喜欢了。</p><p>以上只是戏言。正经地说，我还是觉得 cityboy 太典了。虽然我自己也买了一两件这种风格的 teeshirt。这种风格差不多就是满大街的底特律517这种，初看觉得这个穿得挺好的。然后看到所有人都在穿像个NPC，就绷不住了。</p><p>当然以我调酒师的身份，最容易走的路线其实还是轻熟，几乎是顺理成章的，不容置疑的。跑题了。</p><blockquote><p>当初觉得帅的东西穿久了或者见识广了也就那回事，反而是随手买的成为了美好的误会。实际上不能长期又能怎么样呢？我当下这一刻的满足是真实的。它短时间内依然能带给我足够的价值。我并不认为我的购物没能长期就失败了。</p></blockquote><blockquote><p>只有拥有了自己的风格，才有所谓的长期主义。时尚一直是来来回回的。</p></blockquote><p>OOTD：大逆不道的西服内穿塞进裤子并外穿开衫毛衣，再把驳头翻到外面。最后把衬衫领翻到驳头外面。（？？？）</p><p>南极人卖的内搭德绒Tee比平圆方中的纯棉款舒适度上好几个层次。虽然不见得是粘纤的原教旨德绒就是了。</p><p>——这样我就可以假装自己在9度的天只穿了3件而且还不觉得冷。主要是领口多了一层，整个保温最薄弱的一环解决了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1kABYYeE19&quot;&gt;最近哪来的那么多长期主义开箱&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;</summary>
        
      
    
    
    
    <category term="时尚" scheme="https://tilnel.github.io/categories/%E6%97%B6%E5%B0%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>【自用】杂项</title>
    <link href="https://tilnel.github.io/20241127-misc/"/>
    <id>https://tilnel.github.io/20241127-misc/</id>
    <published>2024-11-27T14:02:14.000Z</published>
    <updated>2024-11-27T14:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3a846b429e2c41302ce90a4bbfa1690b07f85a82343e66f404b7a6a9c6059e6e">680953028ddd47d9bc33f1e3c96e3f1f5e5c7e34231229e943681291ffab92c8749268f0964a83468d040c412125fa6d384e49db682778d75d02e70c614d5aa016d305904f5cbec93baa5d0dca7b9c570729e2510e59ba26ea54324ae433cab84c317a347544adffd220edecab3eba88dbbe6fd8da059a8a09f406028fdb000b0d611d5cdcfe5bcc063bbdcfda35b8b6b56cfc8ad58acb88c9023955c386f2aec6dffad1a0e5f6b1a1f06c09764496444f5b2c89eb89e9a4a272e3842512fbb14281b9db77b8c1917ebcfcea637e400cda77c4befda04271a90c80bc253393a83cdedb96adcfcd3dbe8e1ce8572d30eae14afaeb4127388b7bb253445198f3965a0cbc7b6c557fd22936615ff315d7b4075a6a015936bdd37730ae7b58cf9826341c130b0b154eb546c5492dd0312042bcb173648a144bde822282a44871cf187ab0a25b2c9190be18b0c6df73bccc6b7e2ecddae3ffa1bd4a521aa3d1fb17ed900dd0f98f2dccd9b1bfbabc4ec48380fee624da1addb429c7a4f22555900f4d30d73e31893d7a70853d315a9c021ba720bfaa892c1ad31f37a47b87a45508c743148f29ff29a2ee59c5f38921de34da123392b7b4b81932e116181039b045d37c5e247a3fd77d6497ebf6fc68a01cbb75692c713b838483a8a6cb332720042ac45bd480f121810a564dd25f2eabc054645f7ffae849f5c508a51f4f8286f9ce9ecc1e0136df0ee5c7bb377764d50f467c90e8c60573c5e0a05a999944539989</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>都 2024 年了你的穿搭还能反映你自己吗</title>
    <link href="https://tilnel.github.io/20241127-wtfyouwear/"/>
    <id>https://tilnel.github.io/20241127-wtfyouwear/</id>
    <published>2024-11-27T06:20:11.000Z</published>
    <updated>2024-11-27T06:20:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>刷了一个非常好玩的 <a href="https://www.bilibili.com/video/BV1oLUkYkEWn">B 站视频</a></p><p>顺手贴一下最近其他比较喜欢的视频列表</p><p><a href="https://www.bilibili.com/video/BV1kABYYeE19">最近哪来的那么多长期主义开箱</a></p><p><a href="https://www.bilibili.com/video/BV16ZU2Y8E5R">小伙连着穿了一周的Rick Owens Kiss Boots，这是他精神发生的变化</a></p><p><a href="https://www.bilibili.com/video/BV14z4y1T7qo">2023十大潮流烂活！｜老钱风、美拉德穿搭、cleanfit、芭蕾风…令人满头问号的时尚？</a></p><p><a href="https://www.bilibili.com/video/BV1WE411n71Y">Lemaire 2020FW</a></p><p>跑个题：<a href="https://www.bilibili.com/video/BV1vEDeYxEU1">齐泽克的简单友谊测试 原作者：Julian Cinema &amp; Philosophy</a></p><p><img src="image-20241127142033289.png" alt="image-20241127142033289"></p><blockquote><p>Working out is modern couture (高定). No outfit is going to make you look or feel as good as having a fit body. Buy less clothing and go to the gym instead. –Rick Owens</p></blockquote><p><img src="image-20241127142716116.png" alt="image-20241127142716116"></p><p><img src="image-20241127142730449.png" alt="image-20241127142730449"></p><blockquote><p>如今，有什么是不能从海鲜市场轻易淘来的呢？</p></blockquote><p><img src="image-20241127142808959.png" alt="image-20241127142808959"></p><p><a href="https://www.bilibili.com/video/BV1ArU7YSEiC">Loewe 2025SS</a></p><p>诡异的 BGM</p><p>大量裙撑（甚至风衣），宽大袖口，各种斗篷、各种印制、各种半透明，大量印花</p><p>少量未来主义</p><p>又见羽毛印花T恤</p><p><img src="image-20241127160615791.png" alt="image-20241127160615791"></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;刷了一个非常好玩的 &lt;a href=&quot;https://www.bilibili.com/video/BV1oLUkYkEWn&quot;&gt;B 站视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;顺手贴一下最近其他比较喜欢的视频列表&lt;/p&gt;
&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="时尚" scheme="https://tilnel.github.io/categories/%E6%97%B6%E5%B0%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="https://tilnel.github.io/20241125-working/"/>
    <id>https://tilnel.github.io/20241125-working/</id>
    <published>2024-11-25T11:47:50.000Z</published>
    <updated>2024-11-25T11:47:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先来看一个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">print_stack</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">void</span> *buffer[BT_BUF_SIZE];</span><br><span class="line">  <span class="type">int</span> nptrs = backtrace(buffer, BT_BUF_SIZE);</span><br><span class="line">  <span class="type">char</span> **strings = backtrace_symbols(buffer, nptrs);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!strings) &#123;</span><br><span class="line">    perror(<span class="string">&quot;backtrace_symbols&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; nptrs; j++)</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strings[j]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(strings);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="image-20241125195032520.png" alt="效果" style="zoom: 67%;"><p>打不出调用栈当中的大多数函数名。这主要是因为编译时没有添加 -rdynamic 参数。</p><img src="image-20241125195158300.png" alt="效果2" style="zoom:67%;"><p>添加之后，就可以有了。这样搞我们就可以省得用 gdb 去调试调试器了。</p><p>打算在项目里引用一些 Log4j 之类的库。想做日志分级。日志里面细的东西实在是太细了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;首先来看一个函数&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="科研" scheme="https://tilnel.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>Crazy Saturday</title>
    <link href="https://tilnel.github.io/20241125-record/"/>
    <id>https://tilnel.github.io/20241125-record/</id>
    <published>2024-11-25T11:26:05.000Z</published>
    <updated>2024-11-25T11:26:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在周五夜里唱唱是我这周末做的最错误的决定。 ——typoverflow</p></blockquote><p>周五晚上，大家都叫着要唱，于是这局真成了。这次唱到4点51，吃了和上一次同一家的早餐，搭乘地铁2号线的第二班车回到仙林校区。随后有一分队在824打雀魂直到早上8点多，才各奔东南西北。</p><p>一觉醒来是7点多，本来打算问问吃什么的，说是重庆面馆。但这时候第二场来问了。于是在没有吃饭的情况下前往酒吧。</p><p>我居然能在一个小时里完成洗澡夹头发再画一个白开水的操作，果然人的潜能都是被逼出来的。</p><p>喝两点去唱，唱到四点半打道回府。感觉周一就算起得来也绝非人类了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在周五夜里唱唱是我这周末做的最错误的决定。</summary>
        
      
    
    
    
    <category term="日常" scheme="https://tilnel.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>随便写点</title>
    <link href="https://tilnel.github.io/20241120-misc/"/>
    <id>https://tilnel.github.io/20241120-misc/</id>
    <published>2024-11-20T07:25:03.000Z</published>
    <updated>2024-11-20T07:25:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>感觉一直在做数独。不能再这样了。</p><hr>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;感觉一直在做数独。不能再这样了。&lt;/p&gt;
&lt;hr&gt;
</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>不抽烟了</title>
    <link href="https://tilnel.github.io/20241116-nosmoking/"/>
    <id>https://tilnel.github.io/20241116-nosmoking/</id>
    <published>2024-11-16T11:44:57.000Z</published>
    <updated>2024-11-16T11:44:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>走来计科楼的路上，我想着最近大概足够幸福了，可以不抽烟了。这是一个自我实现的预言。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;走来计科楼的路上，我想着最近大概足够幸福了，可以不抽烟了。这是一个自我实现的预言。&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="https://tilnel.github.io/20241116-working/"/>
    <id>https://tilnel.github.io/20241116-working/</id>
    <published>2024-11-16T04:54:24.000Z</published>
    <updated>2024-11-16T04:54:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来看一段代码。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">asm</span>(<span class="string">&quot;movq $-1, %rax\n&quot;</span><span class="string">&quot;syscall\n&quot;</span>); <span class="comment">/* won&#x27;t set errno */</span></span><br><span class="line">  <span class="comment">/* syscall(-1); */</span></span><br><span class="line">  <span class="type">void</span> *handle = dlopen(<span class="literal">NULL</span>, RTLD_LAZY);</span><br><span class="line">  <span class="type">long</span> *errno_position = dlsym(handle, <span class="string">&quot;errno&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (!errno_position)</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Not found&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, strerror(*errno_position));</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>syscall()</code> 事实上还是 glibc 的 wrapper。errno 并不能够被 raw 的系统调用获得，只有 glibc 的 wrapper 能干这件事。我用内联汇编写 syscall 指令，errno 立马就不管用了。</p><p>问题在于 glibc 是怎么知道 syscall 出了什么问题的，感觉有点头秃。</p><p>OK syscalls(2):</p><blockquote><p>Note: system calls indicate a failure by returning a negative error number to the caller on architectures without a separate error register&#x2F;flag, as noted in syscall(2); when this happens, the wrapper function negates the returned error number (to make it positive), copies it to errno, and returns -1 to the caller of the wrapper.</p></blockquote><p>看到这里，我情不自禁地想问，既然 errno 对 kernel 不可见，那么对于 <code>ptrace(PTRACE_PEEKDATA)</code> 这种调用，它就算在成功的情况下也有可能返回 -38(ENOSYS) 这种东西。我怎么知道这个系统调用是成功了还是失败了？</p><p>答案是 ptrace(2):</p><blockquote><p>C library&#x2F;kernel differences: At the system call level, the PTRACE_PEEKTEXT, PTRACE_PEEKDATA, and PTRACE_PEEKUSER operations have a different API: they store the result at the address specified by the <u>data</u> parameter, and the return value is the error flag. The glibc wrapper function provides the API given in DESCRIPTION above, with the result being returned via the function return value.</p></blockquote><p>其实我觉得这样 wrap 一下真的很干。平白无故给我的理解上了一点强度。譬如在 strace 中</p><p><img src="image-20241116132923596.png" alt=""></p><p>我分明就是用内联汇编调用的。然后你告诉我这里无中生有返回了一个 -1。我觉得不行。</p><img src="image-20241116133145608.png" alt="image-20241116133145608" style="zoom:50%;"><p>对于我来说，我就想看到最 raw 的系统调用结果。</p><p>不过对于我们的 tracer 而言，这些都是小问题。现在我们知道如何设置 errno 了：因为 ptrace 获得的永远都是 raw 的 rval，所以只要改 rval(%rax) 就行了。</p><hr><p>关于线程退出状态的问题，可以看一看这个。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">foo</span><span class="params">(<span class="type">void</span> *_)</span> &#123;</span><br><span class="line">  <span class="comment">/* syscall(SYS_exit, EXIT_FAILURE); */</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="type">void</span> *)<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">pthread_t</span> thrd;</span><br><span class="line">  pthread_create(&amp;thrd, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>);</span><br><span class="line">  <span class="type">void</span> *exited;</span><br><span class="line">  pthread_join(thrd, &amp;exited);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;foo exited with %ld\n&quot;</span>, (<span class="type">long</span>)exited);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接 exit，则会打印 foo exited with 0。但用 return 的就能打出 1 了。说明 pthread 在 foo return 之后果然是使用了一些同步的操作把返回值写进。如果没有这个操作，返回值就彻底丢掉了。</p><p>为什么是 0，其实是 join 的时候 pthread 干的。</p><img src="image-20241116135339801.png" alt="image-20241116135339801" style="zoom:50%;"><hr><p>对于 thread 的认知可能需要更新一下。</p><p>首先一个进程默认会有一个初始线程。进程是一个资源单位，而线程是一个调度单位。一个进程可以有很多个线程，包括初始的线程。这些线程之间都是平等的，在操作系统视角来说，没有高低，主次之分。任何线程都可以悄悄地似掉，如果没有其他的同步机制的话，那就真的死掉了。</p><p>新创建的线程，只是和创建它的进程同属一个线程组，可以说它是这个进程的子线程，而不能说是之前的线程的子线程。子线程创建新线程，它们依然是平级的。</p><img src="image-20241116141014668.png" alt="image-20241116141014668" style="zoom:50%;"><p>实验的结果</p><hr><p>想要恢复线程，也就是在dump的时候，先研究一下线程之间的关系。然后把cpu上下文装到线程里就行了。</p><p>while clone() 是会返回一些 tid 的。理想状况下，应该控制 tid 和之前一样，但是我该怎么做（？）</p><hr><p>明日任务：rewrite socket syscall</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先来看一段代码。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span</summary>
        
      
    
    
    
    <category term="科研" scheme="https://tilnel.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="https://tilnel.github.io/20241113-working/"/>
    <id>https://tilnel.github.io/20241113-working/</id>
    <published>2024-11-13T06:37:30.000Z</published>
    <updated>2024-11-13T06:37:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>先来做一个数独吧。然后就做了一小时。</p><hr><p>主要就来写一些关于 ptrace 的发现吧。从这样一个小程序说起</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> pid = fork();</span><br><span class="line">  <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">    ptrace(PTRACE_TRACEME, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    raise(SIGSTOP);</span><br><span class="line">    execl(<span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;ls&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    perror(<span class="string">&quot;execl&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// tracer</span></span><br><span class="line">    waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    ptrace(PTRACE_SEIZE, pid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">/* ptrace(PTRACE_SETOPTIONS, pid, 0, PTRACE_O_TRACESYSGOOD); */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%*c&quot;</span>);</span><br><span class="line">      ptrace(PTRACE_SYSCALL, pid, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">      waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">ptrace_syscall_info</span> <span class="title">info</span>;</span></span><br><span class="line">      <span class="type">int</span> result = ptrace(PTRACE_GET_SYSCALL_INFO, pid, <span class="keyword">sizeof</span>(info), &amp;info);</span><br><span class="line">      <span class="keyword">if</span> (result == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptrace error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (info.op) &#123;</span><br><span class="line">      <span class="keyword">case</span> PTRACE_SYSCALL_INFO_ENTRY:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;syscall entry: ID = %lld\n&quot;</span>, info.entry.nr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PTRACE_SYSCALL_INFO_EXIT:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;syscall exit : ID = %lld\n&quot;</span>, info.entry.nr);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PTRACE_SYSCALL_INFO_NONE:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;None\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> PTRACE_SYSCALL_INFO_SECCOMP:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Seccomp\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 line 11 的注释。在注释掉这一行前，syscall_info 是可以获得相关信息的。但是注释之后，每次都只能获得到 NONE。Man ptrace(2) 理由是，”In case of system call entry or exit stop…limited to type ..NONE unless ..TRACESYSGOOD option is set”。</p><p>我们现在来控制它走几步。</p><img src="image-20241113174529054.png" alt="image-20241113174529054" style="zoom:50%;"><p>依此就是 execve()， NONE， 还有 brk()。</p><p>根据 strace，&#x2F;bin&#x2F;ls 的第一个调用就是 brk()，挺合理的。</p><p><img src="image-20241113174636851.png" alt="image-20241113174636851"></p><p>这里甚至看到 execve() 有返回值（？？）</p><p>那么，其实想要揪出这个 NONE 到底是什么。</p><img src="image-20241113181716326.png" alt="image-20241113181716326" style="zoom:50%;"><p>根本不懂。</p><hr><p>我是呆逼。</p><img src="image-20241113181807456.png" alt="image-20241113181807456" style="zoom:50%;"><p>意思是 <code>SIGTRAP|0x80</code> 是一般的正常的系统调用 invoke&#x2F;return 产生的。而那个 5 应该是有问题的。</p><hr><p>逆天。</p><img src="image-20241113184302150.png" alt="image-20241113184302150" style="zoom: 67%;"><p>这个特性挺能藏。</p><hr><p>接下来，我们将会来观察，在 clone 发生的时候，ptrace 要怎么跟踪</p><hr><p>首先随便讲一下线程这个东西。</p><p>作为 clone() 创建的 linux 原生线程呢，刚创建完后被控制的第一下，就是执行线程入口函数的第一个系统调用。这为我们简化了很多。但是在函数执行完之后，线程就会悄悄地死掉，然后什么也不告诉主线程。</p><p>事实上，thread 自行退出是通过 SYS_exit 系统调用（60号）。它做的仅仅是终结这个执行流；那么就少了一个可以调度到 CPU 上被执行的东西。不太明白这个系统调用对于资源的释放有没有，似乎没有，毕竟 clone() 之前就要准备好线程要使用的资源了，应该是调用者释放。</p><p>在任意一个线程，甚至是主线程，调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syscall(SYS_exit, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>都可以使当前执行流停止，并且其他的线程继续运行，整个进程基本上没啥大问题。资源应该都是进程层级的东西。</p><p>如果子线程退出，你会得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-process</span><br></pre></td></tr></table></figure><p>如果主线程退出，会得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-process-&#123;process&#125;</span><br></pre></td></tr></table></figure><p>是的，主线程死了，但是主进程还活着。</p><img src="image-20241113202635648.png" alt="image-20241113202635648" style="zoom:50%;"><p>当然其实 <code>ps -aux</code> 还是可以看到它的状态的。非常地合理。</p><hr><p>作为 tracer，在看到线程 syscall(60) 的时候，只要在 entry 处 detach 一下就好了。当然如果要砍掉一个线程，那只要罚它做一个 SYS_exit 然后 detach。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;先来做一个数独吧。然后就做了一小时。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;主要就来写一些关于 ptrace 的发现吧。从这样一个小程序说起&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
        
      
    
    
    
    <category term="科研" scheme="https://tilnel.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>新功能：显示我是否在工位干活</title>
    <link href="https://tilnel.github.io/20241112-activity/"/>
    <id>https://tilnel.github.io/20241112-activity/</id>
    <published>2024-11-12T07:49:37.000Z</published>
    <updated>2024-11-12T07:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>已实装在 <a href="https://tilnel.github.io/about">about | Tilnel’s Blog</a></p><p>给静态页面加这种东西，疑似有点闲。</p><p>实现分为三步：</p><p>1、判断我是否在工位 - 采取的标准是检测右手边主机是否锁屏</p><p>2、动态更新</p><p>3、将其显示在静态页面上。毕竟 github.io 仓库太慢了</p><h1 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h1><p>修改 Windows 组策略使得锁定(4800)解锁(4801)事件被记录。写一个cpp获取最后一个事件，挂在后台。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CheckLockUnlockEvents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    HANDLE hEventLog = <span class="built_in">OpenEventLog</span>(<span class="literal">NULL</span>, <span class="string">&quot;Security&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (hEventLog == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Failed to open event log.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DWORD bytesRead = <span class="number">0</span>, minBytesNeeded = <span class="number">0</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> bufferSize = <span class="number">1024</span> * <span class="number">10</span>;</span><br><span class="line">    <span class="function">std::vector&lt;BYTE&gt; <span class="title">buffer</span><span class="params">(bufferSize)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">ReadEventLog</span>(hEventLog, EVENTLOG_SEQUENTIAL_READ | EVENTLOG_BACKWARDS_READ,</span><br><span class="line">                      <span class="number">0</span>, buffer.<span class="built_in">data</span>(), bufferSize, &amp;bytesRead, &amp;minBytesNeeded)) &#123;</span><br><span class="line">        std::cerr &lt;&lt; <span class="string">&quot;Failed to read event log.\n&quot;</span>;</span><br><span class="line">        <span class="built_in">CloseEventLog</span>(hEventLog);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span>* pRecord = <span class="built_in">reinterpret_cast</span>&lt;EVENTLOGRECORD*&gt;(buffer.<span class="built_in">data</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((BYTE*)pRecord &lt; buffer.<span class="built_in">data</span>() + bytesRead) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pRecord-&gt;EventID == EVENT_LOCK || pRecord-&gt;EventID == EVENT_UNLOCK) &#123;</span><br><span class="line">            std::string eventType = (pRecord-&gt;EventID == EVENT_LOCK) ? <span class="string">&quot;Lock&quot;</span> : <span class="string">&quot;Unlock&quot;</span>;</span><br><span class="line">            std::string message = <span class="string">&quot;Event: &quot;</span> + eventType + <span class="string">&quot;, Time: &quot;</span> + std::<span class="built_in">to_string</span>(pRecord-&gt;TimeGenerated);</span><br><span class="line">            std::cout &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">SendUDPMessage</span>(message);  <span class="comment">// 发送事件到目标主机</span></span><br><span class="line">            <span class="keyword">break</span>;  <span class="comment">// 每次检测只发送最新的一个事件</span></span><br><span class="line">        &#125;</span><br><span class="line">        pRecord = (EVENTLOGRECORD*)((BYTE*)pRecord + pRecord-&gt;Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CloseEventLog</span>(hEventLog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>把事件信息发到 Linux 主机上。启动一个守护进程，监听消息并生成一个 &#x2F;tmp&#x2F;activity 文件，内容为需要在网站上显示的 html 标签。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#ff0000&#x27;</span> <span class="attr">已经离开了</span>&lt;/<span class="attr">font</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置 nginx</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> /activity &#123;</span><br><span class="line">  <span class="attribute">default_type</span> text/html;</span><br><span class="line">  <span class="attribute">alias</span> /tmp/activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h1><p>塞一个 JavaScript 到主题的 js 文件夹里，fetch 这个 html 标签并塞到另一个 html 标签里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">&quot;?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetch</span>(url, &#123; <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span> &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! Status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="title function_">text</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;html-container&#x27;</span>).<span class="property">innerHTML</span> =</span><br><span class="line">          html;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to fetch HTML:&#x27;</span>, error);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;html-container&#x27;</span>).<span class="property">innerText</span> =</span><br><span class="line">          <span class="string">&#x27;Failed to load content.&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在，为了从 github.io 上跨域访问，需要设置 nginx 的 Head</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> = /activity &#123;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">  <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Content-Type, Authorization&#x27;</span>;</span><br><span class="line">  <span class="attribute">default_type</span> text/html;</span><br><span class="line">  <span class="attribute">alias</span> /tmp/activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们把需要的元素装在 About 的 markdown 里面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;html-container&quot;</span>&gt;</span>校园网访问可加载当前状态<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/active.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果：</p><div id="html-container">校园网访问可加载当前状态</div><script type="text/javascript" src="/js/active.js"></script>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;已实装在 &lt;a href=&quot;https://tilnel.github.io/about&quot;&gt;about | Tilnel’s Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给静态页面加这种东西，疑似有点闲。&lt;/p&gt;
&lt;p&gt;实现分为三步：&lt;/p&gt;
&lt;p&gt;1、判断我是否在工位 -</summary>
        
      
    
    
    
    <category term="摸鱼" scheme="https://tilnel.github.io/categories/%E6%91%B8%E9%B1%BC/"/>
    
    
  </entry>
  
  <entry>
    <title>工作随记</title>
    <link href="https://tilnel.github.io/20241112-working/"/>
    <id>https://tilnel.github.io/20241112-working/</id>
    <published>2024-11-12T01:30:58.000Z</published>
    <updated>2024-11-12T01:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>今日目标是把之前的代码改完，并且至少支持 C&#x2F;S 类型的程序。</p><p> 第一步是重新梳理一下，auto 模式和 manual 模式分别到底发生了什么，进而能够在代码中对两种写法进行分开&#x2F;耦合。</p><p>事实上，auto 模式可以视为一种机器提供操作的 manual 模式。因而可以优先分析 Manual。</p><p>手动模式下，大致是这样的流程：</p><ul><li>启动 tracee，推进到初始状态后停下</li><li>等待用户输入，首先是切换“焦点”。进而是“执行一步”。</li></ul><p>此时，running 为全局第一个 state。</p><p>“执行一步”都做了什么？</p><ul><li>首先，作为手动模式，一般来说是顺着往下走，一般来说无须进行自动的状态恢复。</li><li>在某一位置触发了 Choose。此种情况并不需要进行 ckpt，因而只需要停下来，并询问 Choose 应当产生的结果。</li><li>一步执行结束。需要进行 ckpt。如果用户并未指定切换焦点，则下一步仍然在当前的焦点上进行。</li><li>当然，delete last_running; last_running &#x3D; running;</li></ul><p>ckpt 到底做了什么？</p><ul><li>将当前的状态放到 running 中。并且序列化然后写盘</li><li>也许写盘的操作可以在内存压力不大的情况下省去。用正经一点的话来说，就是“改变存储引擎为磁盘&#x2F;内存”<ul><li>但是这个好像并不是瓶颈，不首先考虑。</li></ul></li></ul><p>一个小问题。</p><p>在</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((constructor)) <span class="built_in">dwarf_init</span>();</span><br></pre></td></tr></table></figure><p>中，写 <code>std::unordered_map::operator[]</code> 会产生一个 floating point exception。推测 .init 早于了 STL 的实例化。</p><p>一天结束了。记一下我做到哪里了。</p><p>首先我在 Monitor 模块。其次我正在写 configure 的读取。接下来我要改写初始化状态的部分。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今日目标是把之前的代码改完，并且至少支持 C&amp;#x2F;S 类型的程序。&lt;/p&gt;
&lt;p&gt; 第一步是重新梳理一下，auto 模式和 manual 模式分别到底发生了什么，进而能够在代码中对两种写法进行分开&amp;#x2F;耦合。&lt;/p&gt;
&lt;p&gt;事实上，auto</summary>
        
      
    
    
    
    <category term="科研" scheme="https://tilnel.github.io/categories/%E7%A7%91%E7%A0%94/"/>
    
    
  </entry>
  
  <entry>
    <title>重读 eXplode 知道的事情</title>
    <link href="https://tilnel.github.io/20241111-eXplode/"/>
    <id>https://tilnel.github.io/20241111-eXplode/</id>
    <published>2024-11-11T09:30:39.000Z</published>
    <updated>2024-11-11T09:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>The reader should keep in mind that conceptually what EXPLODE does is very simple. If we assume infinite resources and ignore some details, the following would approximate its implementation: 1. Create a clean initial state (§3.3) and invoke the client’s mutate on it. 2. At every choose(N) call, fork N children. 3. Onclient request, generate all crash disks and run the client check method on them. 4. When mutate returns, re-invoke it</p></blockquote><p>这个简化是非常不讲道理的。作为不需要复现这种技术的人来说，当然可以假设你在每一个分支的地方都去作 Fork，但是。。。这始终不是很对。</p><p>对于想要模仿这种做法的人来说，完全找不到任何方法可以忽略过度使用 fork() 带来的进程数量爆炸。问题不光处在系统性能资源上。甚至可以说，连进程数量上限都能摸到</p><p>当然作者的说法是很狡猾的，“你们大可以把这件事情看成是这样”。这句话隐含的意思就是实际情况和他所说的相去甚远。</p><p>当然，作者还是有所补充的：</p><blockquote><p>As a result, EX PLODE unsurprisingly looks like a primitive operating system: it has a queue of saved processes, a scheduler that picks which of these jobs to run, and time slices</p></blockquote><p>所以总的来说，做法还是状态存取和调度器。</p><img src="image-20241111174219924.png" alt="image-20241111174219924" style="zoom:50%;"><p>接下来有点费解。</p><blockquote><p>exhaust all possible combinations of choices within a single mutate call before doing another.</p></blockquote><p>也就是原地把所有的可能性都走一步，再往下走。有一种广搜的感觉，而不是：我尝试这个分支，然后从这里继续往后探索。</p><p>eXplode 的 ckpt 方法是确定性回放。也就是 stateless。</p><blockquote><p>EXPLODE uses computation rather than copying to recreate states.</p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;The reader should keep in mind that conceptually what EXPLODE does is very simple. If we assume infinite resources and</summary>
        
      
    
    
    
    <category term="Distributed Systems" scheme="https://tilnel.github.io/categories/Distributed-Systems/"/>
    
    
  </entry>
  
  <entry>
    <title>重力</title>
    <link href="https://tilnel.github.io/20241110-gravity/"/>
    <id>https://tilnel.github.io/20241110-gravity/</id>
    <published>2024-11-10T10:13:45.000Z</published>
    <updated>2024-11-10T10:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>桌游组的重力系数也许太高了。可怕。是不是大家身上的负担都太重了？</p><p>虽然这个群可能本身就是这样，群友进来说两句抑郁的话，然后消失，然后过一阵子再来抑郁一下。这些抑郁却又说不出个实在的理由。每种情绪一定有引起它的原因，但是有人似乎是不愿意将这种原因附着于某种俗物，以便为它起一个浮华亮丽的名字。这样还可以敝帚自珍一下。</p><p>也许人都是有远多于自己想象的自尊的。譬如不愿意接受竟然是这么俗套、这么没意思的理由造成了自己的抑郁。于是就需要给原初的创伤套皮，如同河蚌分泌出物质来包裹沙石形成珍珠一样。于是伤口首先变得漂亮；其次变得看起来没有什么破坏力。分析卡在这一层也就没有什么实际的效用了。 </p><p>大概现在还是需要努力有意识地在聊天的时候断断句。但是文字形式的断句效果是很差的，因为文字经过自己的反思的概率是更高的，不一定能够逮到无意识的尾巴。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;桌游组的重力系数也许太高了。可怕。是不是大家身上的负担都太重了？&lt;/p&gt;
&lt;p&gt;虽然这个群可能本身就是这样，群友进来说两句抑郁的话，然后消失，然后过一阵子再来抑郁一下。这些抑郁却又说不出个实在的理由。每种情绪一定有引起它的原因，但是有人似乎是不愿意将这种原因附着于某种俗物，</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>博客、Hexo、Valine评论头像 备忘</title>
    <link href="https://tilnel.github.io/20241110-blog/"/>
    <id>https://tilnel.github.io/20241110-blog/</id>
    <published>2024-11-10T09:08:35.000Z</published>
    <updated>2024-11-10T09:08:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Valine 评论区在移动设备上可能刷不出来。应该是浏览器的问题。</p><p>Valine 评论是可以设置头像的，前提是留下一个邮箱，并且这个邮箱注册了 <a href="https://gravatar.com/">Gravatar</a> 然后设置了头像。一次注册到处使用。</p><img src="image-20241110171001041.png" alt="头像" style="zoom: 67%;"><p>砍掉了博客的文章摘要。改成了 Archive 的页面。</p><p>砍掉了文章列表分页，力求原始简单。</p><p>砍掉了回到顶部按钮，总共也不会多长。</p><p>终于启用了 jQuery 站内搜索，现在可以搜索关键字了。</p><p>更新了 About 的内容。省略了很多网络社交不需要的东西。</p><p>更新了几个友链，虽然我们并没有交换，就当是博主推荐了。</p><p>启用了访问统计(busuanzi)。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Valine 评论区在移动设备上可能刷不出来。应该是浏览器的问题。&lt;/p&gt;
&lt;p&gt;Valine 评论是可以设置头像的，前提是留下一个邮箱，并且这个邮箱注册了 &lt;a href=&quot;https://gravatar.com/&quot;&gt;Gravatar&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="技术" scheme="https://tilnel.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>Highway to Hell</title>
    <link href="https://tilnel.github.io/20241108-trip/"/>
    <id>https://tilnel.github.io/20241108-trip/</id>
    <published>2024-11-07T21:46:41.000Z</published>
    <updated>2024-11-18T13:00:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>Preface</p><p>11月7日，骑了很远的路。游记参考祁念的记录。似乎我也没有什么实际的情节需要补充。</p><p>为什么会做这样看起来疯狂且没头脑的事情，我已经忘记了很久——并非。</p><p>如果没有可以互动的对象，那么回家&#x2F;宿舍&#x2F;工位将会是一件非常乏味的事。看起来工作室的各位都不是十分愿意离开人群。与人在一起这件事本身包含了一种力量，似乎是“收到反馈”的权力。人做任何事、说任何话的背后都隐藏着一种期待，或是说一种欲望，即将这些话语和行为的意义进行锚定，以防止这些内容在产生意义之前就散失了。呃说人话：一种“回应”是人们所期待的，回应这件事使得自我的主动表达得到了ACK。于是就可以对行为的意义进行自己的判断。这一判断就是依据回应生成的。</p><p>可能这样说并不精准。回应并不是“判断”的内容的充分依据，它充其量是一种直接原因。因为回应到了，我们搜索自己的意识，产生新的行为以应对那个回应。</p><p>“≥3”是一个并不充分的条件。大多数情况下，3个人的活动可以产生足够多的plot以供所有人咀嚼，产生回应，引发一种“消息风暴”。2个人的活动就会大打折扣了。</p><p>我在说<strong>二人关系是乏味的</strong>，听起来有点危险。</p><hr><p>其实应该写游记的，但是祁老师已经写了主要情节，我就偷个懒搬来好了（）</p><blockquote><p>据说这个游记其实有五篇。但是跳票3篇。《自行车篇》《厕所篇》《消费篇》《旅途见闻篇》《尾声》</p></blockquote><p>一切的起因都要从一顿饭吃完回来已经过了十二点开始。</p><p>@祁念←半夜不好意思敲醒阿姨回宿舍的人<br>@茶栗←有人建议就会很乐意夜骑&#x2F;唱唱的人<br>@洗先生（Tilnel）←一件随机刷新的活动有≥3（含自己）就容易参与的人<br>三人成组，踏上行程准备，在玄武湖和晓庄中间选择了更近的目的地。</p><p>《自行车篇》<br>洗杯子先生记起来自己其实还有一辆被自己遗忘在宿舍门前数月的公路自行车，作为没有哈啰月卡又没办法骑电动车出校的人，选择回去看看公路车是否可用——结果当然是不可用的，从车山车海中把车举起来放出来的下一秒，车的瘪后胎就说明了自己不堪大用。于是选择了（看上去）更适合当天行程的价值8.6元的哈啰七天卡，此处是一个伏笔。</p><p>在出门的过程中，洗杯子先生认为自己的车需要重买，于是以五十块把车当场抛售给了乐得如此的cj——至于cj要花多少个五十块才能修好这辆车，此乃后话。</p><p>骑至金鹰附近借洗手间休整后，洗杯子先生突然发现，七天卡的权益不同于高贵的两小时无限次的月卡，单次最长时间其实只有30min——发现这件事的时候，已经37min后了，于是支出+1元。</p><p>此后订了闹钟，每半小时休整一次更新哈啰时间，最终在数次导航cj的偏航之后抵达了目的地——某不知名的夜不落食物街道。尽管当时已经近凌晨四点，街边小摊和相当多的临街店铺还在营业。随机选择了一家幸运早餐店作为补给。虽然选择了这家店的cj并没有吃，价格算得上低廉，味道也不差。</p><p>吃饱喝足之后再次上路，弹出的消息却是“您的哈啰权益已过期”，经过仔细确认和休整次数的回忆，三人惊喜的发现没有麻麻的哈啰的七天卡，是七天五次，反复开关最终提前刷爆了额度——不过其实还有三次助力车，但是南京压根没有助力车。于是洗杯子先生进入了今日第不知道几绷并表达了对哈啰的亲切问候。</p><p>尽管如此，限于有人骑自己的车来，还是没办法打车，又“骑都骑了”，最终继续选择哈啰上路。“这次要不你就全程开得了别开卡了？”“开了，因为我发现续卡只要4.1元。”——这 绝 对 是 消 费 陷 阱。</p><p>返程途中还是继续保持三十分钟一停的规律……吗？在某个三十分钟后试图休整的洗杯子先生遇到了全新的滑铁卢，哈啰单车颇为别出心裁将运营区挖了个洞——尽管来时我们走过相同的路，但是来时恰巧避开了这里休整。此处我们位于洞中，最近的回运营区重置时长的方式是倒车，但显然，倒车对于这种骑行还是太残忍了，最终骑到了路线经过的下一个运营区，换句话说，支出+1元。</p><p>总之最终先到了KFC吃cj的早餐，又到了金鹰711与起得早得过头的kakaa会合进行了一波消费。消费过后，尽管kakaa的后座仍可以坐人，但是一方面，“既然追求骑行，不如贯彻到底”，cj和洗杯子先生还是选择骑行；另一方面“自己的不爽固然令人难受，但同行人的舒适更加令人揪心”，被cj和洗杯子先生否决了“骑一辆更舒适的车这样自己可以顺势坐kakaa后座”的提议的祁念同学终究继续骑行。</p><p>最终四人从西门进校，进校后的第一件事是更换至自己具有高贵的电动车小蓝月卡的座驾，并放言“现在有两个人舒服了”。</p><p>舒服挺好，如果剩下的六次助力车次数能在七天内用完就更好了（笑）</p><blockquote><p>祁念: 其实返程cj提过从南京站走从钟山南侧回来，被两个人同时否了</p><p>洗先生: *绝对会死的*</p><p>祁念: *绝对会死的*</p></blockquote><hr><p>《厕所篇》<br>不知道为什么当天在厕所处的笑点如此之多，大概人类还是需要厕所。</p><p>在去查看洗杯子先生的公路车近况之前，cj提过一次用教学楼洗手间，可能是公路车的现况太过好笑且震撼，也可能是被冷风把脑壳吹不清醒了，三人直接出门前往晓庄了。</p><p>鉴于出门前校内711恐怖长队现状，祁念提出可去金鹰711逛一圈看看情况，于是稍微变更了一下路线经由金鹰前往目的地。抵达711并购入水补给之后，询问711店员附近的洗手间，店员答曰海底捞，于是出门前往海底捞借用厕所。</p><p>洗杯子先生认为金鹰有一家营业的酒店，上次的23：00左右他仍然有走过南侧的某条路。而具有丰富的阴间时间金鹰海底捞经验的cj认为不然，曾经有幸体验阴间时间海底捞的祁念也认为不然。于是前往金鹰北侧，提车后，洗杯子先生于此时发现哈啰七天卡权益打骨折，祁念同学正在看热闹。</p><p>一抬头cj已然消失，然而东北侧门实则已锁，并不熟悉夜半金鹰的二人确认了半天此路不通，跟着一般通过的路人，找到了略靠西北侧的可用门，并在电梯间遇到了已经用过厕所下楼的cj。什么叫做经验丰富啊[战术后仰.jpg]总之略等了一手之后，三人继续踏上行程。</p><p>在中途的某次停车休整时，路旁十字路口拐角有一间装修十分厕所的建筑，但是它的气味不足又弥补了这一部分。适逢cj正在查询消费记录和地图，好奇心绕行半圈以后发现，这确实是公共厕所，并且门前还有貌似已经收摊的夜市。[如果一间建筑长得像厕所，位置像厕所，那它就是厕所.jpg]</p><p>时间一路快进到抵达大成名店的KFC吃完早餐之后，cj惊喜发现此间KFC的厕所是坏的。在KFC店员和大成名店内部员工的指路下找到了大成名店一楼的厕所——尽管在数米开外，奇妙的气味已经让人有了敬而远之的想法。于是祁念和洗杯子同学一同在外等候cj，而cj在出来以后分享了自己与鼠鼠（rat而非mouse版）在厕所相见的趣闻。</p><p>还好没去。</p><hr><p>鉴于剩下的几篇跳票太久了，作者自己记性不太好。所以还是试图自己写了。</p><p>TODO：车载音响</p><hr><p>《消费篇》</p><p>说起来，本次夜骑正是从一场未遂的711开始的。在吃完上一顿后，打车回来的三人准备看一眼校内711的营业情况。洗杯子先生认为，应该没有那么多人无聊&#x2F;精力旺盛到半夜起来去排队给711刷业绩。但是真的在一点多的时候看到校内711的盛况之后傻眼了，本来打算捡个漏的，没想到我校学生还是太有精神了。鉴于三人都不想排队于是离开，就在这路上，三人草率地决定要夜骑——去往cj记忆中的某一个夜市。</p><p>离开学校不久，三人打算去瞧一瞧金鹰的711是否有活动，于是提前进行了一个拐弯。当711出现在眼前的时候，三人惊喜地发现：不但有活动，而且还没人排队（果然大学生是这个世界上最有精神的群体）。三人决定在711进行一些液体补给，并在黎明时分返回到这里进行一波抢购。</p><p>转眼目的地已然到达，夜市一条街除了两边的商铺开着，马路中间也各种流动摊贩，还有在路中间支起了帐篷的临时馆子，繁华程度让在南京生活了快24年的洗杯子先生表示活久见——毕竟是完全没有夜生活的城市。三人略犹豫一会儿后，决定去吃一家早餐店，此时大约是三四点的样子。</p><p>令人疑惑的是，祁念点了两碗粥——记忆中是赤豆元宵和皮蛋瘦肉粥。问及缘由的时候，说是喜欢又喝甜的又喝咸的。这也是从来没见过的操作。另外要吐槽的是，这家店的锅贴出奇地小。虽然看到价格是6块钱8个的时候就觉得份量应该不太大，但是这个实际大小很难让洗杯子先生将其与他认知中的锅贴联系在一起。当然，总的来说这家店是很便宜的，不仅感叹这居然是2024年的物价。cj什么也没有吃，表示他只是想来到这里，就满意了。</p><p>返程路上三人先经过了大成名店的KFC，cj在此作早餐补给，三人修整后与kakaa一道去了金鹰的711。6点时候的711已经人比较多了。在进门的时候，所有人都以为这里一共有两个711会员，所以应该会有4张117-60的券……吧？然而并没有：祁念似乎没有领券。洗杯子先生和kakaa买了一篮子，而祁念和cj拿了两篮子，到了结账的时候发现没券，不得不使用kakaa的另一张。cj得知充满了零食的那一篮无法结账后悲痛欲绝：您这是把大头给省掉了啊。在回校之后，发现似乎太多的同学都经历了挑选半天商品最后结账时发现没有券的惨剧，这下非常庆幸了——kakaa在那时候恰好醒了，并且恰好能够被call来，kakaa简直就是三人的救世主。</p><hr><p>首先复盘一下路线</p><p>走仙林大道</p><p><img src="image-20241118183037258.png" alt="image-20241118183037258"></p><p>在仙林中心站看到罗森未开门，补给失败决定右拐到金鹰711</p><p><img src="image-20241118183148372.png" alt="image-20241118183148372"></p><p>在金鹰湖滨天地左拐进入文苑路，一直到久客宾馆</p><p><img src="image-20241118183226843.png" alt="image-20241118183226843"></p><p>走仙隐北路向西北方向出了仙林街道</p><p><img src="image-20241118183330230.png" alt="image-20241118183330230"></p><p>经过仙尧路。路过车管所以及垃圾宁芜铁路</p><p><img src="image-20241118184523720.png" alt="image-20241118184523720"></p><p>接下来我认到了这个。因而我们一定走了尧新大道。</p><p><img src="image-20241118184615526.png" alt="image-20241118184615526"></p><img src="image-20241118185512486.png" alt="image-20241118185512486" style="zoom:33%;"><img src="image-20241118185700686.png" alt="image-20241118185700686" style="zoom: 33%;"><p>然后在煤炭地质局附近看到了一家KTV。我问有没有唱唱（）。此处左拐</p><p><img src="image-20241118185813078.png" alt="image-20241118185813078"></p><img src="image-20241118190043362.png" alt="image-20241118190043362" style="zoom:50%;"><p>去程燕尧路是一个下坡。有路牌指马鞍山，但是我也没找到附近有任何马鞍形状的山。</p><p><img src="image-20241118190143976.png" alt="image-20241118190143976"></p><p>可以看到街景这里的照片比较新，有这个外市非机动车禁止通行。再往前走点的老街景是没有的。</p><p><img src="image-20241118190308257.png" alt="image-20241118190308257"></p><p>此处对面就是G36宁洛高速入口了。</p><p><img src="image-20241118190523192.png" alt="image-20241118190523192"></p><p>总之向西南进入华银路。路过了丁家庄夜市，还有妇幼保健院。厕所篇亦有记载。</p><p><img src="image-20241118190945710.png" alt="image-20241118190945710"></p><p>之后是路过了兴卫村站。感叹道这是活在语音报站里的118路底站。在这里下坡一路狂奔，但是走错路了，在前面折返。返回来看到有遛狗的了都。</p><p><img src="image-20241118191203034.png" alt="image-20241118191203034"></p><p>嗯这条路就长这样。</p><p><img src="image-20241118191239926.png" alt="image-20241118191239926"></p><p>兴卫村站。以及左边疑似是碰到遛狗人的地方。</p><p><img src="image-20241118191355287.png" alt="image-20241118191355287"></p><p><img src="image-20241118191414464.png" alt="image-20241118191414464"></p><p>折返的路口</p><p><img src="image-20241118191511702.png" alt="image-20241118191511702"></p><p>回退，然后向西北（左拐）</p><p><img src="image-20241118191550281.png" alt="image-20241118191550281"></p><p>走寅春路。应该有经过瑞福大街</p><p><img src="image-20241118191724080.png" alt="image-20241118191724080"></p><p>只有向北一条路了。</p><p>![image-20241118183005612](20241108-trip.assets&#x2F;image-20241118183005612.png</p><p><img src="image-20241118184232297.png" alt="image-20241118184232297"></p><p>终点：寻苏味粥铺（万寿商业街）。在北边存在一个万寿购物中心的全天营业茶百道</p><p>南京大学仙林校区-仙林大道-学海路-文苑路-仙隐北路-仙尧路-尧新大道-燕尧路-华银路-华电北路(在兴兴路口前折返)-寅春路-万寿商业街</p><p><img src="image-20241118193851922.png" alt="image-20241118193851922"></p><p>万恶之源</p><p><img src="image-20241118193144552.png" alt="image-20241118193144552"></p><p>此地使我DNA动了，因为我就是在这里上的范如本的物理化学课。</p><p><img src="image-20241118193247303.png" alt="image-20241118193247303"></p><p>看到这个感觉无疑了。如果再蹦出两家吃过的店来那就完全正确了。</p><p><img src="image-20241118193345671.png" alt="image-20241118193345671"></p><p>我肯定吃过这个肯德基。我记得这家装修很特殊，比很多店都要精致一点。</p><p><img src="image-20241118193529084.png" alt="image-20241118193529084"></p><p>我每天好像就是在这个附近等车回家。</p><p><img src="image-20241118193605198.png" alt="image-20241118193605198"></p><p>这个上坡街景也对得上。</p><p><img src="image-20241118193646820.png" alt="image-20241118193646820"></p><p>就是这里。当时可以坐311到长途东站。</p><hr><blockquote><p>南京大学仙林校区-仙林大道-学海路-文苑路-仙隐北路-仙尧路-尧新大道-燕尧路-华银路-华电北路(在兴兴路口前折返)-寅春路-万寿商业街</p></blockquote><p>《旅途见闻篇》</p><p>出发后不久，仍在仙林街道地界内的时候，经过了一个路口。此时cj触发了某种开关，停车下去开始拍照：眼前是一家名叫“久客宾馆”的店。笔者已经忘记这里有什么渊源，但是“久客”的发音类似于joker，大约如此。此处三人进行了一次没素质的闯红灯行为。</p><p>骑行的路线是一路向西出仙林街道，穿过尧化街道到达迈皋桥街道的万寿商业街。实际上一开始说是去晓庄，但其实原本的目标就是去那条商业街。</p><p>到了仙隐北路的尽头。此时洗杯子先生说，好像想起来这地方了。路口的右手边是题了“仙林”大字的界碑。再往前就是见过很多次的白金汉爵酒店。此处是很多南京考驾照的人都会路过的地方，因为再往前面走走就是车管所和尧新考场了。仙尧路横跨了多条铁路线，其中就有臭名昭著的，多年来不断影响南京市地铁线建设的，计划搬迁却迟迟没有开工的宁芜铁路。当然春夏之间，这铁路线上的风景还是很不错的。</p><p>仙尧路的后半段穿过了一片公园。一个十字路口的四边都是丛丛的森林，难免产生一种深邃神秘的感觉。</p><p>过了尧新大道，迎来的是燕尧路一段巨大的下坡。三人都默不作声，在这里尽情利用地形加速。到了尽头，看到路牌上写着大大的“马鞍山”，令人费解。</p><p>左拐就是华银路了。此路名祁念非常熟悉，因此留影。这条路也非常有节目效果。一是在《厕所篇》中提到的长得像厕所的厕所以及夜市；一是被洗杯子先生去程和回程都捕捉到的红绿灯同时亮的红绿灯。</p><p>顺着路的方向进入华电北路，又是一段强劲的下坡，三人享受着下坡一时爽，直到cj意识到好像走错路了。在与兴兴路交会的路口停下车，一阵理智的查找之后决定：原路回退！回去可就是上坡了……</p><p>上坡路上碰到了半夜的遛狗人，因为是大型犬，所以并没有允许祁念凑近。笔者忘记是什么狗了。</p><p>左拐走寅春路，直到一个尽头，在那里，路的两边都是开着的饭店，我们意识到这就是cj提到的夜市了，新世界正在三人面前。</p><p>返程。笔者唯一记得的就是金鹰的未命名湖泊上飘着的水雾。</p><hr><p>《尾声》</p><p>四人回到了他们忠实的412。cj使用工作室的睡觉装备进行休息；祁念有培训暂时不能休息；洗杯子先生决定回宿舍睡觉；而kakaa已经睡了一夜不需要休息。大家各奔东南西北。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Preface&lt;/p&gt;
&lt;p&gt;11月7日，骑了很远的路。游记参考祁念的记录。似乎我也没有什么实际的情节需要补充。&lt;/p&gt;
&lt;p&gt;为什么会做这样看起来疯狂且没头脑的事情，我已经忘记了很久——并非。&lt;/p&gt;
&lt;p&gt;如果没有可以互动的对象，那么回家&amp;#x2F;宿舍&amp;#x2F;工位</summary>
        
      
    
    
    
    <category term="日常" scheme="https://tilnel.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>性别意识-理性 allegro</title>
    <link href="https://tilnel.github.io/20241104-relationship/"/>
    <id>https://tilnel.github.io/20241104-relationship/</id>
    <published>2024-11-03T17:00:00.000Z</published>
    <updated>2024-11-07T22:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>正是在对于差异的认知当中——此处的差异指的是对具体交际当中的人而非一种概念上的认识的差异——人才在交往中寻见一种乐趣。因为其中包含了一种事物发展方向的潜能。</p><p>而其中最乐见的恐怕是性别差异。古往今来有不少女扮男装并在长久的相处之后对性别进行重新发现的故事。例如梁祝；例如木兰辞。谜底揭晓的一刻，新的可能性，或者说得更加物化一点，新的选项就出现了。</p><p>其中所暗喻的是什么？长久相处这个环节只是故事当中使用的夸张手段，以凸显出那个性别意识的到来的震惊。事实上性别意识是无处不在涌现的。我想这些故事中都包含了这样一层意思：如果直白地告诉你有一个女性在你的面前，然后你意识到那是一个女性，这样稀松平常的事情并不会引发你对“性别意识”这件事的反思；那好，我就先告诉你她是个男的，再给出真相。这样性别意识涌现的瞬间就被放大了，人的态度会在一瞬间发生变化。</p><p>如果看到这里您应激了，想说自己根本不会有任何波澜，自己对男性女性是一视同仁的，那么您一定是完全未经性化的主体，也就不会成为这篇文章的读者。反过来说，您非常害怕自己被人指出无法对男女性别一视同仁，只能通过反驳的方式自我标榜一下。</p><p>写这段也是终于意识到我有一小撮读者了，会考虑读者对我有期待，而我对读者也有预期，预期读者会是尚未进化掉动物性的 Homo Sapiens Sapiens (现代人类)。为什么动物性如此重要？我临时想到一个简单的二分法，但是刀法不是很精湛：社会化的部分是工具理性，是世界机器运转的关节；未社会化的剩余（欲望）是驱动力，是根本的目的。</p><p>不过这听起来很掉价。不是想说人根本就是为了生物冲动才活在这世界上，我始终认为意识是物质世界将其自身溶化为一种理智的中介，人一定会追求理性当中的无条件者，即一切观念存在的原因。这不仅是一项崇高的事业，也是人的生物本能的一种高阶的表现。理性就这样从“看似的”非理性当中孕育出来。</p><p>更进一步，Willingness 当然是一种理性。婴儿哭哭啼啼需要人哄，也是理性的作用。类比的话，我们无法在非图灵完备的机器上实现一种图灵完备的语言。从非理性上能长出理性来吗？人能够产生理性，只能说明生物冲动虽然看起来是非理性的，但其中含有完整的“理性的潜能”。简单的晶体管几乎什么都不能做，但它们堆起来并且输入程序，仿佛就能思考。</p><p>我缝完了。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;正是在对于差异的认知当中——此处的差异指的是对具体交际当中的人而非一种概念上的认识的差异——人才在交往中寻见一种乐趣。因为其中包含了一种事物发展方向的潜能。&lt;/p&gt;
&lt;p&gt;而其中最乐见的恐怕是性别差异。古往今来有不少女扮男装并在长久的相处之后对性别进行重新发现的故事。例如梁</summary>
        
      
    
    
    
    <category term="杂谈" scheme="https://tilnel.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>11月4日纸质稿遗失的②。密码是88888888</title>
    <link href="https://tilnel.github.io/20241104-disappeared/"/>
    <id>https://tilnel.github.io/20241104-disappeared/</id>
    <published>2024-11-03T16:30:00.000Z</published>
    <updated>2024-11-03T16:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0d294e764122956503f89c311d2568bd54be370c97d5ffbd262052ac5580c2e4">346518f25371ed5bd356f6b975c718b10b447f069f24e3eb1dff358858fbb02e6132f4398a81a590a39cf23c0e7e477e5a10f54bce3d5ba6675fd96e8932c25c9ab0440beb9bfe3e5b2fe134c00fa1f0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="日常" scheme="https://tilnel.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
</feed>
